{"ast":null,"code":"import _extends from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _isFunction from \"lodash/isFunction\";\nimport _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/SearchBlockView.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport ListingBody from '@plone/volto/components/manage/Blocks/Listing/ListingBody';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { withSearch, withQueryString } from './hocs';\nimport { compose } from 'redux';\nimport { useSelector } from 'react-redux';\nconst getListingBodyVariation = data => {\n  const {\n    variations\n  } = config.blocks.blocksConfig.listing;\n  let variation = data.listingBodyTemplate ? variations.find(_ref => {\n    let {\n      id\n    } = _ref;\n    return id === data.listingBodyTemplate;\n  }) : variations.find(_ref2 => {\n    let {\n      isDefault\n    } = _ref2;\n    return isDefault;\n  });\n  if (!variation) variation = variations[0];\n  return variation;\n};\nconst isfunc = obj => _isFunction(obj) || typeof obj === 'function';\nconst _filtered = obj => Object.assign({}, ...Object.keys(obj).map(k => {\n  const reject = k !== 'properties' && !isfunc(obj[k]);\n  return reject ? {\n    [k]: obj[k]\n  } : {};\n}));\nconst blockPropsAreChanged = (prevProps, nextProps) => {\n  const prev = _filtered(prevProps);\n  const next = _filtered(nextProps);\n  return _isEqual(prev, next);\n};\nconst applyDefaults = (data, root) => {\n  var _data$query;\n  const defaultQuery = [{\n    i: 'path',\n    o: 'plone.app.querystring.operation.string.absolutePath',\n    v: root || '/'\n  }];\n  return _objectSpread(_objectSpread({}, data), {}, {\n    sort_on: (data === null || data === void 0 ? void 0 : data.sort_on) || 'effective',\n    sort_order: (data === null || data === void 0 ? void 0 : data.sort_order) || 'descending',\n    query: data !== null && data !== void 0 && (_data$query = data.query) !== null && _data$query !== void 0 && _data$query.length ? data.query : defaultQuery\n  });\n};\nconst SearchBlockView = props => {\n  _s();\n  const {\n    data,\n    searchData,\n    mode = 'view',\n    variation\n  } = props;\n  const Layout = variation.view;\n  const dataListingBodyVariation = getListingBodyVariation(data).id;\n  const [selectedView, setSelectedView] = React.useState(dataListingBodyVariation);\n\n  // in the block edit you can change the used listing block variation,\n  // but it's cached here in the state. So we reset it.\n  React.useEffect(() => {\n    if (mode !== 'view') {\n      setSelectedView(dataListingBodyVariation);\n    }\n  }, [dataListingBodyVariation, mode]);\n  const root = useSelector(state => state.breadcrumbs.root);\n  const listingBodyData = applyDefaults(searchData, root);\n  const {\n    variations\n  } = config.blocks.blocksConfig.listing;\n  const listingBodyVariation = variations.find(_ref3 => {\n    let {\n      id\n    } = _ref3;\n    return id === selectedView;\n  });\n  return __jsx(\"div\", {\n    className: \"block search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, _extends({}, props, {\n    isEditMode: mode === 'edit',\n    selectedView: selectedView,\n    setSelectedView: setSelectedView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), __jsx(ListingBody, {\n    variation: _objectSpread(_objectSpread({}, data), listingBodyVariation),\n    data: listingBodyData,\n    path: props.path,\n    isEditMode: mode === 'edit',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  })));\n};\n_s(SearchBlockView, \"EfGisPAwqDF3R+rT10GX+XxRUro=\", false, function () {\n  return [useSelector];\n});\n_c = SearchBlockView;\nexport const SearchBlockViewComponent = compose(withBlockExtensions, Component => /*#__PURE__*/React.memo(Component, blockPropsAreChanged))(SearchBlockView);\nexport default compose(withQueryString, withSearch())(SearchBlockViewComponent);\nvar _c;\n$RefreshReg$(_c, \"SearchBlockView\");","map":{"version":3,"names":["React","ListingBody","withBlockExtensions","config","withSearch","withQueryString","compose","useSelector","getListingBodyVariation","data","variations","blocks","blocksConfig","listing","variation","listingBodyTemplate","find","id","isDefault","isfunc","obj","_filtered","Object","assign","keys","map","k","reject","blockPropsAreChanged","prevProps","nextProps","prev","next","applyDefaults","root","defaultQuery","i","o","v","sort_on","sort_order","query","length","SearchBlockView","props","searchData","mode","Layout","view","dataListingBodyVariation","selectedView","setSelectedView","useState","useEffect","state","breadcrumbs","listingBodyData","listingBodyVariation","path","SearchBlockViewComponent","Component","memo"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/SearchBlockView.jsx"],"sourcesContent":["import React from 'react';\n\nimport ListingBody from '@plone/volto/components/manage/Blocks/Listing/ListingBody';\nimport { withBlockExtensions } from '@plone/volto/helpers';\n\nimport config from '@plone/volto/registry';\n\nimport { withSearch, withQueryString } from './hocs';\nimport { compose } from 'redux';\nimport { useSelector } from 'react-redux';\nimport { isEqual, isFunction } from 'lodash';\n\nconst getListingBodyVariation = (data) => {\n  const { variations } = config.blocks.blocksConfig.listing;\n\n  let variation = data.listingBodyTemplate\n    ? variations.find(({ id }) => id === data.listingBodyTemplate)\n    : variations.find(({ isDefault }) => isDefault);\n\n  if (!variation) variation = variations[0];\n\n  return variation;\n};\n\nconst isfunc = (obj) => isFunction(obj) || typeof obj === 'function';\n\nconst _filtered = (obj) =>\n  Object.assign(\n    {},\n    ...Object.keys(obj).map((k) => {\n      const reject = k !== 'properties' && !isfunc(obj[k]);\n      return reject ? { [k]: obj[k] } : {};\n    }),\n  );\n\nconst blockPropsAreChanged = (prevProps, nextProps) => {\n  const prev = _filtered(prevProps);\n  const next = _filtered(nextProps);\n\n  return isEqual(prev, next);\n};\n\nconst applyDefaults = (data, root) => {\n  const defaultQuery = [\n    {\n      i: 'path',\n      o: 'plone.app.querystring.operation.string.absolutePath',\n      v: root || '/',\n    },\n  ];\n  return {\n    ...data,\n    sort_on: data?.sort_on || 'effective',\n    sort_order: data?.sort_order || 'descending',\n    query: data?.query?.length ? data.query : defaultQuery,\n  };\n};\n\nconst SearchBlockView = (props) => {\n  const { data, searchData, mode = 'view', variation } = props;\n\n  const Layout = variation.view;\n\n  const dataListingBodyVariation = getListingBodyVariation(data).id;\n  const [selectedView, setSelectedView] = React.useState(\n    dataListingBodyVariation,\n  );\n\n  // in the block edit you can change the used listing block variation,\n  // but it's cached here in the state. So we reset it.\n  React.useEffect(() => {\n    if (mode !== 'view') {\n      setSelectedView(dataListingBodyVariation);\n    }\n  }, [dataListingBodyVariation, mode]);\n\n  const root = useSelector((state) => state.breadcrumbs.root);\n  const listingBodyData = applyDefaults(searchData, root);\n\n  const { variations } = config.blocks.blocksConfig.listing;\n  const listingBodyVariation = variations.find(({ id }) => id === selectedView);\n\n  return (\n    <div className=\"block search\">\n      <Layout\n        {...props}\n        isEditMode={mode === 'edit'}\n        selectedView={selectedView}\n        setSelectedView={setSelectedView}\n      >\n        <ListingBody\n          variation={{ ...data, ...listingBodyVariation }}\n          data={listingBodyData}\n          path={props.path}\n          isEditMode={mode === 'edit'}\n        />\n      </Layout>\n    </div>\n  );\n};\n\nexport const SearchBlockViewComponent = compose(\n  withBlockExtensions,\n  (Component) => React.memo(Component, blockPropsAreChanged),\n)(SearchBlockView);\n\nexport default compose(withQueryString, withSearch())(SearchBlockViewComponent);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}