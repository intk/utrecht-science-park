{"ast":null,"code":"import _objectSpread from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _s = $RefreshSig$();\nimport config from '@plone/volto/registry';\nimport { defineMessages } from 'react-intl';\nimport { useIntl } from 'react-intl';\nconst messages = defineMessages({\n  field_label: {\n    \"id\": \"form_field_label\",\n    \"defaultMessage\": \"Label\"\n  },\n  field_description: {\n    \"id\": \"form_field_description\",\n    \"defaultMessage\": \"Description\"\n  },\n  field_required: {\n    \"id\": \"form_field_required\",\n    \"defaultMessage\": \"Required\"\n  },\n  field_type: {\n    \"id\": \"form_field_type\",\n    \"defaultMessage\": \"Field type\"\n  },\n  field_type_text: {\n    \"id\": \"form_field_type_text\",\n    \"defaultMessage\": \"Text\"\n  },\n  field_type_textarea: {\n    \"id\": \"form_field_type_textarea\",\n    \"defaultMessage\": \"Textarea\"\n  },\n  field_type_select: {\n    \"id\": \"form_field_type_select\",\n    \"defaultMessage\": \"List\"\n  },\n  field_type_single_choice: {\n    \"id\": \"form_field_type_single_choice\",\n    \"defaultMessage\": \"Single choice\"\n  },\n  field_type_multiple_choice: {\n    \"id\": \"form_field_type_multiple_choice\",\n    \"defaultMessage\": \"Multiple choice\"\n  },\n  field_type_checkbox: {\n    \"id\": \"form_field_type_checkbox\",\n    \"defaultMessage\": \"Checkbox\"\n  },\n  field_type_date: {\n    \"id\": \"form_field_type_date\",\n    \"defaultMessage\": \"Date\"\n  },\n  field_type_attachment: {\n    \"id\": \"form_field_type_attachment\",\n    \"defaultMessage\": \"Attachment\"\n  },\n  field_type_attachment_info_text: {\n    \"id\": \"form_field_type_attachment_info_text\",\n    \"defaultMessage\": \"Any attachments can be emailed, but will not be saved.\"\n  },\n  field_type_from: {\n    \"id\": \"form_field_type_from\",\n    \"defaultMessage\": \"E-mail\"\n  },\n  field_type_static_text: {\n    \"id\": \"form_field_type_static_text\",\n    \"defaultMessage\": \"Static text\"\n  }\n});\nexport default _s(props => {\n  var _config$blocks$blocks, _config$blocks$blocks2;\n  _s();\n  var intl = useIntl();\n  const baseFieldTypeChoices = [['text', intl.formatMessage(messages.field_type_text)], ['textarea', intl.formatMessage(messages.field_type_textarea)], ['select', intl.formatMessage(messages.field_type_select)], ['single_choice', intl.formatMessage(messages.field_type_single_choice)], ['multiple_choice', intl.formatMessage(messages.field_type_multiple_choice)], ['checkbox', intl.formatMessage(messages.field_type_checkbox)], ['date', intl.formatMessage(messages.field_type_date)], ['attachment', intl.formatMessage(messages.field_type_attachment)], ['from', intl.formatMessage(messages.field_type_from)], ['static_text', intl.formatMessage(messages.field_type_static_text)]];\n  var attachmentDescription = (props === null || props === void 0 ? void 0 : props.field_type) === 'attachment' ? {\n    description: intl.formatMessage(messages.field_type_attachment_info_text)\n  } : {};\n  var schemaExtender = config.blocks.blocksConfig.form.fieldTypeSchemaExtenders[props === null || props === void 0 ? void 0 : props.field_type];\n  const schemaExtenderValues = schemaExtender ? schemaExtender(intl) : {\n    properties: [],\n    fields: [],\n    required: []\n  };\n  return {\n    title: (props === null || props === void 0 ? void 0 : props.label) || '',\n    fieldsets: [{\n      id: 'default',\n      title: 'Default',\n      fields: ['label', 'description', 'field_type', ...schemaExtenderValues.fields, 'required']\n    }],\n    properties: _objectSpread({\n      label: {\n        title: intl.formatMessage(messages.field_label),\n        send_to_backend: true\n      },\n      description: {\n        title: intl.formatMessage(messages.field_description)\n      },\n      field_type: _objectSpread({\n        title: intl.formatMessage(messages.field_type),\n        type: 'array',\n        choices: [...baseFieldTypeChoices, ...((_config$blocks$blocks = (_config$blocks$blocks2 = config.blocks.blocksConfig.form.additionalFields) === null || _config$blocks$blocks2 === void 0 ? void 0 : _config$blocks$blocks2.map(fieldType => [fieldType.id, fieldType.label])) !== null && _config$blocks$blocks !== void 0 ? _config$blocks$blocks : [])]\n      }, attachmentDescription),\n      required: {\n        title: intl.formatMessage(messages.field_required),\n        type: 'boolean',\n        default: false\n      }\n    }, schemaExtenderValues.properties),\n    required: ['label', 'field_type', 'input_values', ...schemaExtenderValues.required]\n  };\n}, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n  return [useIntl];\n});","map":{"version":3,"names":["config","defineMessages","useIntl","messages","field_label","field_description","field_required","field_type","field_type_text","field_type_textarea","field_type_select","field_type_single_choice","field_type_multiple_choice","field_type_checkbox","field_type_date","field_type_attachment","field_type_attachment_info_text","field_type_from","field_type_static_text","props","intl","baseFieldTypeChoices","formatMessage","attachmentDescription","description","schemaExtender","blocks","blocksConfig","form","fieldTypeSchemaExtenders","schemaExtenderValues","properties","fields","required","title","label","fieldsets","id","send_to_backend","type","choices","additionalFields","map","fieldType","default"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/volto-form-block/src/fieldSchema.js"],"sourcesContent":["import config from '@plone/volto/registry';\nimport { defineMessages } from 'react-intl';\nimport { useIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  field_label: {\n    id: 'form_field_label',\n    defaultMessage: 'Label',\n  },\n  field_description: {\n    id: 'form_field_description',\n    defaultMessage: 'Description',\n  },\n  field_required: {\n    id: 'form_field_required',\n    defaultMessage: 'Required',\n  },\n  field_type: {\n    id: 'form_field_type',\n    defaultMessage: 'Field type',\n  },\n  field_type_text: {\n    id: 'form_field_type_text',\n    defaultMessage: 'Text',\n  },\n  field_type_textarea: {\n    id: 'form_field_type_textarea',\n    defaultMessage: 'Textarea',\n  },\n  field_type_select: {\n    id: 'form_field_type_select',\n    defaultMessage: 'List',\n  },\n  field_type_single_choice: {\n    id: 'form_field_type_single_choice',\n    defaultMessage: 'Single choice',\n  },\n  field_type_multiple_choice: {\n    id: 'form_field_type_multiple_choice',\n    defaultMessage: 'Multiple choice',\n  },\n  field_type_checkbox: {\n    id: 'form_field_type_checkbox',\n    defaultMessage: 'Checkbox',\n  },\n  field_type_date: {\n    id: 'form_field_type_date',\n    defaultMessage: 'Date',\n  },\n  field_type_attachment: {\n    id: 'form_field_type_attachment',\n    defaultMessage: 'Attachment',\n  },\n  field_type_attachment_info_text: {\n    id: 'form_field_type_attachment_info_text',\n    defaultMessage: 'Any attachments can be emailed, but will not be saved.',\n  },\n  field_type_from: {\n    id: 'form_field_type_from',\n    defaultMessage: 'E-mail',\n  },\n  field_type_static_text: {\n    id: 'form_field_type_static_text',\n    defaultMessage: 'Static text',\n  },\n});\n\nexport default (props) => {\n  var intl = useIntl();\n  const baseFieldTypeChoices = [\n    ['text', intl.formatMessage(messages.field_type_text)],\n    ['textarea', intl.formatMessage(messages.field_type_textarea)],\n    ['select', intl.formatMessage(messages.field_type_select)],\n    ['single_choice', intl.formatMessage(messages.field_type_single_choice)],\n    [\n      'multiple_choice',\n      intl.formatMessage(messages.field_type_multiple_choice),\n    ],\n    ['checkbox', intl.formatMessage(messages.field_type_checkbox)],\n    ['date', intl.formatMessage(messages.field_type_date)],\n    ['attachment', intl.formatMessage(messages.field_type_attachment)],\n    ['from', intl.formatMessage(messages.field_type_from)],\n    ['static_text', intl.formatMessage(messages.field_type_static_text)],\n  ];\n  var attachmentDescription =\n    props?.field_type === 'attachment'\n      ? {\n          description: intl.formatMessage(\n            messages.field_type_attachment_info_text,\n          ),\n        }\n      : {};\n\n  var schemaExtender =\n    config.blocks.blocksConfig.form.fieldTypeSchemaExtenders[props?.field_type];\n  const schemaExtenderValues = schemaExtender\n    ? schemaExtender(intl)\n    : { properties: [], fields: [], required: [] };\n  return {\n    title: props?.label || '',\n    fieldsets: [\n      {\n        id: 'default',\n        title: 'Default',\n        fields: [\n          'label',\n          'description',\n          'field_type',\n          ...schemaExtenderValues.fields,\n          'required',\n        ],\n      },\n    ],\n\n    properties: {\n      label: {\n        title: intl.formatMessage(messages.field_label),\n        send_to_backend: true,\n      },\n      description: {\n        title: intl.formatMessage(messages.field_description),\n      },\n      field_type: {\n        title: intl.formatMessage(messages.field_type),\n        type: 'array',\n        choices: [\n          ...baseFieldTypeChoices,\n          ...(config.blocks.blocksConfig.form.additionalFields?.map(\n            (fieldType) => [fieldType.id, fieldType.label],\n          ) ?? []),\n        ],\n        ...attachmentDescription,\n      },\n      required: {\n        title: intl.formatMessage(messages.field_required),\n        type: 'boolean',\n        default: false,\n      },\n      ...schemaExtenderValues.properties,\n    },\n    required: [\n      'label',\n      'field_type',\n      'input_values',\n      ...schemaExtenderValues.required,\n    ],\n  };\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"form_field_label","defaultMessage":"Label"},{"id":"form_field_description","defaultMessage":"Description"},{"id":"form_field_required","defaultMessage":"Required"},{"id":"form_field_type","defaultMessage":"Field type"},{"id":"form_field_type_text","defaultMessage":"Text"},{"id":"form_field_type_textarea","defaultMessage":"Textarea"},{"id":"form_field_type_select","defaultMessage":"List"},{"id":"form_field_type_single_choice","defaultMessage":"Single choice"},{"id":"form_field_type_multiple_choice","defaultMessage":"Multiple choice"},{"id":"form_field_type_checkbox","defaultMessage":"Checkbox"},{"id":"form_field_type_date","defaultMessage":"Date"},{"id":"form_field_type_attachment","defaultMessage":"Attachment"},{"id":"form_field_type_attachment_info_text","defaultMessage":"Any attachments can be emailed, but will not be saved."},{"id":"form_field_type_from","defaultMessage":"E-mail"},{"id":"form_field_type_static_text","defaultMessage":"Static text"}]}},"sourceType":"module","externalDependencies":[]}