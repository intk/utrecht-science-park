{"ast":null,"code":"import _union from \"lodash/union\";\nimport _flatten from \"lodash/flatten\";\nimport _compact from \"lodash/compact\";\nconst _excluded = [\"expand\"],\n  _excluded2 = [\"request\", \"type\", \"mode\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/**\n * Api middleware.\n * @module middleware/api\n */\n\nimport Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\nimport { matchPath } from 'react-router';\nimport qs from 'query-string';\nimport config from '@plone/volto/registry';\nimport { GET_CONTENT, LOGIN, RESET_APIERROR, SET_APIERROR } from '@plone/volto/constants/ActionTypes';\nimport { changeLanguage } from '@plone/volto/actions';\nimport { normalizeLanguageName, getCookieOptions } from '@plone/volto/helpers';\nlet socket = null;\n\n/**\n *\n * Add configured expanders to an api call for an action\n * Requirements:\n *\n * - It should add the expanders set in the config settings\n * - It should preserve any query if present\n * - It should preserve (and add) any expand parameter (if present) e.g. translations\n * - It should take use the correct codification for arrays in querystring (repeated parameter for each member of the array)\n *\n * @function addExpandersToPath\n * @param {string} path The url/path including the querystring\n * @param {*} type The action type\n * @returns {string} The url/path with the configured expanders added to the query string\n */\nexport function addExpandersToPath(path, type, isAnonymous) {\n  const {\n    settings\n  } = config;\n  const {\n    apiExpanders = []\n  } = settings;\n  const _qs$parseUrl = qs.parseUrl(path),\n    {\n      url,\n      query: {\n        expand\n      }\n    } = _qs$parseUrl,\n    query = _objectWithoutProperties(_qs$parseUrl.query, _excluded);\n  const expandersFromConfig = apiExpanders.filter(expand => matchPath(url, expand.match) && expand[type]).map(expand => expand[type]);\n  const expandMerge = _compact(_union([expand, ..._flatten(expandersFromConfig)])).filter(item => !(item === 'types' && isAnonymous)); // Remove types expander if isAnonymous\n\n  const stringifiedExpand = qs.stringify({\n    expand: expandMerge\n  }, {\n    arrayFormat: 'comma',\n    encode: false\n  });\n  const querystringFromConfig = apiExpanders.filter(expand => matchPath(url, expand.match) && expand[type]).reduce((acc, expand) => _objectSpread(_objectSpread({}, acc), expand === null || expand === void 0 ? void 0 : expand['querystring']), {});\n  const queryMerge = _objectSpread(_objectSpread({}, query), querystringFromConfig);\n  const stringifiedQuery = qs.stringify(queryMerge, {\n    encode: false\n  });\n  if (stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}&${stringifiedQuery}`;\n  } else if (!stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}`;\n  } else if (stringifiedQuery && !stringifiedExpand) {\n    return `${url}?${stringifiedQuery}`;\n  } else {\n    return url;\n  }\n}\n\n/**\n * Send a message on a websocket.\n * @function sendOnSocket\n * @param {Object} request Request object.\n * @returns {Promise} message is send\n */\nfunction sendOnSocket(request) {\n  return new Promise((resolve, reject) => {\n    switch (socket.readyState) {\n      case socket.CONNECTING:\n        socket.addEventListener('open', () => resolve(socket));\n        socket.addEventListener('error', reject);\n        break;\n      case socket.OPEN:\n        resolve(socket);\n        break;\n      default:\n        reject();\n        break;\n    }\n  }).then(() => {\n    socket.send(JSON.stringify(request));\n  });\n}\n\n/**\n * Api middleware.\n * @function\n * @param {Object} api Api object.\n * @returns {Promise} Action promise.\n */\nconst apiMiddlewareFactory = api => ({\n  dispatch,\n  getState\n}) => next => action => {\n  const {\n    settings\n  } = config;\n  const isAnonymous = !getState().userSession.token;\n  if (typeof action === 'function') {\n    return action(dispatch, getState);\n  }\n  const {\n      request,\n      type,\n      mode = 'parallel'\n    } = action,\n    rest = _objectWithoutProperties(action, _excluded2);\n  const {\n    subrequest\n  } = action; // We want subrequest remains in `...rest` above\n\n  let actionPromise;\n  if (!request) {\n    return next(action);\n  }\n  next(_objectSpread(_objectSpread({}, rest), {}, {\n    type: `${type}_PENDING`\n  }));\n  if (socket) {\n    actionPromise = Array.isArray(request) ? Promise.all(request.map(item => sendOnSocket(_objectSpread(_objectSpread({}, item), {}, {\n      path: addExpandersToPath(item.path, type, isAnonymous),\n      id: type\n    })))) : sendOnSocket(_objectSpread(_objectSpread({}, request), {}, {\n      path: addExpandersToPath(request.path, type, isAnonymous),\n      id: type\n    }));\n  } else {\n    actionPromise = Array.isArray(request) ? mode === 'serial' ? request.reduce((prevPromise, item) => {\n      return prevPromise.then(acc => {\n        return api[item.op](addExpandersToPath(item.path, type, isAnonymous), {\n          data: item.data,\n          type: item.type,\n          headers: item.headers,\n          params: request.params,\n          checkUrl: settings.actions_raising_api_errors.includes(action.type)\n        }).then(reqres => {\n          return [...acc, reqres];\n        });\n      });\n    }, Promise.resolve([])) : Promise.all(request.map(item => api[item.op](addExpandersToPath(item.path, type, isAnonymous), {\n      data: item.data,\n      type: item.type,\n      headers: item.headers,\n      params: request.params,\n      checkUrl: settings.actions_raising_api_errors.includes(action.type)\n    }))) : api[request.op](addExpandersToPath(request.path, type, isAnonymous), {\n      data: request.data,\n      type: request.type,\n      headers: request.headers,\n      params: request.params,\n      checkUrl: settings.actions_raising_api_errors.includes(action.type)\n    });\n    actionPromise.then(result => {\n      const {\n        settings\n      } = config;\n      if (getState().apierror.connectionRefused) {\n        next(_objectSpread(_objectSpread({}, rest), {}, {\n          type: RESET_APIERROR\n        }));\n      }\n      if (type === GET_CONTENT) {\n        var _result$language;\n        const lang = result === null || result === void 0 ? void 0 : (_result$language = result.language) === null || _result$language === void 0 ? void 0 : _result$language.token;\n        if (lang && getState().intl.language !== lang && !subrequest && config.settings.supportedLanguages.includes(lang)) {\n          const langFileName = normalizeLanguageName(lang);\n          import(\"../../../../../locales/\" + langFileName + '.json').then(locale => {\n            dispatch(changeLanguage(lang, locale.default));\n          });\n        }\n      }\n      if (type === LOGIN && settings.websockets) {\n        const cookies = new Cookies();\n        cookies.set('auth_token', result.token, getCookieOptions({\n          expires: new Date(jwtDecode(result.token).exp * 1000)\n        }));\n        api.get('/@wstoken').then(res => {\n          socket = new WebSocket(`${settings.apiPath.replace('http', 'ws')}/@ws?ws_token=${res.token}`);\n          socket.onmessage = message => {\n            const packet = JSON.parse(message.data);\n            if (packet.error) {\n              dispatch({\n                type: `${packet.id}_FAIL`,\n                error: packet.error\n              });\n            } else {\n              dispatch({\n                type: `${packet.id}_SUCCESS`,\n                result: JSON.parse(packet.data)\n              });\n            }\n          };\n        });\n      }\n      return next(_objectSpread(_objectSpread({}, rest), {}, {\n        result,\n        type: `${type}_SUCCESS`\n      }));\n    }, error => {\n      // Only SRR can set ECONNREFUSED\n      if (error.code === 'ECONNREFUSED') {\n        next(_objectSpread(_objectSpread({}, rest), {}, {\n          error,\n          statusCode: error.code,\n          connectionRefused: true,\n          type: SET_APIERROR\n        }));\n      }\n\n      // Response error is marked crossDomain if CORS error happen\n      else if (error.crossDomain) {\n        next(_objectSpread(_objectSpread({}, rest), {}, {\n          error,\n          statusCode: 'CORSERROR',\n          connectionRefused: false,\n          type: SET_APIERROR\n        }));\n      }\n\n      // Check for actions who can raise api errors\n      if (settings.actions_raising_api_errors.includes(action.type)) {\n        var _error$response, _error$response2;\n        // Gateway timeout\n        if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.statusCode) === 504) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.code,\n            connectionRefused: true,\n            type: SET_APIERROR\n          }));\n        }\n\n        // Redirect\n        else if ((error === null || error === void 0 ? void 0 : error.code) === 301) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.code,\n            connectionRefused: false,\n            type: SET_APIERROR\n          }));\n        }\n\n        // Redirect\n        else if ((error === null || error === void 0 ? void 0 : error.code) === 408) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.code,\n            connectionRefused: false,\n            type: SET_APIERROR\n          }));\n        }\n\n        // Unauthorized\n        else if ((error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusCode) === 401) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.response,\n            message: error.response.body.message,\n            connectionRefused: false,\n            type: SET_APIERROR\n          }));\n        }\n      }\n      return next(_objectSpread(_objectSpread({}, rest), {}, {\n        error,\n        type: `${type}_FAIL`\n      }));\n    });\n  }\n  return actionPromise;\n};\nexport default apiMiddlewareFactory;","map":{"version":3,"names":["Cookies","jwtDecode","matchPath","qs","config","GET_CONTENT","LOGIN","RESET_APIERROR","SET_APIERROR","changeLanguage","normalizeLanguageName","getCookieOptions","socket","addExpandersToPath","path","type","isAnonymous","settings","apiExpanders","parseUrl","url","query","expand","expandersFromConfig","filter","match","map","expandMerge","item","stringifiedExpand","stringify","arrayFormat","encode","querystringFromConfig","reduce","acc","queryMerge","stringifiedQuery","sendOnSocket","request","Promise","resolve","reject","readyState","CONNECTING","addEventListener","OPEN","then","send","JSON","apiMiddlewareFactory","api","dispatch","getState","next","action","userSession","token","mode","rest","subrequest","actionPromise","Array","isArray","all","id","prevPromise","op","data","headers","params","checkUrl","actions_raising_api_errors","includes","reqres","result","apierror","connectionRefused","lang","language","intl","supportedLanguages","langFileName","locale","default","websockets","cookies","set","expires","Date","exp","get","res","WebSocket","apiPath","replace","onmessage","message","packet","parse","error","code","statusCode","crossDomain","response","body"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/middleware/api.js"],"sourcesContent":["/**\n * Api middleware.\n * @module middleware/api\n */\n\nimport Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\nimport { compact, flatten, union } from 'lodash';\nimport { matchPath } from 'react-router';\nimport qs from 'query-string';\n\nimport config from '@plone/volto/registry';\n\nimport {\n  GET_CONTENT,\n  LOGIN,\n  RESET_APIERROR,\n  SET_APIERROR,\n} from '@plone/volto/constants/ActionTypes';\nimport { changeLanguage } from '@plone/volto/actions';\nimport { normalizeLanguageName, getCookieOptions } from '@plone/volto/helpers';\nlet socket = null;\n\n/**\n *\n * Add configured expanders to an api call for an action\n * Requirements:\n *\n * - It should add the expanders set in the config settings\n * - It should preserve any query if present\n * - It should preserve (and add) any expand parameter (if present) e.g. translations\n * - It should take use the correct codification for arrays in querystring (repeated parameter for each member of the array)\n *\n * @function addExpandersToPath\n * @param {string} path The url/path including the querystring\n * @param {*} type The action type\n * @returns {string} The url/path with the configured expanders added to the query string\n */\nexport function addExpandersToPath(path, type, isAnonymous) {\n  const { settings } = config;\n  const { apiExpanders = [] } = settings;\n\n  const {\n    url,\n    query: { expand, ...query },\n  } = qs.parseUrl(path);\n\n  const expandersFromConfig = apiExpanders\n    .filter((expand) => matchPath(url, expand.match) && expand[type])\n    .map((expand) => expand[type]);\n\n  const expandMerge = compact(\n    union([expand, ...flatten(expandersFromConfig)]),\n  ).filter((item) => !(item === 'types' && isAnonymous)); // Remove types expander if isAnonymous\n\n  const stringifiedExpand = qs.stringify(\n    { expand: expandMerge },\n    {\n      arrayFormat: 'comma',\n      encode: false,\n    },\n  );\n\n  const querystringFromConfig = apiExpanders\n    .filter((expand) => matchPath(url, expand.match) && expand[type])\n    .reduce((acc, expand) => ({ ...acc, ...expand?.['querystring'] }), {});\n\n  const queryMerge = { ...query, ...querystringFromConfig };\n\n  const stringifiedQuery = qs.stringify(queryMerge, {\n    encode: false,\n  });\n\n  if (stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}&${stringifiedQuery}`;\n  } else if (!stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}`;\n  } else if (stringifiedQuery && !stringifiedExpand) {\n    return `${url}?${stringifiedQuery}`;\n  } else {\n    return url;\n  }\n}\n\n/**\n * Send a message on a websocket.\n * @function sendOnSocket\n * @param {Object} request Request object.\n * @returns {Promise} message is send\n */\nfunction sendOnSocket(request) {\n  return new Promise((resolve, reject) => {\n    switch (socket.readyState) {\n      case socket.CONNECTING:\n        socket.addEventListener('open', () => resolve(socket));\n        socket.addEventListener('error', reject);\n        break;\n      case socket.OPEN:\n        resolve(socket);\n        break;\n      default:\n        reject();\n        break;\n    }\n  }).then(() => {\n    socket.send(JSON.stringify(request));\n  });\n}\n\n/**\n * Api middleware.\n * @function\n * @param {Object} api Api object.\n * @returns {Promise} Action promise.\n */\nconst apiMiddlewareFactory = (api) => ({ dispatch, getState }) => (next) => (\n  action,\n) => {\n  const { settings } = config;\n\n  const isAnonymous = !getState().userSession.token;\n\n  if (typeof action === 'function') {\n    return action(dispatch, getState);\n  }\n\n  const { request, type, mode = 'parallel', ...rest } = action;\n  const { subrequest } = action; // We want subrequest remains in `...rest` above\n\n  let actionPromise;\n\n  if (!request) {\n    return next(action);\n  }\n\n  next({ ...rest, type: `${type}_PENDING` });\n\n  if (socket) {\n    actionPromise = Array.isArray(request)\n      ? Promise.all(\n          request.map((item) =>\n            sendOnSocket({\n              ...item,\n              path: addExpandersToPath(item.path, type, isAnonymous),\n              id: type,\n            }),\n          ),\n        )\n      : sendOnSocket({\n          ...request,\n          path: addExpandersToPath(request.path, type, isAnonymous),\n          id: type,\n        });\n  } else {\n    actionPromise = Array.isArray(request)\n      ? mode === 'serial'\n        ? request.reduce((prevPromise, item) => {\n            return prevPromise.then((acc) => {\n              return api[item.op](\n                addExpandersToPath(item.path, type, isAnonymous),\n                {\n                  data: item.data,\n                  type: item.type,\n                  headers: item.headers,\n                  params: request.params,\n                  checkUrl: settings.actions_raising_api_errors.includes(\n                    action.type,\n                  ),\n                },\n              ).then((reqres) => {\n                return [...acc, reqres];\n              });\n            });\n          }, Promise.resolve([]))\n        : Promise.all(\n            request.map((item) =>\n              api[item.op](addExpandersToPath(item.path, type, isAnonymous), {\n                data: item.data,\n                type: item.type,\n                headers: item.headers,\n                params: request.params,\n                checkUrl: settings.actions_raising_api_errors.includes(\n                  action.type,\n                ),\n              }),\n            ),\n          )\n      : api[request.op](addExpandersToPath(request.path, type, isAnonymous), {\n          data: request.data,\n          type: request.type,\n          headers: request.headers,\n          params: request.params,\n          checkUrl: settings.actions_raising_api_errors.includes(action.type),\n        });\n    actionPromise.then(\n      (result) => {\n        const { settings } = config;\n        if (getState().apierror.connectionRefused) {\n          next({\n            ...rest,\n            type: RESET_APIERROR,\n          });\n        }\n        if (type === GET_CONTENT) {\n          const lang = result?.language?.token;\n          if (\n            lang &&\n            getState().intl.language !== lang &&\n            !subrequest &&\n            config.settings.supportedLanguages.includes(lang)\n          ) {\n            const langFileName = normalizeLanguageName(lang);\n            import('~/../locales/' + langFileName + '.json').then((locale) => {\n              dispatch(changeLanguage(lang, locale.default));\n            });\n          }\n        }\n        if (type === LOGIN && settings.websockets) {\n          const cookies = new Cookies();\n          cookies.set(\n            'auth_token',\n            result.token,\n            getCookieOptions({\n              expires: new Date(jwtDecode(result.token).exp * 1000),\n            }),\n          );\n          api.get('/@wstoken').then((res) => {\n            socket = new WebSocket(\n              `${settings.apiPath.replace('http', 'ws')}/@ws?ws_token=${\n                res.token\n              }`,\n            );\n            socket.onmessage = (message) => {\n              const packet = JSON.parse(message.data);\n              if (packet.error) {\n                dispatch({\n                  type: `${packet.id}_FAIL`,\n                  error: packet.error,\n                });\n              } else {\n                dispatch({\n                  type: `${packet.id}_SUCCESS`,\n                  result: JSON.parse(packet.data),\n                });\n              }\n            };\n          });\n        }\n        return next({ ...rest, result, type: `${type}_SUCCESS` });\n      },\n      (error) => {\n        // Only SRR can set ECONNREFUSED\n        if (error.code === 'ECONNREFUSED') {\n          next({\n            ...rest,\n            error,\n            statusCode: error.code,\n            connectionRefused: true,\n            type: SET_APIERROR,\n          });\n        }\n\n        // Response error is marked crossDomain if CORS error happen\n        else if (error.crossDomain) {\n          next({\n            ...rest,\n            error,\n            statusCode: 'CORSERROR',\n            connectionRefused: false,\n            type: SET_APIERROR,\n          });\n        }\n\n        // Check for actions who can raise api errors\n        if (settings.actions_raising_api_errors.includes(action.type)) {\n          // Gateway timeout\n          if (error?.response?.statusCode === 504) {\n            next({\n              ...rest,\n              error,\n              statusCode: error.code,\n              connectionRefused: true,\n              type: SET_APIERROR,\n            });\n          }\n\n          // Redirect\n          else if (error?.code === 301) {\n            next({\n              ...rest,\n              error,\n              statusCode: error.code,\n              connectionRefused: false,\n              type: SET_APIERROR,\n            });\n          }\n\n          // Redirect\n          else if (error?.code === 408) {\n            next({\n              ...rest,\n              error,\n              statusCode: error.code,\n              connectionRefused: false,\n              type: SET_APIERROR,\n            });\n          }\n\n          // Unauthorized\n          else if (error?.response?.statusCode === 401) {\n            next({\n              ...rest,\n              error,\n              statusCode: error.response,\n              message: error.response.body.message,\n              connectionRefused: false,\n              type: SET_APIERROR,\n            });\n          }\n        }\n        return next({ ...rest, error, type: `${type}_FAIL` });\n      },\n    );\n  }\n\n  return actionPromise;\n};\n\nexport default apiMiddlewareFactory;\n"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,OAAO,MAAM,kBAAkB;AACtC,OAAOC,SAAS,MAAM,YAAY;AAElC,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAOC,EAAE,MAAM,cAAc;AAE7B,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,SACEC,WAAW,EACXC,KAAK,EACLC,cAAc,EACdC,YAAY,QACP,oCAAoC;AAC3C,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,qBAAqB,EAAEC,gBAAgB,QAAQ,sBAAsB;AAC9E,IAAIC,MAAM,GAAG,IAAI;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkB,CAACC,IAAI,EAAEC,IAAI,EAAEC,WAAW,EAAE;EAC1D,MAAM;IAAEC;EAAS,CAAC,GAAGb,MAAM;EAC3B,MAAM;IAAEc,YAAY,GAAG;EAAG,CAAC,GAAGD,QAAQ;EAEtC,qBAGId,EAAE,CAACgB,QAAQ,CAACL,IAAI,CAAC;IAHf;MACJM,GAAG;MACHC,KAAK,EAAE;QAAEC;MAAiB;IAC5B,CAAC;IADqBD,KAAK,yCAAzBA,KAAK;EAGP,MAAME,mBAAmB,GAAGL,YAAY,CACrCM,MAAM,CAAEF,MAAM,IAAKpB,SAAS,CAACkB,GAAG,EAAEE,MAAM,CAACG,KAAK,CAAC,IAAIH,MAAM,CAACP,IAAI,CAAC,CAAC,CAChEW,GAAG,CAAEJ,MAAM,IAAKA,MAAM,CAACP,IAAI,CAAC,CAAC;EAEhC,MAAMY,WAAW,GAAG,SAClB,OAAM,CAACL,MAAM,EAAE,GAAG,SAAQC,mBAAmB,CAAC,CAAC,CAAC,CACjD,CAACC,MAAM,CAAEI,IAAI,IAAK,EAAEA,IAAI,KAAK,OAAO,IAAIZ,WAAW,CAAC,CAAC,CAAC,CAAC;;EAExD,MAAMa,iBAAiB,GAAG1B,EAAE,CAAC2B,SAAS,CACpC;IAAER,MAAM,EAAEK;EAAY,CAAC,EACvB;IACEI,WAAW,EAAE,OAAO;IACpBC,MAAM,EAAE;EACV,CAAC,CACF;EAED,MAAMC,qBAAqB,GAAGf,YAAY,CACvCM,MAAM,CAAEF,MAAM,IAAKpB,SAAS,CAACkB,GAAG,EAAEE,MAAM,CAACG,KAAK,CAAC,IAAIH,MAAM,CAACP,IAAI,CAAC,CAAC,CAChEmB,MAAM,CAAC,CAACC,GAAG,EAAEb,MAAM,qCAAWa,GAAG,GAAKb,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAG,aAAa,CAAC,CAAG,EAAE,CAAC,CAAC,CAAC;EAExE,MAAMc,UAAU,mCAAQf,KAAK,GAAKY,qBAAqB,CAAE;EAEzD,MAAMI,gBAAgB,GAAGlC,EAAE,CAAC2B,SAAS,CAACM,UAAU,EAAE;IAChDJ,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,IAAIK,gBAAgB,IAAIR,iBAAiB,EAAE;IACzC,OAAQ,GAAET,GAAI,IAAGS,iBAAkB,IAAGQ,gBAAiB,EAAC;EAC1D,CAAC,MAAM,IAAI,CAACA,gBAAgB,IAAIR,iBAAiB,EAAE;IACjD,OAAQ,GAAET,GAAI,IAAGS,iBAAkB,EAAC;EACtC,CAAC,MAAM,IAAIQ,gBAAgB,IAAI,CAACR,iBAAiB,EAAE;IACjD,OAAQ,GAAET,GAAI,IAAGiB,gBAAiB,EAAC;EACrC,CAAC,MAAM;IACL,OAAOjB,GAAG;EACZ;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkB,YAAY,CAACC,OAAO,EAAE;EAC7B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,QAAQ9B,MAAM,CAAC+B,UAAU;MACvB,KAAK/B,MAAM,CAACgC,UAAU;QACpBhC,MAAM,CAACiC,gBAAgB,CAAC,MAAM,EAAE,MAAMJ,OAAO,CAAC7B,MAAM,CAAC,CAAC;QACtDA,MAAM,CAACiC,gBAAgB,CAAC,OAAO,EAAEH,MAAM,CAAC;QACxC;MACF,KAAK9B,MAAM,CAACkC,IAAI;QACdL,OAAO,CAAC7B,MAAM,CAAC;QACf;MACF;QACE8B,MAAM,EAAE;QACR;IAAM;EAEZ,CAAC,CAAC,CAACK,IAAI,CAAC,MAAM;IACZnC,MAAM,CAACoC,IAAI,CAACC,IAAI,CAACnB,SAAS,CAACS,OAAO,CAAC,CAAC;EACtC,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMW,oBAAoB,GAAIC,GAAG,IAAK,CAAC;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAMC,IAAI,IACrEC,MAAM,IACH;EACH,MAAM;IAAEtC;EAAS,CAAC,GAAGb,MAAM;EAE3B,MAAMY,WAAW,GAAG,CAACqC,QAAQ,EAAE,CAACG,WAAW,CAACC,KAAK;EAEjD,IAAI,OAAOF,MAAM,KAAK,UAAU,EAAE;IAChC,OAAOA,MAAM,CAACH,QAAQ,EAAEC,QAAQ,CAAC;EACnC;EAEA,MAAM;MAAEd,OAAO;MAAExB,IAAI;MAAE2C,IAAI,GAAG;IAAoB,CAAC,GAAGH,MAAM;IAAfI,IAAI,4BAAKJ,MAAM;EAC5D,MAAM;IAAEK;EAAW,CAAC,GAAGL,MAAM,CAAC,CAAC;;EAE/B,IAAIM,aAAa;EAEjB,IAAI,CAACtB,OAAO,EAAE;IACZ,OAAOe,IAAI,CAACC,MAAM,CAAC;EACrB;EAEAD,IAAI,iCAAMK,IAAI;IAAE5C,IAAI,EAAG,GAAEA,IAAK;EAAS,GAAG;EAE1C,IAAIH,MAAM,EAAE;IACViD,aAAa,GAAGC,KAAK,CAACC,OAAO,CAACxB,OAAO,CAAC,GAClCC,OAAO,CAACwB,GAAG,CACTzB,OAAO,CAACb,GAAG,CAAEE,IAAI,IACfU,YAAY,iCACPV,IAAI;MACPd,IAAI,EAAED,kBAAkB,CAACe,IAAI,CAACd,IAAI,EAAEC,IAAI,EAAEC,WAAW,CAAC;MACtDiD,EAAE,EAAElD;IAAI,GACR,CACH,CACF,GACDuB,YAAY,iCACPC,OAAO;MACVzB,IAAI,EAAED,kBAAkB,CAAC0B,OAAO,CAACzB,IAAI,EAAEC,IAAI,EAAEC,WAAW,CAAC;MACzDiD,EAAE,EAAElD;IAAI,GACR;EACR,CAAC,MAAM;IACL8C,aAAa,GAAGC,KAAK,CAACC,OAAO,CAACxB,OAAO,CAAC,GAClCmB,IAAI,KAAK,QAAQ,GACfnB,OAAO,CAACL,MAAM,CAAC,CAACgC,WAAW,EAAEtC,IAAI,KAAK;MACpC,OAAOsC,WAAW,CAACnB,IAAI,CAAEZ,GAAG,IAAK;QAC/B,OAAOgB,GAAG,CAACvB,IAAI,CAACuC,EAAE,CAAC,CACjBtD,kBAAkB,CAACe,IAAI,CAACd,IAAI,EAAEC,IAAI,EAAEC,WAAW,CAAC,EAChD;UACEoD,IAAI,EAAExC,IAAI,CAACwC,IAAI;UACfrD,IAAI,EAAEa,IAAI,CAACb,IAAI;UACfsD,OAAO,EAAEzC,IAAI,CAACyC,OAAO;UACrBC,MAAM,EAAE/B,OAAO,CAAC+B,MAAM;UACtBC,QAAQ,EAAEtD,QAAQ,CAACuD,0BAA0B,CAACC,QAAQ,CACpDlB,MAAM,CAACxC,IAAI;QAEf,CAAC,CACF,CAACgC,IAAI,CAAE2B,MAAM,IAAK;UACjB,OAAO,CAAC,GAAGvC,GAAG,EAAEuC,MAAM,CAAC;QACzB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,EAAElC,OAAO,CAACC,OAAO,CAAC,EAAE,CAAC,CAAC,GACvBD,OAAO,CAACwB,GAAG,CACTzB,OAAO,CAACb,GAAG,CAAEE,IAAI,IACfuB,GAAG,CAACvB,IAAI,CAACuC,EAAE,CAAC,CAACtD,kBAAkB,CAACe,IAAI,CAACd,IAAI,EAAEC,IAAI,EAAEC,WAAW,CAAC,EAAE;MAC7DoD,IAAI,EAAExC,IAAI,CAACwC,IAAI;MACfrD,IAAI,EAAEa,IAAI,CAACb,IAAI;MACfsD,OAAO,EAAEzC,IAAI,CAACyC,OAAO;MACrBC,MAAM,EAAE/B,OAAO,CAAC+B,MAAM;MACtBC,QAAQ,EAAEtD,QAAQ,CAACuD,0BAA0B,CAACC,QAAQ,CACpDlB,MAAM,CAACxC,IAAI;IAEf,CAAC,CAAC,CACH,CACF,GACHoC,GAAG,CAACZ,OAAO,CAAC4B,EAAE,CAAC,CAACtD,kBAAkB,CAAC0B,OAAO,CAACzB,IAAI,EAAEC,IAAI,EAAEC,WAAW,CAAC,EAAE;MACnEoD,IAAI,EAAE7B,OAAO,CAAC6B,IAAI;MAClBrD,IAAI,EAAEwB,OAAO,CAACxB,IAAI;MAClBsD,OAAO,EAAE9B,OAAO,CAAC8B,OAAO;MACxBC,MAAM,EAAE/B,OAAO,CAAC+B,MAAM;MACtBC,QAAQ,EAAEtD,QAAQ,CAACuD,0BAA0B,CAACC,QAAQ,CAAClB,MAAM,CAACxC,IAAI;IACpE,CAAC,CAAC;IACN8C,aAAa,CAACd,IAAI,CACf4B,MAAM,IAAK;MACV,MAAM;QAAE1D;MAAS,CAAC,GAAGb,MAAM;MAC3B,IAAIiD,QAAQ,EAAE,CAACuB,QAAQ,CAACC,iBAAiB,EAAE;QACzCvB,IAAI,iCACCK,IAAI;UACP5C,IAAI,EAAER;QAAc,GACpB;MACJ;MACA,IAAIQ,IAAI,KAAKV,WAAW,EAAE;QAAA;QACxB,MAAMyE,IAAI,GAAGH,MAAM,aAANA,MAAM,2CAANA,MAAM,CAAEI,QAAQ,qDAAhB,iBAAkBtB,KAAK;QACpC,IACEqB,IAAI,IACJzB,QAAQ,EAAE,CAAC2B,IAAI,CAACD,QAAQ,KAAKD,IAAI,IACjC,CAAClB,UAAU,IACXxD,MAAM,CAACa,QAAQ,CAACgE,kBAAkB,CAACR,QAAQ,CAACK,IAAI,CAAC,EACjD;UACA,MAAMI,YAAY,GAAGxE,qBAAqB,CAACoE,IAAI,CAAC;UAChD,MAAM,CAAC,yBAAe,GAAGI,YAAY,GAAG,OAAO,CAAC,CAACnC,IAAI,CAAEoC,MAAM,IAAK;YAChE/B,QAAQ,CAAC3C,cAAc,CAACqE,IAAI,EAAEK,MAAM,CAACC,OAAO,CAAC,CAAC;UAChD,CAAC,CAAC;QACJ;MACF;MACA,IAAIrE,IAAI,KAAKT,KAAK,IAAIW,QAAQ,CAACoE,UAAU,EAAE;QACzC,MAAMC,OAAO,GAAG,IAAItF,OAAO,EAAE;QAC7BsF,OAAO,CAACC,GAAG,CACT,YAAY,EACZZ,MAAM,CAAClB,KAAK,EACZ9C,gBAAgB,CAAC;UACf6E,OAAO,EAAE,IAAIC,IAAI,CAACxF,SAAS,CAAC0E,MAAM,CAAClB,KAAK,CAAC,CAACiC,GAAG,GAAG,IAAI;QACtD,CAAC,CAAC,CACH;QACDvC,GAAG,CAACwC,GAAG,CAAC,WAAW,CAAC,CAAC5C,IAAI,CAAE6C,GAAG,IAAK;UACjChF,MAAM,GAAG,IAAIiF,SAAS,CACnB,GAAE5E,QAAQ,CAAC6E,OAAO,CAACC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAE,iBACxCH,GAAG,CAACnC,KACL,EAAC,CACH;UACD7C,MAAM,CAACoF,SAAS,GAAIC,OAAO,IAAK;YAC9B,MAAMC,MAAM,GAAGjD,IAAI,CAACkD,KAAK,CAACF,OAAO,CAAC7B,IAAI,CAAC;YACvC,IAAI8B,MAAM,CAACE,KAAK,EAAE;cAChBhD,QAAQ,CAAC;gBACPrC,IAAI,EAAG,GAAEmF,MAAM,CAACjC,EAAG,OAAM;gBACzBmC,KAAK,EAAEF,MAAM,CAACE;cAChB,CAAC,CAAC;YACJ,CAAC,MAAM;cACLhD,QAAQ,CAAC;gBACPrC,IAAI,EAAG,GAAEmF,MAAM,CAACjC,EAAG,UAAS;gBAC5BU,MAAM,EAAE1B,IAAI,CAACkD,KAAK,CAACD,MAAM,CAAC9B,IAAI;cAChC,CAAC,CAAC;YACJ;UACF,CAAC;QACH,CAAC,CAAC;MACJ;MACA,OAAOd,IAAI,iCAAMK,IAAI;QAAEgB,MAAM;QAAE5D,IAAI,EAAG,GAAEA,IAAK;MAAS,GAAG;IAC3D,CAAC,EACAqF,KAAK,IAAK;MACT;MACA,IAAIA,KAAK,CAACC,IAAI,KAAK,cAAc,EAAE;QACjC/C,IAAI,iCACCK,IAAI;UACPyC,KAAK;UACLE,UAAU,EAAEF,KAAK,CAACC,IAAI;UACtBxB,iBAAiB,EAAE,IAAI;UACvB9D,IAAI,EAAEP;QAAY,GAClB;MACJ;;MAEA;MAAA,KACK,IAAI4F,KAAK,CAACG,WAAW,EAAE;QAC1BjD,IAAI,iCACCK,IAAI;UACPyC,KAAK;UACLE,UAAU,EAAE,WAAW;UACvBzB,iBAAiB,EAAE,KAAK;UACxB9D,IAAI,EAAEP;QAAY,GAClB;MACJ;;MAEA;MACA,IAAIS,QAAQ,CAACuD,0BAA0B,CAACC,QAAQ,CAAClB,MAAM,CAACxC,IAAI,CAAC,EAAE;QAAA;QAC7D;QACA,IAAI,CAAAqF,KAAK,aAALA,KAAK,0CAALA,KAAK,CAAEI,QAAQ,oDAAf,gBAAiBF,UAAU,MAAK,GAAG,EAAE;UACvChD,IAAI,iCACCK,IAAI;YACPyC,KAAK;YACLE,UAAU,EAAEF,KAAK,CAACC,IAAI;YACtBxB,iBAAiB,EAAE,IAAI;YACvB9D,IAAI,EAAEP;UAAY,GAClB;QACJ;;QAEA;QAAA,KACK,IAAI,CAAA4F,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,IAAI,MAAK,GAAG,EAAE;UAC5B/C,IAAI,iCACCK,IAAI;YACPyC,KAAK;YACLE,UAAU,EAAEF,KAAK,CAACC,IAAI;YACtBxB,iBAAiB,EAAE,KAAK;YACxB9D,IAAI,EAAEP;UAAY,GAClB;QACJ;;QAEA;QAAA,KACK,IAAI,CAAA4F,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,IAAI,MAAK,GAAG,EAAE;UAC5B/C,IAAI,iCACCK,IAAI;YACPyC,KAAK;YACLE,UAAU,EAAEF,KAAK,CAACC,IAAI;YACtBxB,iBAAiB,EAAE,KAAK;YACxB9D,IAAI,EAAEP;UAAY,GAClB;QACJ;;QAEA;QAAA,KACK,IAAI,CAAA4F,KAAK,aAALA,KAAK,2CAALA,KAAK,CAAEI,QAAQ,qDAAf,iBAAiBF,UAAU,MAAK,GAAG,EAAE;UAC5ChD,IAAI,iCACCK,IAAI;YACPyC,KAAK;YACLE,UAAU,EAAEF,KAAK,CAACI,QAAQ;YAC1BP,OAAO,EAAEG,KAAK,CAACI,QAAQ,CAACC,IAAI,CAACR,OAAO;YACpCpB,iBAAiB,EAAE,KAAK;YACxB9D,IAAI,EAAEP;UAAY,GAClB;QACJ;MACF;MACA,OAAO8C,IAAI,iCAAMK,IAAI;QAAEyC,KAAK;QAAErF,IAAI,EAAG,GAAEA,IAAK;MAAM,GAAG;IACvD,CAAC,CACF;EACH;EAEA,OAAO8C,aAAa;AACtB,CAAC;AAED,eAAeX,oBAAoB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}