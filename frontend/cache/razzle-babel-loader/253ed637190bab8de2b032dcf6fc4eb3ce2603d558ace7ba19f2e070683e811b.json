{"ast":null,"code":"var _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/src/components/blocks/ImageCards/TitleCards.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { Image, Message } from 'semantic-ui-react';\nimport cx from 'classnames';\nimport { TitleCardsSchema } from './schema';\nimport { getScaleUrl, getPath } from './utils';\nimport { serializeNodes } from '@plone/volto-slate/editor/render';\nimport { ListingBlockHeader } from '@package/components';\nimport './less/title-cards.less';\nconst LinkWrapper = ({\n  link,\n  children,\n  title,\n  editable\n}) => {\n  return link && !editable ? __jsx(\"a\", {\n    href: link,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, children) : children;\n};\nconst Card = ({\n  card = {},\n  image_scale,\n  imageSize,\n  editable\n}) => {\n  const {\n    link,\n    title,\n    text\n  } = card;\n  return __jsx(LinkWrapper, {\n    link: link,\n    title: title,\n    i: true,\n    editable: editable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"title-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, title || 'null'), __jsx(\"div\", {\n    className: \"title-card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, text ? serializeNodes(text) : ''), __jsx(\"div\", {\n    className: \"title-card-image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, __jsx(Image, {\n    className: cx('bg-image', imageSize || 'small'),\n    src: getScaleUrl(getPath(card.attachedimage), image_scale || 'large'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }))));\n};\nconst TitleCards = props => {\n  const {\n    data = {},\n    editable = false\n  } = props;\n  const {\n    cards = []\n  } = data;\n  return !cards.length ? editable ? __jsx(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \"No cards\") : '' : __jsx(\"div\", {\n    className: \"title-cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, __jsx(ListingBlockHeader, {\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), cards.map((card, i) => __jsx(Card, {\n    key: i,\n    card: card,\n    imageSize: data.imageSize,\n    editable: editable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  })));\n};\nTitleCards.schemaExtender = (schema, data, intl) => {\n  const Custom = TitleCardsSchema({\n    data,\n    schema,\n    intl\n  });\n  schema.fieldsets[0].fields.splice(2, 0, 'linkHref');\n  schema.fieldsets[0].fields.splice(3, 0, 'linkTitle');\n  schema.fieldsets[0].fields.splice(3, 0, 'imageSize');\n\n  // if (!schema.properties.cards.schema.properties.imageSize) {\n  //   schema.properties.cards.schema.properties.imageSize = {\n  //     title: 'Image size',\n  //     choices: [\n  //       ['small', 'Small'],\n  //       ['bigger', 'Bigger'],\n  //     ],\n  //     default: 'small',\n  //   };\n  //   schema.properties.cards.schema.fieldsets[0].fields.push('imageSize');\n  // }\n\n  // console.log('schema', schema);\n\n  const out = _objectSpread(_objectSpread(_objectSpread({}, schema), Custom), {}, {\n    properties: _objectSpread(_objectSpread({}, schema.properties), Custom.properties),\n    fieldsets: [...schema.fieldsets, ...Custom.fieldsets]\n  });\n  return out;\n};\nexport default TitleCards;","map":{"version":3,"names":["Image","Message","cx","TitleCardsSchema","getScaleUrl","getPath","serializeNodes","ListingBlockHeader","LinkWrapper","link","children","title","editable","Card","card","image_scale","imageSize","text","attachedimage","TitleCards","props","data","cards","length","map","i","schemaExtender","schema","intl","Custom","fieldsets","fields","splice","out","properties"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/src/components/blocks/ImageCards/TitleCards.jsx"],"sourcesContent":["import { Image, Message } from 'semantic-ui-react';\nimport cx from 'classnames';\n\nimport { TitleCardsSchema } from './schema';\nimport { getScaleUrl, getPath } from './utils';\nimport { serializeNodes } from '@plone/volto-slate/editor/render';\nimport { ListingBlockHeader } from '@package/components';\n\nimport './less/title-cards.less';\n\nconst LinkWrapper = ({ link, children, title, editable }) => {\n  return link && !editable ? (\n    <a href={link} target=\"_blank\" rel=\"noreferrer\" title={title}>\n      {children}\n    </a>\n  ) : (\n    children\n  );\n};\n\nconst Card = ({ card = {}, image_scale, imageSize, editable }) => {\n  const { link, title, text } = card;\n\n  return (\n    <LinkWrapper link={link} title={title} i editable={editable}>\n      <div className=\"title-card\">\n        <h3>{title || 'null'}</h3>\n        <div className=\"title-card-text\">\n          {text ? serializeNodes(text) : ''}\n        </div>\n        <div className=\"title-card-image\">\n          <Image\n            className={cx('bg-image', imageSize || 'small')}\n            src={getScaleUrl(\n              getPath(card.attachedimage),\n              image_scale || 'large',\n            )}\n          />\n        </div>\n      </div>\n    </LinkWrapper>\n  );\n};\n\nconst TitleCards = (props) => {\n  const { data = {}, editable = false } = props;\n  const { cards = [] } = data;\n\n  return !cards.length ? (\n    editable ? (\n      <Message>No cards</Message>\n    ) : (\n      ''\n    )\n  ) : (\n    <div className=\"title-cards\">\n      <ListingBlockHeader data={data} />\n      {cards.map((card, i) => (\n        <Card\n          key={i}\n          card={card}\n          imageSize={data.imageSize}\n          editable={editable}\n        />\n      ))}\n    </div>\n  );\n};\n\nTitleCards.schemaExtender = (schema, data, intl) => {\n  const Custom = TitleCardsSchema({ data, schema, intl });\n\n  schema.fieldsets[0].fields.splice(2, 0, 'linkHref');\n  schema.fieldsets[0].fields.splice(3, 0, 'linkTitle');\n  schema.fieldsets[0].fields.splice(3, 0, 'imageSize');\n\n  // if (!schema.properties.cards.schema.properties.imageSize) {\n  //   schema.properties.cards.schema.properties.imageSize = {\n  //     title: 'Image size',\n  //     choices: [\n  //       ['small', 'Small'],\n  //       ['bigger', 'Bigger'],\n  //     ],\n  //     default: 'small',\n  //   };\n  //   schema.properties.cards.schema.fieldsets[0].fields.push('imageSize');\n  // }\n\n  // console.log('schema', schema);\n\n  const out = {\n    ...schema,\n    ...Custom,\n    properties: { ...schema.properties, ...Custom.properties },\n    fieldsets: [...schema.fieldsets, ...Custom.fieldsets],\n  };\n  return out;\n};\n\nexport default TitleCards;\n"],"mappings":";;;;;;;;AAAA,SAASA,KAAK,EAAEC,OAAO,QAAQ,mBAAmB;AAClD,OAAOC,EAAE,MAAM,YAAY;AAE3B,SAASC,gBAAgB,QAAQ,UAAU;AAC3C,SAASC,WAAW,EAAEC,OAAO,QAAQ,SAAS;AAC9C,SAASC,cAAc,QAAQ,kCAAkC;AACjE,SAASC,kBAAkB,QAAQ,qBAAqB;AAExD,OAAO,yBAAyB;AAEhC,MAAMC,WAAW,GAAG,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EAC3D,OAAOH,IAAI,IAAI,CAACG,QAAQ,GACtB;IAAG,IAAI,EAAEH,IAAK;IAAC,MAAM,EAAC,QAAQ;IAAC,GAAG,EAAC,YAAY;IAAC,KAAK,EAAEE,KAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC1DD,QAAQ,CACP,GAEJA,QACD;AACH,CAAC;AAED,MAAMG,IAAI,GAAG,CAAC;EAAEC,IAAI,GAAG,CAAC,CAAC;EAAEC,WAAW;EAAEC,SAAS;EAAEJ;AAAS,CAAC,KAAK;EAChE,MAAM;IAAEH,IAAI;IAAEE,KAAK;IAAEM;EAAK,CAAC,GAAGH,IAAI;EAElC,OACE,MAAC,WAAW;IAAC,IAAI,EAAEL,IAAK;IAAC,KAAK,EAAEE,KAAM;IAAC,CAAC;IAAC,QAAQ,EAAEC,QAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC1D;IAAK,SAAS,EAAC,YAAY;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACzB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAKD,KAAK,IAAI,MAAM,CAAM,EAC1B;IAAK,SAAS,EAAC,iBAAiB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC7BM,IAAI,GAAGX,cAAc,CAACW,IAAI,CAAC,GAAG,EAAE,CAC7B,EACN;IAAK,SAAS,EAAC,kBAAkB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC/B,MAAC,KAAK;IACJ,SAAS,EAAEf,EAAE,CAAC,UAAU,EAAEc,SAAS,IAAI,OAAO,CAAE;IAChD,GAAG,EAAEZ,WAAW,CACdC,OAAO,CAACS,IAAI,CAACI,aAAa,CAAC,EAC3BH,WAAW,IAAI,OAAO,CACtB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACF,CACE,CACF,CACM;AAElB,CAAC;AAED,MAAMI,UAAU,GAAIC,KAAK,IAAK;EAC5B,MAAM;IAAEC,IAAI,GAAG,CAAC,CAAC;IAAET,QAAQ,GAAG;EAAM,CAAC,GAAGQ,KAAK;EAC7C,MAAM;IAAEE,KAAK,GAAG;EAAG,CAAC,GAAGD,IAAI;EAE3B,OAAO,CAACC,KAAK,CAACC,MAAM,GAClBX,QAAQ,GACN,MAAC,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAC,UAAQ,CAAU,GAE3B,EACD,GAED;IAAK,SAAS,EAAC,aAAa;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC1B,MAAC,kBAAkB;IAAC,IAAI,EAAES,IAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,EACjCC,KAAK,CAACE,GAAG,CAAC,CAACV,IAAI,EAAEW,CAAC,KACjB,MAAC,IAAI;IACH,GAAG,EAAEA,CAAE;IACP,IAAI,EAAEX,IAAK;IACX,SAAS,EAAEO,IAAI,CAACL,SAAU;IAC1B,QAAQ,EAAEJ,QAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAEtB,CAAC,CAEL;AACH,CAAC;AAEDO,UAAU,CAACO,cAAc,GAAG,CAACC,MAAM,EAAEN,IAAI,EAAEO,IAAI,KAAK;EAClD,MAAMC,MAAM,GAAG1B,gBAAgB,CAAC;IAAEkB,IAAI;IAAEM,MAAM;IAAEC;EAAK,CAAC,CAAC;EAEvDD,MAAM,CAACG,SAAS,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,UAAU,CAAC;EACnDL,MAAM,CAACG,SAAS,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC;EACpDL,MAAM,CAACG,SAAS,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC;;EAEpD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA,MAAMC,GAAG,iDACJN,MAAM,GACNE,MAAM;IACTK,UAAU,kCAAOP,MAAM,CAACO,UAAU,GAAKL,MAAM,CAACK,UAAU,CAAE;IAC1DJ,SAAS,EAAE,CAAC,GAAGH,MAAM,CAACG,SAAS,EAAE,GAAGD,MAAM,CAACC,SAAS;EAAC,EACtD;EACD,OAAOG,GAAG;AACZ,CAAC;AAED,eAAed,UAAU"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}