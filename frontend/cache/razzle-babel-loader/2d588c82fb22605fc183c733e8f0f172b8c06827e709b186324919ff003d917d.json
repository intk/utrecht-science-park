{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/src/customizations/components/theme/View/RenderBlocks.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { getBaseUrl, applyBlockDefaults } from '@plone/volto/helpers';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getBlocksFieldname, getBlocksLayoutFieldname, hasBlocksData } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nconst messages = defineMessages({\n  unknownBlock: {\n    \"id\": \"Unknown Block\",\n    \"defaultMessage\": \"Unknown Block {block}\"\n  }\n});\nconst RenderBlocks = props => {\n  const {\n    location,\n    intl,\n    content,\n    metadata\n  } = props;\n  const blocksFieldname = getBlocksFieldname(content);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n  const blocksConfig = props.blocksConfig || config.blocks.blocksConfig;\n  const CustomTag = props.as || React.Fragment;\n  return hasBlocksData(content) ? __jsx(CustomTag, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, _map(content[blocksLayoutFieldname].items, block => {\n    var _blocksConfig$content, _content$blocksFieldn, _content$blocksFieldn2, _content$blocksFieldn3, _content$blocksFieldn4;\n    const Block = (_blocksConfig$content = blocksConfig[(_content$blocksFieldn = content[blocksFieldname]) === null || _content$blocksFieldn === void 0 ? void 0 : (_content$blocksFieldn2 = _content$blocksFieldn[block]) === null || _content$blocksFieldn2 === void 0 ? void 0 : _content$blocksFieldn2['@type']]) === null || _blocksConfig$content === void 0 ? void 0 : _blocksConfig$content.view;\n    const blockData = applyBlockDefaults({\n      data: content[blocksFieldname][block],\n      intl,\n      metadata,\n      properties: content\n    });\n    return Block ? __jsx(Block, {\n      key: block,\n      id: block,\n      metadata: metadata,\n      properties: content,\n      data: blockData,\n      path: getBaseUrl((location === null || location === void 0 ? void 0 : location.pathname) || ''),\n      blocksConfig: blocksConfig,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }) : __jsx(\"div\", {\n      key: block,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, intl.formatMessage(messages.unknownBlock, {\n      block: (_content$blocksFieldn3 = content[blocksFieldname]) === null || _content$blocksFieldn3 === void 0 ? void 0 : (_content$blocksFieldn4 = _content$blocksFieldn3[block]) === null || _content$blocksFieldn4 === void 0 ? void 0 : _content$blocksFieldn4['@type']\n    }));\n  })) : '';\n};\nexport default injectIntl(RenderBlocks);","map":{"version":3,"names":["React","getBaseUrl","applyBlockDefaults","defineMessages","injectIntl","getBlocksFieldname","getBlocksLayoutFieldname","hasBlocksData","config","messages","unknownBlock","RenderBlocks","props","location","intl","content","metadata","blocksFieldname","blocksLayoutFieldname","blocksConfig","blocks","CustomTag","as","Fragment","items","block","Block","view","blockData","data","properties","pathname","formatMessage"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/src/customizations/components/theme/View/RenderBlocks.jsx"],"sourcesContent":["import React from 'react';\nimport { getBaseUrl, applyBlockDefaults } from '@plone/volto/helpers';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { map } from 'lodash';\nimport {\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  hasBlocksData,\n} from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  unknownBlock: {\n    id: 'Unknown Block',\n    defaultMessage: 'Unknown Block {block}',\n  },\n});\n\nconst RenderBlocks = (props) => {\n  const { location, intl, content, metadata } = props;\n  const blocksFieldname = getBlocksFieldname(content);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n  const blocksConfig = props.blocksConfig || config.blocks.blocksConfig;\n  const CustomTag = props.as || React.Fragment;\n\n  return hasBlocksData(content) ? (\n    <CustomTag>\n      {map(content[blocksLayoutFieldname].items, (block) => {\n        const Block =\n          blocksConfig[content[blocksFieldname]?.[block]?.['@type']]?.view;\n\n        const blockData = applyBlockDefaults({\n          data: content[blocksFieldname][block],\n          intl,\n          metadata,\n          properties: content,\n        });\n\n        return Block ? (\n          <Block\n            key={block}\n            id={block}\n            metadata={metadata}\n            properties={content}\n            data={blockData}\n            path={getBaseUrl(location?.pathname || '')}\n            blocksConfig={blocksConfig}\n          />\n        ) : (\n          <div key={block}>\n            {intl.formatMessage(messages.unknownBlock, {\n              block: content[blocksFieldname]?.[block]?.['@type'],\n            })}\n          </div>\n        );\n      })}\n    </CustomTag>\n  ) : (\n    ''\n  );\n};\n\nexport default injectIntl(RenderBlocks);\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,EAAEC,kBAAkB,QAAQ,sBAAsB;AACrE,SAASC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AAEvD,SACEC,kBAAkB,EAClBC,wBAAwB,EACxBC,aAAa,QACR,sBAAsB;AAC7B,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,MAAMC,QAAQ,GAAGN,cAAc,CAAC;EAC9BO,YAAY;IAAA;IAAA;EAAA;AAId,CAAC,CAAC;AAEF,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAC9B,MAAM;IAAEC,QAAQ;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAS,CAAC,GAAGJ,KAAK;EACnD,MAAMK,eAAe,GAAGZ,kBAAkB,CAACU,OAAO,CAAC;EACnD,MAAMG,qBAAqB,GAAGZ,wBAAwB,CAACS,OAAO,CAAC;EAC/D,MAAMI,YAAY,GAAGP,KAAK,CAACO,YAAY,IAAIX,MAAM,CAACY,MAAM,CAACD,YAAY;EACrE,MAAME,SAAS,GAAGT,KAAK,CAACU,EAAE,IAAItB,KAAK,CAACuB,QAAQ;EAE5C,OAAOhB,aAAa,CAACQ,OAAO,CAAC,GAC3B,MAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACP,KAAIA,OAAO,CAACG,qBAAqB,CAAC,CAACM,KAAK,EAAGC,KAAK,IAAK;IAAA;IACpD,MAAMC,KAAK,4BACTP,YAAY,0BAACJ,OAAO,CAACE,eAAe,CAAC,oFAAxB,sBAA2BQ,KAAK,CAAC,2DAAjC,uBAAoC,OAAO,CAAC,CAAC,0DAA1D,sBAA4DE,IAAI;IAElE,MAAMC,SAAS,GAAG1B,kBAAkB,CAAC;MACnC2B,IAAI,EAAEd,OAAO,CAACE,eAAe,CAAC,CAACQ,KAAK,CAAC;MACrCX,IAAI;MACJE,QAAQ;MACRc,UAAU,EAAEf;IACd,CAAC,CAAC;IAEF,OAAOW,KAAK,GACV,MAAC,KAAK;MACJ,GAAG,EAAED,KAAM;MACX,EAAE,EAAEA,KAAM;MACV,QAAQ,EAAET,QAAS;MACnB,UAAU,EAAED,OAAQ;MACpB,IAAI,EAAEa,SAAU;MAChB,IAAI,EAAE3B,UAAU,CAAC,CAAAY,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEkB,QAAQ,KAAI,EAAE,CAAE;MAC3C,YAAY,EAAEZ,YAAa;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAC3B,GAEF;MAAK,GAAG,EAAEM,KAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACbX,IAAI,CAACkB,aAAa,CAACvB,QAAQ,CAACC,YAAY,EAAE;MACzCe,KAAK,4BAAEV,OAAO,CAACE,eAAe,CAAC,qFAAxB,uBAA2BQ,KAAK,CAAC,2DAAjC,uBAAoC,OAAO;IACpD,CAAC,CAAC,CAEL;EACH,CAAC,CAAC,CACQ,GAEZ,EACD;AACH,CAAC;AAED,eAAerB,UAAU,CAACO,YAAY,CAAC"},"metadata":{"react-intl":{"messages":[{"id":"Unknown Block","defaultMessage":"Unknown Block {block}"}]}},"sourceType":"module","externalDependencies":[]}