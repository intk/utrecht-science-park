{"ast":null,"code":"import _extends from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectWithoutProperties from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"condition\", \"to\", \"item\"];\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/ConditionalLink/ConditionalLink.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { UniversalLink } from '@plone/volto/components';\nimport PropTypes from 'prop-types';\nconst ConditionalLink = _ref => {\n  let {\n      condition,\n      to,\n      item\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  if (condition) {\n    return __jsx(UniversalLink, _extends({\n      href: to,\n      item: item\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 7\n      }\n    }), props.children);\n  } else {\n    return props.children;\n  }\n};\n_c = ConditionalLink;\nConditionalLink.propTypes = {\n  condition: PropTypes.bool,\n  to: PropTypes.string,\n  item: PropTypes.shape({\n    '@id': PropTypes.string,\n    remoteUrl: PropTypes.string //of plone @type 'Link'\n  }),\n\n  children: PropTypes.node\n};\nexport default ConditionalLink;\nvar _c;\n$RefreshReg$(_c, \"ConditionalLink\");","map":{"version":3,"names":["React","UniversalLink","PropTypes","ConditionalLink","condition","to","item","props","children","propTypes","bool","string","shape","remoteUrl","node"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/ConditionalLink/ConditionalLink.jsx"],"sourcesContent":["import React from 'react';\nimport { UniversalLink } from '@plone/volto/components';\nimport PropTypes from 'prop-types';\n\nconst ConditionalLink = ({ condition, to, item, ...props }) => {\n  if (condition) {\n    return (\n      <UniversalLink href={to} item={item} {...props}>\n        {props.children}\n      </UniversalLink>\n    );\n  } else {\n    return props.children;\n  }\n};\n\nConditionalLink.propTypes = {\n  condition: PropTypes.bool,\n  to: PropTypes.string,\n  item: PropTypes.shape({\n    '@id': PropTypes.string,\n    remoteUrl: PropTypes.string, //of plone @type 'Link'\n  }),\n  children: PropTypes.node,\n};\n\nexport default ConditionalLink;\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,QAAQ,yBAAyB;AACvD,OAAOC,SAAS,MAAM,YAAY;AAElC,MAAMC,eAAe,GAAG,QAAuC;EAAA,IAAtC;MAAEC,SAAS;MAAEC,EAAE;MAAEC;IAAe,CAAC;IAAPC,KAAK;EACtD,IAAIH,SAAS,EAAE;IACb,OACE,MAAC,aAAa;MAAC,IAAI,EAAEC,EAAG;MAAC,IAAI,EAAEC;IAAK,GAAKC,KAAK;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,IAC3CA,KAAK,CAACC,QAAQ,CACD;EAEpB,CAAC,MAAM;IACL,OAAOD,KAAK,CAACC,QAAQ;EACvB;AACF,CAAC;AAAC,KAVIL,eAAe;AAYrBA,eAAe,CAACM,SAAS,GAAG;EAC1BL,SAAS,EAAEF,SAAS,CAACQ,IAAI;EACzBL,EAAE,EAAEH,SAAS,CAACS,MAAM;EACpBL,IAAI,EAAEJ,SAAS,CAACU,KAAK,CAAC;IACpB,KAAK,EAAEV,SAAS,CAACS,MAAM;IACvBE,SAAS,EAAEX,SAAS,CAACS,MAAM,CAAE;EAC/B,CAAC,CAAC;;EACFH,QAAQ,EAAEN,SAAS,CAACY;AACtB,CAAC;AAED,eAAeX,eAAe;AAAC;AAAA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}