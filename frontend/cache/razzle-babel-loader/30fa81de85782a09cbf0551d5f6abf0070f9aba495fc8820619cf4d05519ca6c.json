{"ast":null,"code":"var _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/packages/volto-slate/src/editor/ui/InlineToolbar.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react'; // , useState\nimport SlateToolbar from './SlateToolbar';\nimport SlateContextToolbar from './SlateContextToolbar';\nimport config from '@plone/volto/registry';\nimport { hasRangeSelection } from '@plone/volto-slate/utils';\nimport { ReactEditor } from 'slate-react';\nimport cx from 'classnames';\n\n/**\n * The main Slate toolbar. All the others are just wrappers, UI or used here\n */\nconst InlineToolbar = props => {\n  _s();\n  const {\n    editor,\n    className,\n    showExpandedToolbar,\n    setShowExpandedToolbar\n  } = props;\n  const slate = props.slateSettings || config.settings.slate;\n  const [showMainToolbar, setShowMainToolbar] = React.useState(!!(editor.selection && hasRangeSelection(editor)));\n  React.useEffect(() => {\n    let el;\n    try {\n      el = ReactEditor.toDOMNode(editor, editor);\n    } catch {\n      return;\n    }\n    const toggleToolbar = () => {\n      const selection = window.getSelection();\n      const {\n        activeElement\n      } = window.document;\n      if (activeElement !== el) return;\n      if (!selection.isCollapsed && !showMainToolbar) {\n        setShowMainToolbar(true);\n      } else if (selection.isCollapsed && showMainToolbar) {\n        setShowMainToolbar(false);\n      }\n    };\n    window.document.addEventListener('selectionchange', toggleToolbar);\n    return () => document.removeEventListener('selectionchange', toggleToolbar);\n  }, [editor, showMainToolbar]);\n  const showContextToolbar = slate.contextToolbarButtons.map(plug => plug(editor)).filter(c => !!c).length > 0;\n  return __jsx(React.Fragment, null, __jsx(SlateToolbar, {\n    className: cx(className, {\n      upper: showContextToolbar\n    }),\n    selected: true,\n    enableExpando: slate.enableExpandedToolbar,\n    showExpandedToolbar: showExpandedToolbar,\n    setShowExpandedToolbar: setShowExpandedToolbar,\n    show: showMainToolbar,\n    slateSettings: slate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), __jsx(SlateContextToolbar, {\n    editor: editor,\n    plugins: slate.contextToolbarButtons,\n    show: showContextToolbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }));\n};\n_s(InlineToolbar, \"fHocp6RQevJwAAYtrZzbVuwZFVU=\");\n_c = InlineToolbar;\nexport default InlineToolbar;\nvar _c;\n$RefreshReg$(_c, \"InlineToolbar\");","map":{"version":3,"names":["React","SlateToolbar","SlateContextToolbar","config","hasRangeSelection","ReactEditor","cx","InlineToolbar","props","editor","className","showExpandedToolbar","setShowExpandedToolbar","slate","slateSettings","settings","showMainToolbar","setShowMainToolbar","useState","selection","useEffect","el","toDOMNode","toggleToolbar","window","getSelection","activeElement","document","isCollapsed","addEventListener","removeEventListener","showContextToolbar","contextToolbarButtons","map","plug","filter","c","length","upper","enableExpandedToolbar"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/packages/volto-slate/src/editor/ui/InlineToolbar.jsx"],"sourcesContent":["import React from 'react'; // , useState\nimport SlateToolbar from './SlateToolbar';\nimport SlateContextToolbar from './SlateContextToolbar';\nimport config from '@plone/volto/registry';\nimport { hasRangeSelection } from '@plone/volto-slate/utils';\nimport { ReactEditor } from 'slate-react';\nimport cx from 'classnames';\n\n/**\n * The main Slate toolbar. All the others are just wrappers, UI or used here\n */\nconst InlineToolbar = (props) => {\n  const {\n    editor,\n    className,\n    showExpandedToolbar,\n    setShowExpandedToolbar,\n  } = props;\n\n  const slate = props.slateSettings || config.settings.slate;\n\n  const [showMainToolbar, setShowMainToolbar] = React.useState(\n    !!(editor.selection && hasRangeSelection(editor)),\n  );\n\n  React.useEffect(() => {\n    let el;\n    try {\n      el = ReactEditor.toDOMNode(editor, editor);\n    } catch {\n      return;\n    }\n    const toggleToolbar = () => {\n      const selection = window.getSelection();\n      const { activeElement } = window.document;\n      if (activeElement !== el) return;\n      if (!selection.isCollapsed && !showMainToolbar) {\n        setShowMainToolbar(true);\n      } else if (selection.isCollapsed && showMainToolbar) {\n        setShowMainToolbar(false);\n      }\n    };\n    window.document.addEventListener('selectionchange', toggleToolbar);\n    return () => document.removeEventListener('selectionchange', toggleToolbar);\n  }, [editor, showMainToolbar]);\n\n  const showContextToolbar =\n    slate.contextToolbarButtons.map((plug) => plug(editor)).filter((c) => !!c)\n      .length > 0;\n\n  return (\n    <>\n      <SlateToolbar\n        className={cx(className, {\n          upper: showContextToolbar,\n        })}\n        selected={true}\n        enableExpando={slate.enableExpandedToolbar}\n        showExpandedToolbar={showExpandedToolbar}\n        setShowExpandedToolbar={setShowExpandedToolbar}\n        show={showMainToolbar}\n        slateSettings={slate}\n      />\n      <SlateContextToolbar\n        editor={editor}\n        plugins={slate.contextToolbarButtons}\n        show={showContextToolbar}\n      />\n    </>\n  );\n};\n\nexport default InlineToolbar;\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,EAAE,MAAM,YAAY;;AAE3B;AACA;AACA;AACA,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAAA;EAC/B,MAAM;IACJC,MAAM;IACNC,SAAS;IACTC,mBAAmB;IACnBC;EACF,CAAC,GAAGJ,KAAK;EAET,MAAMK,KAAK,GAAGL,KAAK,CAACM,aAAa,IAAIX,MAAM,CAACY,QAAQ,CAACF,KAAK;EAE1D,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,KAAK,CAACkB,QAAQ,CAC1D,CAAC,EAAET,MAAM,CAACU,SAAS,IAAIf,iBAAiB,CAACK,MAAM,CAAC,CAAC,CAClD;EAEDT,KAAK,CAACoB,SAAS,CAAC,MAAM;IACpB,IAAIC,EAAE;IACN,IAAI;MACFA,EAAE,GAAGhB,WAAW,CAACiB,SAAS,CAACb,MAAM,EAAEA,MAAM,CAAC;IAC5C,CAAC,CAAC,MAAM;MACN;IACF;IACA,MAAMc,aAAa,GAAG,MAAM;MAC1B,MAAMJ,SAAS,GAAGK,MAAM,CAACC,YAAY,EAAE;MACvC,MAAM;QAAEC;MAAc,CAAC,GAAGF,MAAM,CAACG,QAAQ;MACzC,IAAID,aAAa,KAAKL,EAAE,EAAE;MAC1B,IAAI,CAACF,SAAS,CAACS,WAAW,IAAI,CAACZ,eAAe,EAAE;QAC9CC,kBAAkB,CAAC,IAAI,CAAC;MAC1B,CAAC,MAAM,IAAIE,SAAS,CAACS,WAAW,IAAIZ,eAAe,EAAE;QACnDC,kBAAkB,CAAC,KAAK,CAAC;MAC3B;IACF,CAAC;IACDO,MAAM,CAACG,QAAQ,CAACE,gBAAgB,CAAC,iBAAiB,EAAEN,aAAa,CAAC;IAClE,OAAO,MAAMI,QAAQ,CAACG,mBAAmB,CAAC,iBAAiB,EAAEP,aAAa,CAAC;EAC7E,CAAC,EAAE,CAACd,MAAM,EAAEO,eAAe,CAAC,CAAC;EAE7B,MAAMe,kBAAkB,GACtBlB,KAAK,CAACmB,qBAAqB,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACzB,MAAM,CAAC,CAAC,CAAC0B,MAAM,CAAEC,CAAC,IAAK,CAAC,CAACA,CAAC,CAAC,CACvEC,MAAM,GAAG,CAAC;EAEf,OACE,4BACE,MAAC,YAAY;IACX,SAAS,EAAE/B,EAAE,CAACI,SAAS,EAAE;MACvB4B,KAAK,EAAEP;IACT,CAAC,CAAE;IACH,QAAQ,EAAE,IAAK;IACf,aAAa,EAAElB,KAAK,CAAC0B,qBAAsB;IAC3C,mBAAmB,EAAE5B,mBAAoB;IACzC,sBAAsB,EAAEC,sBAAuB;IAC/C,IAAI,EAAEI,eAAgB;IACtB,aAAa,EAAEH,KAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACrB,EACF,MAAC,mBAAmB;IAClB,MAAM,EAAEJ,MAAO;IACf,OAAO,EAAEI,KAAK,CAACmB,qBAAsB;IACrC,IAAI,EAAED,kBAAmB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACzB,CACD;AAEP,CAAC;AAAC,GA3DIxB,aAAa;AAAA,KAAbA,aAAa;AA6DnB,eAAeA,aAAa;AAAC;AAAA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}