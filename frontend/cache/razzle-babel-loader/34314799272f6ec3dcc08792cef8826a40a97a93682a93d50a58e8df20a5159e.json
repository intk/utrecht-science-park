{"ast":null,"code":"var _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/src/customizations/components/theme/Logo/Logo.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nvar __jsx = React.createElement;\n/**\n * Logo component.\n * @module components/theme/Logo/Logo\n */\n\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Image } from 'semantic-ui-react';\nimport { useSelector } from 'react-redux';\nimport config from '@plone/volto/registry';\nimport { UniversalLink } from '@plone/volto/components';\nimport LogoImage from '@package/static/logo.svg';\nconst messages = defineMessages({\n  site: {\n    \"id\": \"Site\",\n    \"defaultMessage\": \"Site\"\n  },\n  plonesite: {\n    \"id\": \"Plone Site\",\n    \"defaultMessage\": \"Plone Site\"\n  }\n});\n\n/**\n * Logo component class.\n * @function Logo\n * @param {Object} intl Intl object\n * @returns {string} Markup of the component.\n */\nconst Logo = () => {\n  _s();\n  const {\n    settings\n  } = config;\n  const lang = useSelector(state => state.intl.locale);\n  const intl = useIntl();\n  return __jsx(UniversalLink, {\n    href: settings.isMultilingual ? `/${lang}` : '/',\n    title: intl.formatMessage(messages.site),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, __jsx(Image, {\n    src: LogoImage,\n    alt: intl.formatMessage(messages.plonesite),\n    title: intl.formatMessage(messages.plonesite),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n};\n_s(Logo, \"yBJTal8dSIzq8o4TfurVBkBySnY=\", false, function () {\n  return [useSelector, useIntl];\n});\n_c = Logo;\nexport default Logo;\nvar _c;\n$RefreshReg$(_c, \"Logo\");","map":{"version":3,"names":["defineMessages","useIntl","Image","useSelector","config","UniversalLink","LogoImage","messages","site","plonesite","Logo","settings","lang","state","intl","locale","isMultilingual","formatMessage"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/src/customizations/components/theme/Logo/Logo.jsx"],"sourcesContent":["/**\n * Logo component.\n * @module components/theme/Logo/Logo\n */\n\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Image } from 'semantic-ui-react';\nimport { useSelector } from 'react-redux';\nimport config from '@plone/volto/registry';\nimport { UniversalLink } from '@plone/volto/components';\nimport LogoImage from '@package/static/logo.svg';\n\nconst messages = defineMessages({\n  site: {\n    id: 'Site',\n    defaultMessage: 'Site',\n  },\n  plonesite: {\n    id: 'Plone Site',\n    defaultMessage: 'Plone Site',\n  },\n});\n\n/**\n * Logo component class.\n * @function Logo\n * @param {Object} intl Intl object\n * @returns {string} Markup of the component.\n */\nconst Logo = () => {\n  const { settings } = config;\n  const lang = useSelector((state) => state.intl.locale);\n  const intl = useIntl();\n\n  return (\n    <UniversalLink\n      href={settings.isMultilingual ? `/${lang}` : '/'}\n      title={intl.formatMessage(messages.site)}\n    >\n      <Image\n        src={LogoImage}\n        alt={intl.formatMessage(messages.plonesite)}\n        title={intl.formatMessage(messages.plonesite)}\n      />\n    </UniversalLink>\n  );\n};\n\nexport default Logo;\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;;AAEA,SAASA,cAAc,EAAEC,OAAO,QAAQ,YAAY;AACpD,SAASC,KAAK,QAAQ,mBAAmB;AACzC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,aAAa,QAAQ,yBAAyB;AACvD,OAAOC,SAAS,MAAM,0BAA0B;AAEhD,MAAMC,QAAQ,GAAGP,cAAc,CAAC;EAC9BQ,IAAI;IAAA;IAAA;EAAA,CAGH;EACDC,SAAS;IAAA;IAAA;EAAA;AAIX,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;EAAA;EACjB,MAAM;IAAEC;EAAS,CAAC,GAAGP,MAAM;EAC3B,MAAMQ,IAAI,GAAGT,WAAW,CAAEU,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACC,MAAM,CAAC;EACtD,MAAMD,IAAI,GAAGb,OAAO,EAAE;EAEtB,OACE,MAAC,aAAa;IACZ,IAAI,EAAEU,QAAQ,CAACK,cAAc,GAAI,IAAGJ,IAAK,EAAC,GAAG,GAAI;IACjD,KAAK,EAAEE,IAAI,CAACG,aAAa,CAACV,QAAQ,CAACC,IAAI,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEzC,MAAC,KAAK;IACJ,GAAG,EAAEF,SAAU;IACf,GAAG,EAAEQ,IAAI,CAACG,aAAa,CAACV,QAAQ,CAACE,SAAS,CAAE;IAC5C,KAAK,EAAEK,IAAI,CAACG,aAAa,CAACV,QAAQ,CAACE,SAAS,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAC9C,CACY;AAEpB,CAAC;AAAC,GAjBIC,IAAI;EAAA,QAEKP,WAAW,EACXF,OAAO;AAAA;AAAA,KAHhBS,IAAI;AAmBV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{"react-intl":{"messages":[{"id":"Site","defaultMessage":"Site"},{"id":"Plone Site","defaultMessage":"Plone Site"}]}},"sourceType":"module","externalDependencies":[]}