{"ast":null,"code":"var _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/src/components/FormattedDate/FormattedDate.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { DateTime } from 'luxon';\n// import * as dateFns from 'date-fns';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { useSelector } from 'react-redux';\nimport nlLocale from 'date-fns/locale/nl';\nexport const long_date_format = {\n  // Thursday, December 9, 2021 at 10:39 AM\n  dateStyle: 'full',\n  timeStyle: 'short'\n};\nconst readableTime = d => new Intl.DateTimeFormat('en', long_date_format).format(d);\nconst MONTH = 'MMMM';\nconst DAY = 'dd';\nconst YEAR = 'yyyy';\nconst dformat = `${DAY} ${MONTH}, ${YEAR}`;\nconst noYearFormat = `${MONTH} ${DAY}`;\nexport const FormattedDate = injectLazyLibs(['dateFns'])(_s(_ref => {\n  _s();\n  let {\n    isoDate,\n    format,\n    dateFns\n  } = _ref;\n  const currentLang = useSelector(state => state.intl.locale);\n  // console.log(nlLocale);\n\n  if (!isoDate) return null;\n  const date = DateTime.fromISO(isoDate);\n  let out;\n  const options = currentLang === 'nl' ? {\n    locale: nlLocale\n  } : {};\n  if (format === 'date') {\n    out = date.toLocaleString(DateTime.DATE_SHORT);\n  } else if (format === 'long') {\n    out = dateFns.format(dateFns.parseISO(isoDate), dformat, options);\n  } else if (format) {\n    out = date.toFormat(format);\n  } else {\n    out = date.toLocaleString(DateTime.DATE_SHORT);\n  }\n  return __jsx(\"time\", {\n    dateTime: date,\n    className: \"formatted-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, out);\n}, \"uqqvTJEhNRbpXzjutmWK1oLJEbY=\", false, function () {\n  return [useSelector];\n}));\nexport const FormattedDateRange = injectLazyLibs(['dateFns'])(_ref2 => {\n  let {\n    start,\n    end,\n    dateFns\n  } = _ref2;\n  const startD = dateFns.parseISO(start);\n  const endD = dateFns.parseISO(end);\n  const now = new Date();\n\n  // See https://date-fns.org/v2.28.0/docs/format\n\n  if (dateFns.isFuture(startD)) {\n    const diffStart = dateFns.differenceInCalendarDays(startD, now);\n    if (diffStart > 6) {\n      return __jsx(React.Fragment, null, __jsx(\"time\", {\n        dateTime: startD,\n        title: readableTime(startD),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }, dateFns.format(startD, dformat)), ` - `, __jsx(\"time\", {\n        dateTime: endD,\n        title: readableTime(endD),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      }, dateFns.format(endD, dformat)));\n    }\n    return __jsx(React.Fragment, null, __jsx(\"time\", {\n      dateTime: startD,\n      title: readableTime(startD),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, dateFns.formatRelative(startD, new Date())), ` - `, __jsx(\"time\", {\n      dateTime: endD,\n      title: readableTime(endD),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, dateFns.format(endD, dformat)));\n  }\n  if (dateFns.isSameDay(startD, endD) && dateFns.isSameYear(startD, now)) {\n    // current year, past date (which happens same day)\n    return __jsx(\"time\", {\n      dateTime: startD,\n      title: readableTime(startD),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, `${dateFns.format(startD, 'PPP')} ${dateFns.format(startD, 'p')} - ${dateFns.format(endD, 'p O')}`);\n  }\n  if (dateFns.isSameDay(startD, endD)) {\n    return __jsx(\"time\", {\n      dateTime: startD,\n      title: readableTime(startD),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, dateFns.format(startD, dformat));\n  }\n  if (dateFns.isSameYear(startD, endD)) {\n    return __jsx(React.Fragment, null, __jsx(\"time\", {\n      dateTime: startD,\n      title: readableTime(startD),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, dateFns.format(startD, noYearFormat)), ` - `, __jsx(\"time\", {\n      dateTime: endD,\n      title: readableTime(endD),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, dateFns.format(endD, dformat)));\n  }\n  return __jsx(React.Fragment, null, __jsx(\"time\", {\n    dateTime: startD,\n    title: readableTime(startD),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, dateFns.format(startD, dformat)), ` - `, __jsx(\"time\", {\n    dateTime: endD,\n    title: readableTime(endD),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, dateFns.format(endD, dformat)));\n});\n\n// {`${dateFns.formatRelative(endD, now)} ${dateFns.format(\n//   endD,\n//   'O',\n// )}`}","map":{"version":3,"names":["React","DateTime","injectLazyLibs","useSelector","nlLocale","long_date_format","dateStyle","timeStyle","readableTime","d","Intl","DateTimeFormat","format","MONTH","DAY","YEAR","dformat","noYearFormat","FormattedDate","isoDate","dateFns","currentLang","state","intl","locale","date","fromISO","out","options","toLocaleString","DATE_SHORT","parseISO","toFormat","FormattedDateRange","start","end","startD","endD","now","Date","isFuture","diffStart","differenceInCalendarDays","formatRelative","isSameDay","isSameYear"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/src/components/FormattedDate/FormattedDate.jsx"],"sourcesContent":["import React from 'react';\nimport { DateTime } from 'luxon';\n// import * as dateFns from 'date-fns';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { useSelector } from 'react-redux';\nimport nlLocale from 'date-fns/locale/nl';\n\nexport const long_date_format = {\n  // Thursday, December 9, 2021 at 10:39 AM\n  dateStyle: 'full',\n  timeStyle: 'short',\n};\n\nconst readableTime = (d) =>\n  new Intl.DateTimeFormat('en', long_date_format).format(d);\n\nconst MONTH = 'MMMM';\nconst DAY = 'dd';\nconst YEAR = 'yyyy';\n\nconst dformat = `${DAY} ${MONTH}, ${YEAR}`;\nconst noYearFormat = `${MONTH} ${DAY}`;\n\nexport const FormattedDate = injectLazyLibs(['dateFns'])(\n  ({ isoDate, format, dateFns }) => {\n    const currentLang = useSelector((state) => state.intl.locale);\n    // console.log(nlLocale);\n\n    if (!isoDate) return null;\n    const date = DateTime.fromISO(isoDate);\n    let out;\n    const options =\n      currentLang === 'nl'\n        ? {\n            locale: nlLocale,\n          }\n        : {};\n\n    if (format === 'date') {\n      out = date.toLocaleString(DateTime.DATE_SHORT);\n    } else if (format === 'long') {\n      out = dateFns.format(dateFns.parseISO(isoDate), dformat, options);\n    } else if (format) {\n      out = date.toFormat(format);\n    } else {\n      out = date.toLocaleString(DateTime.DATE_SHORT);\n    }\n    return (\n      <time dateTime={date} className=\"formatted-date\">\n        {out}\n      </time>\n    );\n  },\n);\n\nexport const FormattedDateRange = injectLazyLibs(['dateFns'])(\n  ({ start, end, dateFns }) => {\n    const startD = dateFns.parseISO(start);\n    const endD = dateFns.parseISO(end);\n    const now = new Date();\n\n    // See https://date-fns.org/v2.28.0/docs/format\n\n    if (dateFns.isFuture(startD)) {\n      const diffStart = dateFns.differenceInCalendarDays(startD, now);\n      if (diffStart > 6) {\n        return (\n          <>\n            <time dateTime={startD} title={readableTime(startD)}>\n              {dateFns.format(startD, dformat)}\n            </time>\n            {` - `}\n            <time dateTime={endD} title={readableTime(endD)}>\n              {dateFns.format(endD, dformat)}\n            </time>\n          </>\n        );\n      }\n      return (\n        <>\n          <time dateTime={startD} title={readableTime(startD)}>\n            {dateFns.formatRelative(startD, new Date())}\n          </time>\n          {` - `}\n          <time dateTime={endD} title={readableTime(endD)}>\n            {dateFns.format(endD, dformat)}\n          </time>\n        </>\n      );\n    }\n\n    if (dateFns.isSameDay(startD, endD) && dateFns.isSameYear(startD, now)) {\n      // current year, past date (which happens same day)\n      return (\n        <time dateTime={startD} title={readableTime(startD)}>\n          {`${dateFns.format(startD, 'PPP')} ${dateFns.format(\n            startD,\n            'p',\n          )} - ${dateFns.format(endD, 'p O')}`}\n        </time>\n      );\n    }\n\n    if (dateFns.isSameDay(startD, endD)) {\n      return (\n        <time dateTime={startD} title={readableTime(startD)}>\n          {dateFns.format(startD, dformat)}\n        </time>\n      );\n    }\n\n    if (dateFns.isSameYear(startD, endD)) {\n      return (\n        <>\n          <time dateTime={startD} title={readableTime(startD)}>\n            {dateFns.format(startD, noYearFormat)}\n          </time>\n          {` - `}\n          <time dateTime={endD} title={readableTime(endD)}>\n            {dateFns.format(endD, dformat)}\n          </time>\n        </>\n      );\n    }\n\n    return (\n      <>\n        <time dateTime={startD} title={readableTime(startD)}>\n          {dateFns.format(startD, dformat)}\n        </time>\n        {` - `}\n        <time dateTime={endD} title={readableTime(endD)}>\n          {dateFns.format(endD, dformat)}\n        </time>\n      </>\n    );\n  },\n);\n\n// {`${dateFns.formatRelative(endD, now)} ${dateFns.format(\n//   endD,\n//   'O',\n// )}`}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}