{"ast":null,"code":"import _objectSpread from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _difference from \"lodash/difference\";\nimport _pull from \"lodash/pull\";\nimport _map from \"lodash/map\";\nimport _find from \"lodash/find\";\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/Users/UsersControlpanel.jsx\";\nvar __jsx = React.createElement;\n/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UsersControlpanel\n */\nimport { createUser, deleteUser, listRoles, listGroups, listUsers, getControlpanel, updateUser, updateGroup } from '@plone/volto/actions';\nimport { Icon, ModalForm, Toast, Toolbar, RenderUsers, Pagination, Error } from '@plone/volto/components';\nimport { Link } from 'react-router-dom';\nimport { Helmet, messages } from '@plone/volto/helpers';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport addUserSvg from '@plone/volto/icons/add-user.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport ploneSVG from '@plone/volto/icons/plone.svg';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { bindActionCreators, compose } from 'redux';\nimport { Confirm, Container, Form, Input, Button, Segment, Table } from 'semantic-ui-react';\n\n/**\n * UsersControlpanel class.\n * @class UsersControlpanel\n * @extends Component\n */\nclass UsersControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"fetchData\", async () => {\n      await this.props.getControlpanel('usergroup');\n      await this.props.listRoles();\n      if (!this.props.many_users) {\n        this.props.listGroups();\n        await this.props.listUsers();\n        this.setState({\n          entries: this.props.users\n        });\n      }\n    });\n    _defineProperty(this, \"addUserToGroup\", user => {\n      const {\n        groups,\n        username\n      } = user;\n      groups.forEach(group => {\n        this.props.updateGroup(group, {\n          users: {\n            [username]: true\n          }\n        });\n      });\n    });\n    _defineProperty(this, \"updateUserRoleSubmit\", e => {\n      e.stopPropagation();\n      const roles = this.props.roles.map(item => item.id);\n      this.state.entries.forEach(item => {\n        const userData = {\n          roles: {}\n        };\n        const removedRoles = _difference(roles, item.roles);\n        removedRoles.forEach(role => {\n          userData.roles[role] = false;\n        });\n        item.roles.forEach(role => {\n          userData.roles[role] = true;\n        });\n        this.props.updateUser(item.id, userData);\n      });\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.updateRoles),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 7\n        }\n      }));\n    });\n    _defineProperty(this, \"onChangePage\", (event, _ref) => {\n      let {\n        value\n      } = _ref;\n      this.setState({\n        currentPage: value\n      });\n    });\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n    this.delete = this.delete.bind(this);\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onAddUserSubmit = this.onAddUserSubmit.bind(this);\n    this.onAddUserError = this.onAddUserError.bind(this);\n    this.onAddUserSuccess = this.onAddUserSuccess.bind(this);\n    this.updateUserRole = this.updateUserRole.bind(this);\n    this.state = {\n      search: '',\n      showAddUser: false,\n      showAddUserErrorConfirm: false,\n      addUserError: '',\n      showDelete: false,\n      userToDelete: undefined,\n      entries: [],\n      isClient: false,\n      currentPage: 0,\n      pageSize: 10\n    };\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true\n    });\n    this.fetchData();\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.deleteRequest.loading && nextProps.deleteRequest.loaded || this.props.createRequest.loading && nextProps.createRequest.loaded) {\n      this.props.listUsers({\n        search: this.state.search\n      });\n    }\n    if (this.props.createRequest.loading && nextProps.createRequest.loaded) {\n      this.onAddUserSuccess();\n    }\n    if (this.props.createRequest.loading && nextProps.createRequest.error) {\n      this.onAddUserError(nextProps.createRequest.error);\n    }\n    if (this.props.loadRolesRequest.loading && nextProps.loadRolesRequest.error) {\n      this.setState({\n        error: nextProps.loadRolesRequest.error\n      });\n    }\n  }\n  getUserFromProps(value) {\n    return _find(this.props.users, ['@id', value]);\n  }\n\n  /**\n   * Search handler\n   * @method onSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onSearch(event) {\n    event.preventDefault();\n    this.props.listUsers({\n      search: this.state.search\n    });\n  }\n\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value\n    });\n  }\n\n  /**\n   * Delete a user\n   * @method delete\n   * @param {object} event Event object.\n   * @param {string} value username.\n   * @returns {undefined}\n   */\n  delete(event, _ref2) {\n    let {\n      value\n    } = _ref2;\n    if (value) {\n      this.setState({\n        showDelete: true,\n        userToDelete: this.getUserFromProps(value)\n      });\n    }\n  }\n\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @returns {undefined}\n   */\n  onDeleteOk() {\n    if (this.state.userToDelete) {\n      this.props.deleteUser(this.state.userToDelete.id);\n      this.setState({\n        showDelete: false,\n        userToDelete: undefined\n      });\n    }\n  }\n\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @returns {undefined}\n   */\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      itemsToDelete: []\n    });\n  }\n\n  /**\n   *@param {object} user\n   *@returns {undefined}\n   *@memberof UsersControlpanel\n   */\n\n  /**\n   * Callback to be called by the ModalForm when the form is submitted.\n   *\n   * @param {object} data Form data from the ModalForm.\n   * @param {func} callback to set new form data in the ModalForm\n   * @returns {undefined}\n   */\n  onAddUserSubmit(data, callback) {\n    const {\n      groups,\n      sendPasswordReset\n    } = data;\n    if (groups && groups.length > 0) this.addUserToGroup(data);\n    this.props.createUser(data, sendPasswordReset);\n    this.setState({\n      addUserSetFormDataCallback: callback\n    });\n  }\n\n  /**\n   * Handle Success after createUser()\n   *\n   * @returns {undefined}\n   */\n  onAddUserSuccess() {\n    this.state.addUserSetFormDataCallback({});\n    this.setState({\n      showAddUser: false,\n      addUserError: undefined,\n      addUserSetFormDataCallback: undefined\n    });\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: this.props.intl.formatMessage(messages.success),\n      content: this.props.intl.formatMessage(messages.userCreated),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  /**\n   *\n   *\n   * @param {*} data\n   * @param {*} callback\n   * @memberof UsersControlpanel\n   */\n  updateUserRole(name, value) {\n    this.setState({\n      entries: _map(this.state.entries, entry => _objectSpread(_objectSpread({}, entry), {}, {\n        roles: entry.id === name && !entry.roles.includes(value) ? [...entry.roles, value] : entry.id !== name ? entry.roles : _pull(entry.roles, value)\n      }))\n    });\n  }\n  /**\n   *\n   * @param {*} event\n   * @memberof UsersControlpanel\n   */\n\n  /**\n   * Handle Errors after createUser()\n   *\n   * @param {object} error object. Requires the property .message\n   * @returns {undefined}\n   */\n  onAddUserError(error) {\n    this.setState({\n      addUserError: error.response.body.error.message\n    });\n  }\n\n  /**\n   * On change page\n   * @method onChangePage\n   * @param {object} event Event object.\n   * @param {string} value Page value.\n   * @returns {undefined}\n   */\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.users !== prevProps.users) {\n      this.setState({\n        entries: this.props.users\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$state$entries;\n    if (this.state.error) {\n      return __jsx(Error, {\n        error: this.state.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 14\n        }\n      });\n    }\n    /*let fullnameToDelete = this.state.userToDelete\n        ? this.state.userToDelete.fullname\n        : '';*/\n    let usernameToDelete = this.state.userToDelete ? this.state.userToDelete.username : '';\n    return __jsx(Container, {\n      className: \"users-control-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.users),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }\n    }, __jsx(Confirm, {\n      open: this.state.showDelete,\n      header: this.props.intl.formatMessage(messages.deleteUserConfirmTitle),\n      content: __jsx(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 15\n        }\n      }, __jsx(\"ul\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 17\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Do you really want to delete the user {username}?\",\n        defaultMessage: \"Do you really want to delete the user {username}?\",\n        values: {\n          username: __jsx(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 33\n            }\n          }, usernameToDelete)\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 19\n        }\n      }))),\n      onCancel: this.onDeleteCancel,\n      onConfirm: this.onDeleteOk,\n      size: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 11\n      }\n    }), this.state.showAddUser ? __jsx(ModalForm, {\n      open: this.state.showAddUser,\n      className: \"modal\",\n      onSubmit: this.onAddUserSubmit,\n      submitError: this.state.addUserError,\n      onCancel: () => this.setState({\n        showAddUser: false,\n        addUserError: undefined\n      }),\n      title: this.props.intl.formatMessage(messages.addUserFormTitle),\n      loading: this.props.createRequest.loading,\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: 'FIXME: User Data',\n          fields: ['username', 'fullname', 'email', 'password', 'sendPasswordReset', 'roles', 'groups']\n        }],\n        properties: {\n          username: {\n            title: this.props.intl.formatMessage(messages.addUserFormUsernameTitle),\n            type: 'string',\n            description: this.props.intl.formatMessage(messages.addUserFormUsernameDescription)\n          },\n          fullname: {\n            title: this.props.intl.formatMessage(messages.addUserFormFullnameTitle),\n            type: 'string',\n            description: this.props.intl.formatMessage(messages.addUserFormFullnameDescription)\n          },\n          email: {\n            title: this.props.intl.formatMessage(messages.addUserFormEmailTitle),\n            type: 'string',\n            description: this.props.intl.formatMessage(messages.addUserFormEmailDescription),\n            widget: 'email'\n          },\n          password: {\n            title: this.props.intl.formatMessage(messages.addUserFormPasswordTitle),\n            type: 'password',\n            description: this.props.intl.formatMessage(messages.addUserFormPasswordDescription),\n            widget: 'password'\n          },\n          sendPasswordReset: {\n            title: this.props.intl.formatMessage(messages.addUserFormSendPasswordResetTitle),\n            type: 'boolean'\n          },\n          roles: {\n            title: this.props.intl.formatMessage(messages.addUserFormRolesTitle),\n            type: 'array',\n            choices: this.props.roles.map(role => [role.id, role.title]),\n            noValueOption: false\n          },\n          groups: {\n            title: this.props.intl.formatMessage(messages.addUserGroupNameTitle),\n            type: 'array',\n            choices: this.props.groups.map(group => [group.id, group.id]),\n            noValueOption: false\n          }\n        },\n        required: ['username', 'email']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 13\n      }\n    }) : null), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Users\",\n      defaultMessage: \"Users\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      secondary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Note that roles set here apply directly to a user. The symbol{plone_svg}indicates a role inherited from membership in a group.\",\n      defaultMessage: \"Note that roles set here apply directly to a user. The symbol{plone_svg}indicates a role inherited from membership in a group.\",\n      values: {\n        plone_svg: __jsx(Icon, {\n          name: ploneSVG,\n          size: \"20px\",\n          color: \"#007EB1\",\n          title: 'plone-svg',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 19\n          }\n        })\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 11\n      }\n    }, __jsx(Form, {\n      onSubmit: this.onSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 13\n      }\n    }, __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 15\n      }\n    }, __jsx(Input, {\n      name: \"SearchableText\",\n      action: {\n        icon: 'search'\n      },\n      placeholder: this.props.intl.formatMessage(messages.searchUsers),\n      onChange: this.onChangeSearch,\n      id: \"user-search-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 17\n      }\n    })))), __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 13\n      }\n    }, __jsx(Table, {\n      padded: true,\n      striped: true,\n      attached: true,\n      unstackable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 15\n      }\n    }, __jsx(Table.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 19\n      }\n    }, __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"User name\",\n      defaultMessage: \"User name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 23\n      }\n    })), this.props.roles.map(role => __jsx(Table.HeaderCell, {\n      key: role.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 23\n      }\n    }, role.title)), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Actions\",\n      defaultMessage: \"Actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 23\n      }\n    })))), __jsx(Table.Body, {\n      \"data-user\": \"users\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 17\n      }\n    }, this.state.entries.slice(this.state.currentPage * 10, this.state.pageSize * (this.state.currentPage + 1)).map(user => __jsx(RenderUsers, {\n      key: user.id,\n      onDelete: this.delete,\n      roles: this.props.roles,\n      user: user,\n      updateUser: this.updateUserRole,\n      inheritedRole: this.props.inheritedRole,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 23\n      }\n    }))))), __jsx(\"div\", {\n      className: \"contents-pagination\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 13\n      }\n    }, __jsx(Pagination, {\n      current: this.state.currentPage,\n      total: Math.ceil(((_this$state$entries = this.state.entries) === null || _this$state$entries === void 0 ? void 0 : _this$state$entries.length) / this.state.pageSize),\n      onChangePage: this.onChangePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 15\n      }\n    })))), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 11\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(React.Fragment, null, __jsx(Button, {\n        id: \"toolbar-save\",\n        className: \"save\",\n        \"aria-label\": this.props.intl.formatMessage(messages.save),\n        onClick: this.updateUserRoleSubmit,\n        loading: this.props.createRequest.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: saveSVG,\n        className: \"circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.save),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 21\n        }\n      })), __jsx(Link, {\n        to: \"/controlpanel\",\n        className: \"cancel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: clearSVG,\n        className: \"circled\",\n        \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.cancel),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 21\n        }\n      })), __jsx(Button, {\n        id: \"toolbar-add\",\n        \"aria-label\": this.props.intl.formatMessage(messages.addUserButtonTitle),\n        onClick: () => {\n          this.setState({\n            showAddUser: true\n          });\n        },\n        loading: this.props.createRequest.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: addUserSvg,\n        size: \"45px\",\n        color: \"#826A6A\",\n        title: this.props.intl.formatMessage(messages.addUserButtonTitle),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 21\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 13\n      }\n    })));\n  }\n}\n_defineProperty(UsersControlpanel, \"propTypes\", {\n  listRoles: PropTypes.func.isRequired,\n  listUsers: PropTypes.func.isRequired,\n  updateUser: PropTypes.func,\n  listGroups: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  roles: PropTypes.arrayOf(PropTypes.shape({\n    '@id': PropTypes.string,\n    '@type': PropTypes.string,\n    id: PropTypes.string\n  })).isRequired,\n  users: PropTypes.arrayOf(PropTypes.shape({\n    username: PropTypes.string,\n    fullname: PropTypes.string,\n    roles: PropTypes.arrayOf(PropTypes.string)\n  })).isRequired\n});\nexport default compose(injectIntl, connect((state, props) => {\n  var _state$controlpanels, _state$controlpanels$, _state$controlpanels$2, _state$controlpanels2, _state$controlpanels3, _state$controlpanels4;\n  return {\n    roles: state.roles.roles,\n    users: state.users.users,\n    groups: state.groups.groups,\n    many_users: (_state$controlpanels = state.controlpanels) === null || _state$controlpanels === void 0 ? void 0 : (_state$controlpanels$ = _state$controlpanels.controlpanel) === null || _state$controlpanels$ === void 0 ? void 0 : (_state$controlpanels$2 = _state$controlpanels$.data) === null || _state$controlpanels$2 === void 0 ? void 0 : _state$controlpanels$2.many_users,\n    many_groups: (_state$controlpanels2 = state.controlpanels) === null || _state$controlpanels2 === void 0 ? void 0 : (_state$controlpanels3 = _state$controlpanels2.controlpanel) === null || _state$controlpanels3 === void 0 ? void 0 : (_state$controlpanels4 = _state$controlpanels3.data) === null || _state$controlpanels4 === void 0 ? void 0 : _state$controlpanels4.many_groups,\n    description: state.description,\n    pathname: props.location.pathname,\n    deleteRequest: state.users.delete,\n    createRequest: state.users.create,\n    loadRolesRequest: state.roles,\n    inheritedRole: state.authRole.authenticatedRole\n  };\n}, dispatch => bindActionCreators({\n  listRoles,\n  listUsers,\n  listGroups,\n  getControlpanel,\n  deleteUser,\n  createUser,\n  updateUser,\n  updateGroup\n}, dispatch)))(UsersControlpanel);","map":{"version":3,"names":["createUser","deleteUser","listRoles","listGroups","listUsers","getControlpanel","updateUser","updateGroup","Icon","ModalForm","Toast","Toolbar","RenderUsers","Pagination","Error","Link","Helmet","messages","clearSVG","addUserSvg","saveSVG","ploneSVG","PropTypes","React","Component","FormattedMessage","injectIntl","Portal","connect","toast","bindActionCreators","compose","Confirm","Container","Form","Input","Button","Segment","Table","UsersControlpanel","constructor","props","many_users","setState","entries","users","user","groups","username","forEach","group","e","stopPropagation","roles","map","item","id","state","userData","removedRoles","role","success","intl","formatMessage","updateRoles","event","value","currentPage","onChangeSearch","bind","onSearch","delete","onDeleteOk","onDeleteCancel","onAddUserSubmit","onAddUserError","onAddUserSuccess","updateUserRole","search","showAddUser","showAddUserErrorConfirm","addUserError","showDelete","userToDelete","undefined","isClient","pageSize","componentDidMount","fetchData","UNSAFE_componentWillReceiveProps","nextProps","deleteRequest","loading","loaded","createRequest","error","loadRolesRequest","getUserFromProps","preventDefault","target","itemsToDelete","data","callback","sendPasswordReset","length","addUserToGroup","addUserSetFormDataCallback","userCreated","name","entry","includes","response","body","message","componentDidUpdate","prevProps","prevState","render","usernameToDelete","deleteUserConfirmTitle","addUserFormTitle","fieldsets","title","fields","properties","addUserFormUsernameTitle","type","description","addUserFormUsernameDescription","fullname","addUserFormFullnameTitle","addUserFormFullnameDescription","email","addUserFormEmailTitle","addUserFormEmailDescription","widget","password","addUserFormPasswordTitle","addUserFormPasswordDescription","addUserFormSendPasswordResetTitle","addUserFormRolesTitle","choices","noValueOption","addUserGroupNameTitle","required","plone_svg","icon","searchUsers","slice","inheritedRole","Math","ceil","onChangePage","document","getElementById","pathname","save","updateUserRoleSubmit","cancel","addUserButtonTitle","func","isRequired","string","arrayOf","shape","controlpanels","controlpanel","many_groups","location","create","authRole","authenticatedRole","dispatch"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/Users/UsersControlpanel.jsx"],"sourcesContent":["/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UsersControlpanel\n */\nimport {\n  createUser,\n  deleteUser,\n  listRoles,\n  listGroups,\n  listUsers,\n  getControlpanel,\n  updateUser,\n  updateGroup,\n} from '@plone/volto/actions';\nimport {\n  Icon,\n  ModalForm,\n  Toast,\n  Toolbar,\n  RenderUsers,\n  Pagination,\n  Error,\n} from '@plone/volto/components';\nimport { Link } from 'react-router-dom';\nimport { Helmet, messages } from '@plone/volto/helpers';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport addUserSvg from '@plone/volto/icons/add-user.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport ploneSVG from '@plone/volto/icons/plone.svg';\nimport { find, map, pull, difference } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { bindActionCreators, compose } from 'redux';\nimport {\n  Confirm,\n  Container,\n  Form,\n  Input,\n  Button,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\n\n/**\n * UsersControlpanel class.\n * @class UsersControlpanel\n * @extends Component\n */\nclass UsersControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    listRoles: PropTypes.func.isRequired,\n    listUsers: PropTypes.func.isRequired,\n    updateUser: PropTypes.func,\n    listGroups: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    roles: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        id: PropTypes.string,\n      }),\n    ).isRequired,\n    users: PropTypes.arrayOf(\n      PropTypes.shape({\n        username: PropTypes.string,\n        fullname: PropTypes.string,\n        roles: PropTypes.arrayOf(PropTypes.string),\n      }),\n    ).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n    this.delete = this.delete.bind(this);\n\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onAddUserSubmit = this.onAddUserSubmit.bind(this);\n    this.onAddUserError = this.onAddUserError.bind(this);\n    this.onAddUserSuccess = this.onAddUserSuccess.bind(this);\n    this.updateUserRole = this.updateUserRole.bind(this);\n    this.state = {\n      search: '',\n      showAddUser: false,\n      showAddUserErrorConfirm: false,\n      addUserError: '',\n      showDelete: false,\n      userToDelete: undefined,\n      entries: [],\n      isClient: false,\n      currentPage: 0,\n      pageSize: 10,\n    };\n  }\n\n  fetchData = async () => {\n    await this.props.getControlpanel('usergroup');\n    await this.props.listRoles();\n    if (!this.props.many_users) {\n      this.props.listGroups();\n      await this.props.listUsers();\n      this.setState({\n        entries: this.props.users,\n      });\n    }\n  };\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true,\n    });\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      (this.props.deleteRequest.loading && nextProps.deleteRequest.loaded) ||\n      (this.props.createRequest.loading && nextProps.createRequest.loaded)\n    ) {\n      this.props.listUsers({\n        search: this.state.search,\n      });\n    }\n    if (this.props.createRequest.loading && nextProps.createRequest.loaded) {\n      this.onAddUserSuccess();\n    }\n    if (this.props.createRequest.loading && nextProps.createRequest.error) {\n      this.onAddUserError(nextProps.createRequest.error);\n    }\n    if (\n      this.props.loadRolesRequest.loading &&\n      nextProps.loadRolesRequest.error\n    ) {\n      this.setState({\n        error: nextProps.loadRolesRequest.error,\n      });\n    }\n  }\n\n  getUserFromProps(value) {\n    return find(this.props.users, ['@id', value]);\n  }\n\n  /**\n   * Search handler\n   * @method onSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onSearch(event) {\n    event.preventDefault();\n    this.props.listUsers({\n      search: this.state.search,\n    });\n  }\n\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  /**\n   * Delete a user\n   * @method delete\n   * @param {object} event Event object.\n   * @param {string} value username.\n   * @returns {undefined}\n   */\n  delete(event, { value }) {\n    if (value) {\n      this.setState({\n        showDelete: true,\n        userToDelete: this.getUserFromProps(value),\n      });\n    }\n  }\n\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @returns {undefined}\n   */\n  onDeleteOk() {\n    if (this.state.userToDelete) {\n      this.props.deleteUser(this.state.userToDelete.id);\n      this.setState({\n        showDelete: false,\n        userToDelete: undefined,\n      });\n    }\n  }\n\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @returns {undefined}\n   */\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      itemsToDelete: [],\n    });\n  }\n\n  /**\n   *@param {object} user\n   *@returns {undefined}\n   *@memberof UsersControlpanel\n   */\n  addUserToGroup = (user) => {\n    const { groups, username } = user;\n    groups.forEach((group) => {\n      this.props.updateGroup(group, {\n        users: {\n          [username]: true,\n        },\n      });\n    });\n  };\n\n  /**\n   * Callback to be called by the ModalForm when the form is submitted.\n   *\n   * @param {object} data Form data from the ModalForm.\n   * @param {func} callback to set new form data in the ModalForm\n   * @returns {undefined}\n   */\n  onAddUserSubmit(data, callback) {\n    const { groups, sendPasswordReset } = data;\n    if (groups && groups.length > 0) this.addUserToGroup(data);\n    this.props.createUser(data, sendPasswordReset);\n    this.setState({\n      addUserSetFormDataCallback: callback,\n    });\n  }\n\n  /**\n   * Handle Success after createUser()\n   *\n   * @returns {undefined}\n   */\n  onAddUserSuccess() {\n    this.state.addUserSetFormDataCallback({});\n    this.setState({\n      showAddUser: false,\n      addUserError: undefined,\n      addUserSetFormDataCallback: undefined,\n    });\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.userCreated)}\n      />,\n    );\n  }\n\n  /**\n   *\n   *\n   * @param {*} data\n   * @param {*} callback\n   * @memberof UsersControlpanel\n   */\n  updateUserRole(name, value) {\n    this.setState({\n      entries: map(this.state.entries, (entry) => ({\n        ...entry,\n        roles:\n          entry.id === name && !entry.roles.includes(value)\n            ? [...entry.roles, value]\n            : entry.id !== name\n            ? entry.roles\n            : pull(entry.roles, value),\n      })),\n    });\n  }\n  /**\n   *\n   * @param {*} event\n   * @memberof UsersControlpanel\n   */\n  updateUserRoleSubmit = (e) => {\n    e.stopPropagation();\n\n    const roles = this.props.roles.map((item) => item.id);\n    this.state.entries.forEach((item) => {\n      const userData = { roles: {} };\n      const removedRoles = difference(roles, item.roles);\n\n      removedRoles.forEach((role) => {\n        userData.roles[role] = false;\n      });\n      item.roles.forEach((role) => {\n        userData.roles[role] = true;\n      });\n      this.props.updateUser(item.id, userData);\n    });\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.updateRoles)}\n      />,\n    );\n  };\n\n  /**\n   * Handle Errors after createUser()\n   *\n   * @param {object} error object. Requires the property .message\n   * @returns {undefined}\n   */\n  onAddUserError(error) {\n    this.setState({\n      addUserError: error.response.body.error.message,\n    });\n  }\n\n  /**\n   * On change page\n   * @method onChangePage\n   * @param {object} event Event object.\n   * @param {string} value Page value.\n   * @returns {undefined}\n   */\n  onChangePage = (event, { value }) => {\n    this.setState({\n      currentPage: value,\n    });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.users !== prevProps.users) {\n      this.setState({\n        entries: this.props.users,\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n    /*let fullnameToDelete = this.state.userToDelete\n        ? this.state.userToDelete.fullname\n        : '';*/\n    let usernameToDelete = this.state.userToDelete\n      ? this.state.userToDelete.username\n      : '';\n    return (\n      <Container className=\"users-control-panel\">\n        <Helmet title={this.props.intl.formatMessage(messages.users)} />\n        <div className=\"container\">\n          <Confirm\n            open={this.state.showDelete}\n            header={this.props.intl.formatMessage(\n              messages.deleteUserConfirmTitle,\n            )}\n            content={\n              <div className=\"content\">\n                <ul className=\"content\">\n                  <FormattedMessage\n                    id=\"Do you really want to delete the user {username}?\"\n                    defaultMessage=\"Do you really want to delete the user {username}?\"\n                    values={{\n                      username: <b>{usernameToDelete}</b>,\n                    }}\n                  />\n                </ul>\n              </div>\n            }\n            onCancel={this.onDeleteCancel}\n            onConfirm={this.onDeleteOk}\n            size={null}\n          />\n          {this.state.showAddUser ? (\n            <ModalForm\n              open={this.state.showAddUser}\n              className=\"modal\"\n              onSubmit={this.onAddUserSubmit}\n              submitError={this.state.addUserError}\n              onCancel={() =>\n                this.setState({ showAddUser: false, addUserError: undefined })\n              }\n              title={this.props.intl.formatMessage(messages.addUserFormTitle)}\n              loading={this.props.createRequest.loading}\n              schema={{\n                fieldsets: [\n                  {\n                    id: 'default',\n                    title: 'FIXME: User Data',\n                    fields: [\n                      'username',\n                      'fullname',\n                      'email',\n                      'password',\n                      'sendPasswordReset',\n                      'roles',\n                      'groups',\n                    ],\n                  },\n                ],\n                properties: {\n                  username: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormUsernameTitle,\n                    ),\n                    type: 'string',\n                    description: this.props.intl.formatMessage(\n                      messages.addUserFormUsernameDescription,\n                    ),\n                  },\n                  fullname: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormFullnameTitle,\n                    ),\n                    type: 'string',\n                    description: this.props.intl.formatMessage(\n                      messages.addUserFormFullnameDescription,\n                    ),\n                  },\n                  email: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormEmailTitle,\n                    ),\n                    type: 'string',\n                    description: this.props.intl.formatMessage(\n                      messages.addUserFormEmailDescription,\n                    ),\n                    widget: 'email',\n                  },\n                  password: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormPasswordTitle,\n                    ),\n                    type: 'password',\n                    description: this.props.intl.formatMessage(\n                      messages.addUserFormPasswordDescription,\n                    ),\n                    widget: 'password',\n                  },\n                  sendPasswordReset: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormSendPasswordResetTitle,\n                    ),\n                    type: 'boolean',\n                  },\n                  roles: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormRolesTitle,\n                    ),\n                    type: 'array',\n                    choices: this.props.roles.map((role) => [\n                      role.id,\n                      role.title,\n                    ]),\n                    noValueOption: false,\n                  },\n                  groups: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserGroupNameTitle,\n                    ),\n                    type: 'array',\n                    choices: this.props.groups.map((group) => [\n                      group.id,\n                      group.id,\n                    ]),\n                    noValueOption: false,\n                  },\n                },\n                required: ['username', 'email'],\n              }}\n            />\n          ) : null}\n        </div>\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage id=\"Users\" defaultMessage=\"Users\" />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"Note that roles set here apply directly to a user. The symbol{plone_svg}indicates a role inherited from membership in a group.\"\n              defaultMessage=\"Note that roles set here apply directly to a user. The symbol{plone_svg}indicates a role inherited from membership in a group.\"\n              values={{\n                plone_svg: (\n                  <Icon\n                    name={ploneSVG}\n                    size=\"20px\"\n                    color=\"#007EB1\"\n                    title={'plone-svg'}\n                  />\n                ),\n              }}\n            />\n          </Segment>\n          <Segment>\n            <Form onSubmit={this.onSearch}>\n              <Form.Field>\n                <Input\n                  name=\"SearchableText\"\n                  action={{ icon: 'search' }}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.searchUsers,\n                  )}\n                  onChange={this.onChangeSearch}\n                  id=\"user-search-input\"\n                />\n              </Form.Field>\n            </Form>\n          </Segment>\n          <Form>\n            <div className=\"table\">\n              <Table padded striped attached unstackable>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>\n                      <FormattedMessage\n                        id=\"User name\"\n                        defaultMessage=\"User name\"\n                      />\n                    </Table.HeaderCell>\n                    {this.props.roles.map((role) => (\n                      <Table.HeaderCell key={role.id}>\n                        {role.title}\n                      </Table.HeaderCell>\n                    ))}\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Actions\" defaultMessage=\"Actions\" />\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body data-user=\"users\">\n                  {this.state.entries\n                    .slice(\n                      this.state.currentPage * 10,\n                      this.state.pageSize * (this.state.currentPage + 1),\n                    )\n                    .map((user) => (\n                      <RenderUsers\n                        key={user.id}\n                        onDelete={this.delete}\n                        roles={this.props.roles}\n                        user={user}\n                        updateUser={this.updateUserRole}\n                        inheritedRole={this.props.inheritedRole}\n                      />\n                    ))}\n                </Table.Body>\n              </Table>\n            </div>\n            <div className=\"contents-pagination\">\n              <Pagination\n                current={this.state.currentPage}\n                total={Math.ceil(\n                  this.state.entries?.length / this.state.pageSize,\n                )}\n                onChangePage={this.onChangePage}\n              />\n            </div>\n          </Form>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Button\n                    id=\"toolbar-save\"\n                    className=\"save\"\n                    aria-label={this.props.intl.formatMessage(messages.save)}\n                    onClick={this.updateUserRoleSubmit}\n                    loading={this.props.createRequest.loading}\n                  >\n                    <Icon\n                      name={saveSVG}\n                      className=\"circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.save)}\n                    />\n                  </Button>\n                  <Link to=\"/controlpanel\" className=\"cancel\">\n                    <Icon\n                      name={clearSVG}\n                      className=\"circled\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.cancel)}\n                    />\n                  </Link>\n                  <Button\n                    id=\"toolbar-add\"\n                    aria-label={this.props.intl.formatMessage(\n                      messages.addUserButtonTitle,\n                    )}\n                    onClick={() => {\n                      this.setState({ showAddUser: true });\n                    }}\n                    loading={this.props.createRequest.loading}\n                  >\n                    <Icon\n                      name={addUserSvg}\n                      size=\"45px\"\n                      color=\"#826A6A\"\n                      title={this.props.intl.formatMessage(\n                        messages.addUserButtonTitle,\n                      )}\n                    />\n                  </Button>\n                </>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      roles: state.roles.roles,\n      users: state.users.users,\n      groups: state.groups.groups,\n      many_users: state.controlpanels?.controlpanel?.data?.many_users,\n      many_groups: state.controlpanels?.controlpanel?.data?.many_groups,\n      description: state.description,\n      pathname: props.location.pathname,\n      deleteRequest: state.users.delete,\n      createRequest: state.users.create,\n      loadRolesRequest: state.roles,\n      inheritedRole: state.authRole.authenticatedRole,\n    }),\n    (dispatch) =>\n      bindActionCreators(\n        {\n          listRoles,\n          listUsers,\n          listGroups,\n          getControlpanel,\n          deleteUser,\n          createUser,\n          updateUser,\n          updateGroup,\n        },\n        dispatch,\n      ),\n  ),\n)(UsersControlpanel);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Do you really want to delete the user {username}?","defaultMessage":"Do you really want to delete the user {username}?"},{"id":"Users","defaultMessage":"Users"},{"id":"Note that roles set here apply directly to a user. The symbol{plone_svg}indicates a role inherited from membership in a group.","defaultMessage":"Note that roles set here apply directly to a user. The symbol{plone_svg}indicates a role inherited from membership in a group."},{"id":"User name","defaultMessage":"User name"},{"id":"Actions","defaultMessage":"Actions"}]}},"sourceType":"module","externalDependencies":[]}