{"ast":null,"code":"import _objectSpread from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { GET_CONTROLPANEL_RULES, ADD_NEW_CONTENT_RULE } from '@plone/volto/constants/ActionTypes';\nconst initialState = {\n  get: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  add: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  items: []\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Rules reducer.\n * @function rules\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function controlpanelrules() {\n  var _action$result;\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  switch (action.type) {\n    case `${GET_CONTROLPANEL_RULES}_PENDING`:\n    case `${ADD_NEW_CONTENT_RULE}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null\n        }\n      });\n    case `${ADD_NEW_CONTENT_RULE}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n    case `${GET_CONTROLPANEL_RULES}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: (_action$result = action.result) === null || _action$result === void 0 ? void 0 : _action$result.items[0],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n    case `${GET_CONTROLPANEL_RULES}_FAIL`:\n    case `${ADD_NEW_CONTENT_RULE}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_CONTROLPANEL_RULES","ADD_NEW_CONTENT_RULE","initialState","get","loaded","loading","error","add","items","getRequestKey","actionType","split","toLowerCase","controlpanelrules","state","action","type","result"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/reducers/controlPanelRules/controlPanelRules.js"],"sourcesContent":["import {\n  GET_CONTROLPANEL_RULES,\n  ADD_NEW_CONTENT_RULE,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  get: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  add: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  items: [],\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Rules reducer.\n * @function rules\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function controlpanelrules(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_CONTROLPANEL_RULES}_PENDING`:\n    case `${ADD_NEW_CONTENT_RULE}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${ADD_NEW_CONTENT_RULE}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_CONTROLPANEL_RULES}_SUCCESS`:\n      return {\n        ...state,\n        items: action.result?.items[0],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_CONTROLPANEL_RULES}_FAIL`:\n    case `${ADD_NEW_CONTENT_RULE}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":";AAAA,SACEA,sBAAsB,EACtBC,oBAAoB,QACf,oCAAoC;AAE3C,MAAMC,YAAY,GAAG;EACnBC,GAAG,EAAE;IACHC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,GAAG,EAAE;IACHH,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC;EACDE,KAAK,EAAE;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAa,CAACC,UAAU,EAAE;EACjC,OAAOA,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,iBAAiB,GAAoC;EAAA;EAAA,IAAnCC,KAAK,uEAAGZ,YAAY;EAAA,IAAEa,MAAM,uEAAG,CAAC,CAAC;EACzE,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAM,GAAEhB,sBAAuB,UAAS;IACxC,KAAM,GAAEC,oBAAqB,UAAS;MACpC,uCACKa,KAAK;QACR,CAACL,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,GAAG;UAC5BX,OAAO,EAAE,IAAI;UACbD,MAAM,EAAE,KAAK;UACbE,KAAK,EAAE;QACT;MAAC;IAEL,KAAM,GAAEL,oBAAqB,UAAS;MACpC,uCACKa,KAAK;QACR,CAACL,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,GAAG;UAC5BX,OAAO,EAAE,KAAK;UACdD,MAAM,EAAE,IAAI;UACZE,KAAK,EAAE;QACT;MAAC;IAEL,KAAM,GAAEN,sBAAuB,UAAS;MACtC,uCACKc,KAAK;QACRN,KAAK,oBAAEO,MAAM,CAACE,MAAM,mDAAb,eAAeT,KAAK,CAAC,CAAC,CAAC;QAC9B,CAACC,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,GAAG;UAC5BX,OAAO,EAAE,KAAK;UACdD,MAAM,EAAE,IAAI;UACZE,KAAK,EAAE;QACT;MAAC;IAEL,KAAM,GAAEN,sBAAuB,OAAM;IACrC,KAAM,GAAEC,oBAAqB,OAAM;MACjC,uCACKa,KAAK;QACR,CAACL,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,GAAG;UAC5BX,OAAO,EAAE,KAAK;UACdD,MAAM,EAAE,KAAK;UACbE,KAAK,EAAES,MAAM,CAACT;QAChB;MAAC;IAEL;MACE,OAAOQ,KAAK;EAAC;AAEnB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}