{"ast":null,"code":"var _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@eeacms/volto-block-toc/src/withBlockExtension.js\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n/**\n * A HOC to inject a block extension by resolving the configured extension\n */\n\nimport React from 'react';\nimport config from '@plone/volto/registry';\nexport default (WrappedComponent => props => {\n  const {\n    data\n  } = props;\n  const {\n    block_extension\n  } = data;\n  const type = data['@type'];\n  const extensions = config.blocks.blocksConfig[type].extensions || [];\n  const index = extensions.findIndex(conf => conf.id === (block_extension || 'default'));\n  if (index === -1) {\n    throw new Error(`You need to register the default extension for block types: ${type}`);\n  }\n  const selectedExtension = extensions[index];\n  return __jsx(WrappedComponent, _extends({}, props, {\n    extension: selectedExtension,\n    extensions: extensions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }));\n});","map":{"version":3,"names":["React","config","WrappedComponent","props","data","block_extension","type","extensions","blocks","blocksConfig","index","findIndex","conf","id","Error","selectedExtension"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@eeacms/volto-block-toc/src/withBlockExtension.js"],"sourcesContent":["/**\n * A HOC to inject a block extension by resolving the configured extension\n */\n\nimport React from 'react';\nimport config from '@plone/volto/registry';\n\nexport default (WrappedComponent) => (props) => {\n  const { data } = props;\n  const { block_extension } = data;\n  const type = data['@type'];\n  const extensions = config.blocks.blocksConfig[type].extensions || [];\n\n  const index = extensions.findIndex(\n    (conf) => conf.id === (block_extension || 'default'),\n  );\n\n  if (index === -1) {\n    throw new Error(\n      `You need to register the default extension for block types: ${type}`,\n    );\n  }\n\n  const selectedExtension = extensions[index];\n\n  return (\n    <WrappedComponent\n      {...props}\n      extension={selectedExtension}\n      extensions={extensions}\n    />\n  );\n};\n"],"mappings":";;;AAAA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,gBAAgBC,gBAAgB,IAAMC,KAAK,IAAK;EAC9C,MAAM;IAAEC;EAAK,CAAC,GAAGD,KAAK;EACtB,MAAM;IAAEE;EAAgB,CAAC,GAAGD,IAAI;EAChC,MAAME,IAAI,GAAGF,IAAI,CAAC,OAAO,CAAC;EAC1B,MAAMG,UAAU,GAAGN,MAAM,CAACO,MAAM,CAACC,YAAY,CAACH,IAAI,CAAC,CAACC,UAAU,IAAI,EAAE;EAEpE,MAAMG,KAAK,GAAGH,UAAU,CAACI,SAAS,CAC/BC,IAAI,IAAKA,IAAI,CAACC,EAAE,MAAMR,eAAe,IAAI,SAAS,CAAC,CACrD;EAED,IAAIK,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB,MAAM,IAAII,KAAK,CACZ,+DAA8DR,IAAK,EAAC,CACtE;EACH;EAEA,MAAMS,iBAAiB,GAAGR,UAAU,CAACG,KAAK,CAAC;EAE3C,OACE,MAAC,gBAAgB,eACXP,KAAK;IACT,SAAS,EAAEY,iBAAkB;IAC7B,UAAU,EAAER,UAAW;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACvB;AAEN,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}