{"ast":null,"code":"var _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/volto-multilingual-widget/src/MultilingualWidget.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport React, { useEffect } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Tab, Grid, Form } from 'semantic-ui-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContent } from '@plone/volto/actions';\nimport { WysiwygWidget } from '@plone/volto/components';\nconst messages = defineMessages({\n  valueForLang: {\n    \"id\": \"value_for_lang\",\n    \"defaultMessage\": \"Value for language {lang}\"\n  },\n  placeholder: {\n    \"id\": \"multilingual_text_placeholder\",\n    \"defaultMessage\": \"Type some text...\"\n  }\n});\nconst srOnlyStyles = {\n  position: 'absolute',\n  width: '1px',\n  height: '1px',\n  padding: '0',\n  margin: '-1px',\n  overflow: 'hidden',\n  clip: 'rect(0, 0, 0, 0)',\n  whiteSpace: 'nowrap',\n  border: '0'\n};\nconst MultilingualWidget = (Widget = WysiwygWidget, defaultValue = '') => ({\n  value = defaultValue,\n  id,\n  onChange,\n  required,\n  title,\n  description\n}) => {\n  const intl = useIntl();\n  const availableLanguages = useSelector(state => {\n    var _state$content, _state$content$subreq, _state$content$subreq2, _state$content$subreq3, _state$content$subreq4;\n    return (_state$content = state.content) === null || _state$content === void 0 ? void 0 : (_state$content$subreq = _state$content.subrequests) === null || _state$content$subreq === void 0 ? void 0 : (_state$content$subreq2 = _state$content$subreq.languageControlpanel) === null || _state$content$subreq2 === void 0 ? void 0 : (_state$content$subreq3 = _state$content$subreq2.data) === null || _state$content$subreq3 === void 0 ? void 0 : (_state$content$subreq4 = _state$content$subreq3.data) === null || _state$content$subreq4 === void 0 ? void 0 : _state$content$subreq4.available_languages;\n  });\n  const dispatch = useDispatch();\n  const valueObj = typeof value === 'string' ? JSON.parse(value) : value;\n  const handleChangeLangValue = lang => (fid, v) => {\n    onChange(id, JSON.stringify(_objectSpread(_objectSpread({}, valueObj), {}, {\n      [lang]: Widget === WysiwygWidget ? v.data : v\n    })));\n  };\n  useEffect(() => {\n    dispatch(getContent('/@controlpanels/language', null, 'languageControlpanel'));\n  }, [dispatch]);\n  const tabPanes = availableLanguages === null || availableLanguages === void 0 ? void 0 : availableLanguages.map(({\n    title,\n    token\n  }) => ({\n    menuItem: title,\n    render: () => {\n      var _valueObj$token, _valueObj$token2;\n      return __jsx(Tab.Pane, {\n        id: `multilingual-item-${token}-${id}`,\n        key: `multilingual-item-${token}-${id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }\n      }, __jsx(\"label\", {\n        htmlFor: `multilingual-text-${token}-${id}`,\n        style: srOnlyStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      }, intl.formatMessage(messages.valueForLang, {\n        lang: title\n      })), __jsx(Widget, {\n        id: `multilingual-text-${token}-${id}`,\n        placeholder: intl.formatMessage(messages.placeholder),\n        value: Widget === WysiwygWidget ? {\n          data: (_valueObj$token = valueObj[token]) !== null && _valueObj$token !== void 0 ? _valueObj$token : defaultValue\n        } : (_valueObj$token2 = valueObj[token]) !== null && _valueObj$token2 !== void 0 ? _valueObj$token2 : defaultValue,\n        title: title,\n        description: description,\n        onChange: handleChangeLangValue(token),\n        wrapped: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }\n      }));\n    }\n  }));\n  return __jsx(Form.Field, {\n    inline: true,\n    required: required,\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, __jsx(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, __jsx(Grid.Column, {\n    width: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"multilingual-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  }, title))), __jsx(Grid.Column, {\n    width: \"8\",\n    id: \"multilingual-item\",\n    className: \"multilingual-widget\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, availableLanguages && __jsx(Tab, {\n    panes: tabPanes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 36\n    }\n  })))));\n};\nexport default MultilingualWidget;","map":{"version":3,"names":["React","useEffect","defineMessages","useIntl","Tab","Grid","Form","useSelector","useDispatch","getContent","WysiwygWidget","messages","valueForLang","placeholder","srOnlyStyles","position","width","height","padding","margin","overflow","clip","whiteSpace","border","MultilingualWidget","Widget","defaultValue","value","id","onChange","required","title","description","intl","availableLanguages","state","content","subrequests","languageControlpanel","data","available_languages","dispatch","valueObj","JSON","parse","handleChangeLangValue","lang","fid","v","stringify","tabPanes","map","token","menuItem","render","formatMessage"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/volto-multilingual-widget/src/MultilingualWidget.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Tab, Grid, Form } from 'semantic-ui-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContent } from '@plone/volto/actions';\n\nimport { WysiwygWidget } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  valueForLang: {\n    id: 'value_for_lang',\n    defaultMessage: 'Value for language {lang}',\n  },\n  placeholder: {\n    id: 'multilingual_text_placeholder',\n    defaultMessage: 'Type some text...',\n  },\n});\n\nconst srOnlyStyles = {\n  position: 'absolute',\n  width: '1px',\n  height: '1px',\n  padding: '0',\n  margin: '-1px',\n  overflow: 'hidden',\n  clip: 'rect(0, 0, 0, 0)',\n  whiteSpace: 'nowrap',\n  border: '0',\n};\n\nconst MultilingualWidget = (Widget = WysiwygWidget, defaultValue = '') => ({\n  value = defaultValue,\n  id,\n  onChange,\n  required,\n  title,\n  description,\n}) => {\n  const intl = useIntl();\n  const availableLanguages = useSelector(\n    (state) =>\n      state.content?.subrequests?.languageControlpanel?.data?.data\n        ?.available_languages,\n  );\n  const dispatch = useDispatch();\n\n  const valueObj = typeof value === 'string' ? JSON.parse(value) : value;\n\n  const handleChangeLangValue = (lang) => (fid, v) => {\n    onChange(\n      id,\n      JSON.stringify({\n        ...valueObj,\n        [lang]: Widget === WysiwygWidget ? v.data : v,\n      }),\n    );\n  };\n\n  useEffect(() => {\n    dispatch(\n      getContent('/@controlpanels/language', null, 'languageControlpanel'),\n    );\n  }, [dispatch]);\n\n  const tabPanes = availableLanguages?.map(({ title, token }) => ({\n    menuItem: title,\n    render: () => (\n      <Tab.Pane\n        id={`multilingual-item-${token}-${id}`}\n        key={`multilingual-item-${token}-${id}`}\n      >\n        <label\n          htmlFor={`multilingual-text-${token}-${id}`}\n          style={srOnlyStyles}\n        >\n          {intl.formatMessage(messages.valueForLang, { lang: title })}\n        </label>\n\n        <Widget\n          id={`multilingual-text-${token}-${id}`}\n          placeholder={intl.formatMessage(messages.placeholder)}\n          value={\n            Widget === WysiwygWidget\n              ? { data: valueObj[token] ?? defaultValue }\n              : valueObj[token] ?? defaultValue\n          }\n          title={title}\n          description={description}\n          onChange={handleChangeLangValue(token)}\n          wrapped={false}\n        />\n      </Tab.Pane>\n    ),\n  }));\n\n  return (\n    <Form.Field inline required={required} id={id}>\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width=\"4\">\n            <div className=\"wrapper\">\n              <label htmlFor=\"multilingual-item\">{title}</label>\n            </div>\n          </Grid.Column>\n          <Grid.Column\n            width=\"8\"\n            id=\"multilingual-item\"\n            className=\"multilingual-widget\"\n          >\n            {availableLanguages && <Tab panes={tabPanes} />}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Form.Field>\n  );\n};\n\nexport default MultilingualWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"value_for_lang","defaultMessage":"Value for language {lang}"},{"id":"multilingual_text_placeholder","defaultMessage":"Type some text..."}]}},"sourceType":"module","externalDependencies":[]}