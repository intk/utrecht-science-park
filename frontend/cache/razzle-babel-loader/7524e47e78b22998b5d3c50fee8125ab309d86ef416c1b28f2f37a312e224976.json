{"ast":null,"code":"import _objectSpread from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/volto-form-block/src/components/Sidebar.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Segment, Accordion, Form, Button, Grid, Confirm, Dimmer, Loader } from 'semantic-ui-react';\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\nimport { Icon } from '@plone/volto/components';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport downloadSVG from '@plone/volto/icons/download.svg';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport { getFormData, exportCsvFormData, clearFormData } from 'volto-form-block/actions';\nimport config from '@plone/volto/registry';\nimport { BlockDataForm } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nconst messages = defineMessages({\n  exportCsv: {\n    \"id\": \"form_edit_exportCsv\",\n    \"defaultMessage\": \"Export data\"\n  },\n  clearData: {\n    \"id\": \"form_clear_data\",\n    \"defaultMessage\": \"Clear data\"\n  },\n  formDataCount: {\n    \"id\": \"form_formDataCount\",\n    \"defaultMessage\": \"{formDataCount} item(s) stored\"\n  },\n  confirmClearData: {\n    \"id\": \"form_confirmClearData\",\n    \"defaultMessage\": \"Are you sure you want to delete all saved items?\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  }\n});\nconst Sidebar = _ref => {\n  _s();\n  var _properties$Componen, _formData$result$item, _formData$result;\n  let {\n    data,\n    properties,\n    block,\n    onChangeBlock,\n    onChangeSubBlock,\n    selected = 0,\n    setSelected\n  } = _ref;\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const {\n    0: confirmOpen,\n    1: setConfirmOpen\n  } = useState(false);\n  const formData = useSelector(state => state.formData);\n  const clearFormDataState = useSelector(state => {\n    var _state$clearFormData;\n    return (_state$clearFormData = state.clearFormData) === null || _state$clearFormData === void 0 ? void 0 : _state$clearFormData.loaded;\n  });\n  useEffect(() => {\n    if (properties !== null && properties !== void 0 && properties['@id']) dispatch(getFormData(flattenToAppURL(properties['@id'])));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clearFormDataState]);\n  if (data.send_email === undefined) data.send_email = true;\n  data.subblocks && data.subblocks.forEach(subblock => {\n    subblock.field_id = subblock.id;\n  });\n  var FormSchema = config.blocks.blocksConfig.form.formSchema;\n  var FieldSchema = config.blocks.blocksConfig.form.fieldSchema;\n  return __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, __jsx(Segment.Group, {\n    raised: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, __jsx(\"header\", {\n    className: \"header pulled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Form\",\n    defaultMessage: \"Form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }))), __jsx(Segment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, __jsx(BlockDataForm, {\n    schema: FormSchema(data),\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    formData: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }), (properties === null || properties === void 0 ? void 0 : (_properties$Componen = properties['@components']) === null || _properties$Componen === void 0 ? void 0 : _properties$Componen.form_data) && __jsx(Form.Field, {\n    inline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, __jsx(Grid.Row, {\n    stretched: true,\n    centered: true,\n    style: {\n      padding: '1rem 0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, __jsx(Dimmer, {\n    active: formData === null || formData === void 0 ? void 0 : formData.loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 19\n    }\n  }, __jsx(Loader, {\n    size: \"tiny\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  })), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 19\n    }\n  }, intl.formatMessage(messages.formDataCount, {\n    formDataCount: (_formData$result$item = formData === null || formData === void 0 ? void 0 : (_formData$result = formData.result) === null || _formData$result === void 0 ? void 0 : _formData$result.items_total) !== null && _formData$result$item !== void 0 ? _formData$result$item : 0\n  }))), __jsx(Grid.Row, {\n    stretched: true,\n    centered: true,\n    columns: 2,\n    style: {\n      marginBottom: '0.5rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, __jsx(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    compact: true,\n    onClick: () => {\n      var _properties$id;\n      return dispatch(exportCsvFormData(flattenToAppURL(properties['@id']), `export-${(_properties$id = properties.id) !== null && _properties$id !== void 0 ? _properties$id : 'form'}.csv`));\n    },\n    size: \"tiny\",\n    style: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, __jsx(Icon, {\n    name: downloadSVG,\n    size: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 23\n    }\n  }), ' ', intl.formatMessage(messages.exportCsv))), __jsx(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    compact: true,\n    onClick: () => setConfirmOpen(true),\n    size: \"tiny\",\n    style: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  }, __jsx(Icon, {\n    name: deleteSVG,\n    size: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 23\n    }\n  }), ' ', intl.formatMessage(messages.clearData)), __jsx(Confirm, {\n    open: confirmOpen,\n    content: intl.formatMessage(messages.confirmClearData),\n    cancelButton: intl.formatMessage(messages.cancel),\n    onCancel: () => setConfirmOpen(false),\n    onConfirm: () => {\n      dispatch(clearFormData(flattenToAppURL(properties['@id'])));\n      setConfirmOpen(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  })))))), __jsx(Accordion, {\n    fluid: true,\n    styled: true,\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, data.subblocks && data.subblocks.map((subblock, index) => {\n    var _subblock$label;\n    return __jsx(\"div\", {\n      key: 'subblock' + index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }, __jsx(Accordion.Title, {\n      active: selected === index,\n      index: index,\n      onClick: () => setSelected(selected === index ? null : index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 19\n      }\n    }, (_subblock$label = subblock.label) !== null && _subblock$label !== void 0 ? _subblock$label : subblock.field_name, selected === index ? __jsx(Icon, {\n      name: upSVG,\n      size: \"20px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 23\n      }\n    }) : __jsx(Icon, {\n      name: downSVG,\n      size: \"20px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 23\n      }\n    })), __jsx(Accordion.Content, {\n      active: selected === index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 19\n      }\n    }, __jsx(BlockDataForm, {\n      schema: FieldSchema(subblock),\n      onChangeField: (name, value) => {\n        var update_values = {};\n        onChangeSubBlock(index, _objectSpread(_objectSpread({}, subblock), {}, {\n          [name]: value\n        }, update_values));\n      },\n      formData: subblock,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    })));\n  }))));\n};\n_s(Sidebar, \"EjSjYL7jlVtB4+KPr0aF2ha+VWI=\", false, function () {\n  return [useIntl, useDispatch, useSelector, useSelector];\n});\n_c = Sidebar;\nSidebar.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any),\n  block: PropTypes.string,\n  onChangeBlock: PropTypes.func,\n  selected: PropTypes.any,\n  setSelected: PropTypes.func\n};\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","useSelector","useDispatch","Segment","Accordion","Form","Button","Grid","Confirm","Dimmer","Loader","defineMessages","useIntl","FormattedMessage","Icon","upSVG","downSVG","downloadSVG","deleteSVG","getFormData","exportCsvFormData","clearFormData","config","BlockDataForm","flattenToAppURL","messages","exportCsv","clearData","formDataCount","confirmClearData","cancel","Sidebar","data","properties","block","onChangeBlock","onChangeSubBlock","selected","setSelected","intl","dispatch","confirmOpen","setConfirmOpen","formData","state","clearFormDataState","loaded","send_email","undefined","subblocks","forEach","subblock","field_id","id","FormSchema","blocks","blocksConfig","form","formSchema","FieldSchema","fieldSchema","value","form_data","padding","loading","formatMessage","result","items_total","marginBottom","display","alignItems","map","index","label","field_name","name","update_values","propTypes","objectOf","any","string","func"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/volto-form-block/src/components/Sidebar.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Segment,\n  Accordion,\n  Form,\n  Button,\n  Grid,\n  Confirm,\n  Dimmer,\n  Loader,\n} from 'semantic-ui-react';\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n\nimport { Icon } from '@plone/volto/components';\n\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport downloadSVG from '@plone/volto/icons/download.svg';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\n\nimport {\n  getFormData,\n  exportCsvFormData,\n  clearFormData,\n} from 'volto-form-block/actions';\n\nimport config from '@plone/volto/registry';\n\nimport { BlockDataForm } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nconst messages = defineMessages({\n  exportCsv: {\n    id: 'form_edit_exportCsv',\n    defaultMessage: 'Export data',\n  },\n  clearData: {\n    id: 'form_clear_data',\n    defaultMessage: 'Clear data',\n  },\n  formDataCount: {\n    id: 'form_formDataCount',\n    defaultMessage: '{formDataCount} item(s) stored',\n  },\n  confirmClearData: {\n    id: 'form_confirmClearData',\n    defaultMessage: 'Are you sure you want to delete all saved items?',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n});\n\nconst Sidebar = ({\n  data,\n  properties,\n  block,\n  onChangeBlock,\n  onChangeSubBlock,\n  selected = 0,\n  setSelected,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const [confirmOpen, setConfirmOpen] = useState(false);\n\n  const formData = useSelector((state) => state.formData);\n  const clearFormDataState = useSelector(\n    (state) => state.clearFormData?.loaded,\n  );\n  useEffect(() => {\n    if (properties?.['@id'])\n      dispatch(getFormData(flattenToAppURL(properties['@id'])));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clearFormDataState]);\n\n  if (data.send_email === undefined) data.send_email = true;\n\n  data.subblocks &&\n    data.subblocks.forEach((subblock) => {\n      subblock.field_id = subblock.id;\n    });\n  var FormSchema = config.blocks.blocksConfig.form.formSchema;\n  var FieldSchema = config.blocks.blocksConfig.form.fieldSchema;\n\n  return (\n    <Form>\n      <Segment.Group raised>\n        <header className=\"header pulled\">\n          <h2>\n            <FormattedMessage id=\"Form\" defaultMessage=\"Form\" />\n          </h2>\n        </header>\n        <Segment>\n          <BlockDataForm\n            schema={FormSchema(data)}\n            onChangeField={(id, value) => {\n              onChangeBlock(block, {\n                ...data,\n                [id]: value,\n              });\n            }}\n            formData={data}\n          />\n          {properties?.['@components']?.form_data && (\n            <Form.Field inline>\n              <Grid>\n                <Grid.Row stretched centered style={{ padding: '1rem 0' }}>\n                  <Dimmer active={formData?.loading}>\n                    <Loader size=\"tiny\" />\n                  </Dimmer>\n                  <p>\n                    {intl.formatMessage(messages.formDataCount, {\n                      formDataCount: formData?.result?.items_total ?? 0,\n                    })}\n                  </p>\n                </Grid.Row>\n                <Grid.Row\n                  stretched\n                  centered\n                  columns={2}\n                  style={{ marginBottom: '0.5rem' }}\n                >\n                  <Grid.Column>\n                    <Button\n                      compact\n                      onClick={() =>\n                        dispatch(\n                          exportCsvFormData(\n                            flattenToAppURL(properties['@id']),\n                            `export-${properties.id ?? 'form'}.csv`,\n                          ),\n                        )\n                      }\n                      size=\"tiny\"\n                      style={{ display: 'flex', alignItems: 'center' }}\n                    >\n                      <Icon name={downloadSVG} size=\"1.5rem\" />{' '}\n                      {intl.formatMessage(messages.exportCsv)}\n                    </Button>\n                  </Grid.Column>\n                  <Grid.Column>\n                    <Button\n                      compact\n                      onClick={() => setConfirmOpen(true)}\n                      size=\"tiny\"\n                      style={{ display: 'flex', alignItems: 'center' }}\n                    >\n                      <Icon name={deleteSVG} size=\"1.5rem\" />{' '}\n                      {intl.formatMessage(messages.clearData)}\n                    </Button>\n                    <Confirm\n                      open={confirmOpen}\n                      content={intl.formatMessage(messages.confirmClearData)}\n                      cancelButton={intl.formatMessage(messages.cancel)}\n                      onCancel={() => setConfirmOpen(false)}\n                      onConfirm={() => {\n                        dispatch(\n                          clearFormData(flattenToAppURL(properties['@id'])),\n                        );\n                        setConfirmOpen(false);\n                      }}\n                    />\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Form.Field>\n          )}\n        </Segment>\n        <Accordion fluid styled className=\"form\">\n          {data.subblocks &&\n            data.subblocks.map((subblock, index) => {\n              return (\n                <div key={'subblock' + index}>\n                  <Accordion.Title\n                    active={selected === index}\n                    index={index}\n                    onClick={() =>\n                      setSelected(selected === index ? null : index)\n                    }\n                  >\n                    {subblock.label ?? subblock.field_name}\n                    {selected === index ? (\n                      <Icon name={upSVG} size=\"20px\" />\n                    ) : (\n                      <Icon name={downSVG} size=\"20px\" />\n                    )}\n                  </Accordion.Title>\n                  <Accordion.Content active={selected === index}>\n                    <BlockDataForm\n                      schema={FieldSchema(subblock)}\n                      onChangeField={(name, value) => {\n                        var update_values = {};\n\n                        onChangeSubBlock(index, {\n                          ...subblock,\n                          [name]: value,\n                          ...update_values,\n                        });\n                      }}\n                      formData={subblock}\n                    />\n                  </Accordion.Content>\n                </div>\n              );\n            })}\n        </Accordion>\n      </Segment.Group>\n    </Form>\n  );\n};\n\nSidebar.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any),\n  block: PropTypes.string,\n  onChangeBlock: PropTypes.func,\n  selected: PropTypes.any,\n  setSelected: PropTypes.func,\n};\n\nexport default Sidebar;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"form_edit_exportCsv","defaultMessage":"Export data"},{"id":"form_clear_data","defaultMessage":"Clear data"},{"id":"form_formDataCount","defaultMessage":"{formDataCount} item(s) stored"},{"id":"form_confirmClearData","defaultMessage":"Are you sure you want to delete all saved items?"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Form","defaultMessage":"Form"}]}},"sourceType":"module","externalDependencies":[]}