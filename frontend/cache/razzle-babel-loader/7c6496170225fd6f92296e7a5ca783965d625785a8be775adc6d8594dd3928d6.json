{"ast":null,"code":"import _extends from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/extends.js\";\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/Blocks/Block/BlocksForm.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport EditBlock from './Edit';\nimport { DragDropList } from '@plone/volto/components';\nimport { getBlocks, getBlocksFieldname, applyBlockDefaults } from '@plone/volto/helpers';\nimport { addBlock, insertBlock, changeBlock, deleteBlock, moveBlock, mutateBlock, nextBlockId, previousBlockId } from '@plone/volto/helpers';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport { useDispatch } from 'react-redux';\nimport { useDetectClickOutside, useEvent } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nconst BlocksForm = props => {\n  _s();\n  const {\n    pathname,\n    onChangeField,\n    properties,\n    onChangeFormData,\n    selectedBlock,\n    multiSelected,\n    onSelectBlock,\n    allowedBlocks,\n    showRestricted,\n    title,\n    description,\n    metadata,\n    manage,\n    children,\n    isMainForm = true,\n    blocksConfig = config.blocks.blocksConfig,\n    editable = true\n  } = props;\n  const blockList = getBlocks(properties);\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const ClickOutsideListener = () => {\n    onSelectBlock(null);\n    dispatch(setSidebarTab(0));\n  };\n  const ref = useDetectClickOutside({\n    onTriggered: ClickOutsideListener,\n    triggerKeys: ['Escape'],\n    // Disabled feature for now https://github.com/plone/volto/pull/2389#issuecomment-830027413\n    disableClick: true,\n    disableKeys: !isMainForm\n  });\n  const handleKeyDown = function (e, index, block, node) {\n    let {\n      disableEnter = false,\n      disableArrowUp = false,\n      disableArrowDown = false\n    } = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const isMultipleSelection = e.shiftKey;\n    if (e.key === 'ArrowUp' && !disableArrowUp) {\n      onFocusPreviousBlock(block, node, isMultipleSelection);\n      e.preventDefault();\n    }\n    if (e.key === 'ArrowDown' && !disableArrowDown) {\n      onFocusNextBlock(block, node, isMultipleSelection);\n      e.preventDefault();\n    }\n    if (e.key === 'Enter' && !disableEnter) {\n      onSelectBlock(onAddBlock(config.settings.defaultBlockType, index + 1));\n      e.preventDefault();\n    }\n  };\n  const onFocusPreviousBlock = (currentBlock, blockNode, isMultipleSelection) => {\n    const prev = previousBlockId(properties, currentBlock);\n    if (prev === null) return;\n    blockNode.blur();\n    onSelectBlock(prev, isMultipleSelection);\n  };\n  const onFocusNextBlock = (currentBlock, blockNode, isMultipleSelection) => {\n    const next = nextBlockId(properties, currentBlock);\n    if (next === null) return;\n    blockNode.blur();\n    onSelectBlock(next, isMultipleSelection);\n  };\n  const onMutateBlock = (id, value) => {\n    const newFormData = mutateBlock(properties, id, value);\n    onChangeFormData(newFormData);\n  };\n  const onInsertBlock = (id, value, current) => {\n    const [newId, newFormData] = insertBlock(properties, id, value, current, config.experimental.addBlockButton.enabled ? 1 : 0);\n    const blocksFieldname = getBlocksFieldname(newFormData);\n    const blockData = newFormData[blocksFieldname][newId];\n    newFormData[blocksFieldname][newId] = applyBlockDefaults({\n      data: blockData,\n      intl,\n      metadata,\n      properties\n    });\n    onChangeFormData(newFormData);\n    return newId;\n  };\n  const onAddBlock = (type, index) => {\n    if (editable) {\n      const [id, newFormData] = addBlock(properties, type, index);\n      const blocksFieldname = getBlocksFieldname(newFormData);\n      const blockData = newFormData[blocksFieldname][id];\n      newFormData[blocksFieldname][id] = applyBlockDefaults({\n        data: blockData,\n        intl,\n        metadata,\n        properties\n      });\n      onChangeFormData(newFormData);\n      return id;\n    }\n  };\n  const onChangeBlock = (id, value) => {\n    const newFormData = changeBlock(properties, id, value);\n    onChangeFormData(newFormData);\n  };\n  const onDeleteBlock = (id, selectPrev) => {\n    const previous = previousBlockId(properties, id);\n    const newFormData = deleteBlock(properties, id);\n    onChangeFormData(newFormData);\n    onSelectBlock(selectPrev ? previous : null);\n  };\n  const onMoveBlock = (dragIndex, hoverIndex) => {\n    const newFormData = moveBlock(properties, dragIndex, hoverIndex);\n    onChangeFormData(newFormData);\n  };\n  const defaultBlockWrapper = (_ref, editBlock, blockProps) => {\n    let {\n      draginfo\n    } = _ref;\n    return __jsx(EditBlockWrapper, {\n      draginfo: draginfo,\n      blockProps: blockProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 5\n      }\n    }, editBlock);\n  };\n  const editBlockWrapper = children || defaultBlockWrapper;\n\n  // Remove invalid blocks on saving\n  // Note they are alreaady filtered by DragDropList, but we also want them\n  // to be removed when the user saves the page next. Otherwise the invalid\n  // blocks would linger for ever.\n  for (const [n, v] of blockList) {\n    if (!v) {\n      const newFormData = deleteBlock(properties, n);\n      onChangeFormData(newFormData);\n    }\n  }\n  useEvent('voltoClickBelowContent', () => {\n    if (!config.experimental.addBlockButton.enabled || !isMainForm) return;\n    onSelectBlock(onAddBlock(config.settings.defaultBlockType, blockList.length));\n  });\n  return __jsx(\"div\", {\n    className: \"blocks-form\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 5\n    }\n  }, __jsx(\"fieldset\", {\n    className: \"invisible\",\n    disabled: !editable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropList, {\n    childList: blockList,\n    onMoveItem: result => {\n      const {\n        source,\n        destination\n      } = result;\n      if (!destination) {\n        return;\n      }\n      const newFormData = moveBlock(properties, source.index, destination.index);\n      onChangeFormData(newFormData);\n      return true;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, dragProps => {\n    const {\n      child,\n      childId,\n      index\n    } = dragProps;\n    const blockProps = {\n      allowedBlocks,\n      showRestricted,\n      block: childId,\n      data: child,\n      handleKeyDown,\n      id: childId,\n      formTitle: title,\n      formDescription: description,\n      index,\n      manage,\n      onAddBlock,\n      onInsertBlock,\n      onChangeBlock,\n      onChangeField,\n      onChangeFormData,\n      onDeleteBlock,\n      onFocusNextBlock,\n      onFocusPreviousBlock,\n      onMoveBlock,\n      onMutateBlock,\n      onSelectBlock,\n      pathname,\n      metadata,\n      properties,\n      blocksConfig,\n      selected: selectedBlock === childId,\n      multiSelected: multiSelected === null || multiSelected === void 0 ? void 0 : multiSelected.includes(childId),\n      type: child['@type'],\n      editable,\n      showBlockChooser: selectedBlock === childId\n    };\n    return editBlockWrapper(dragProps, __jsx(EditBlock, _extends({\n      key: childId\n    }, blockProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 15\n      }\n    })), blockProps);\n  })));\n};\n_s(BlocksForm, \"LfWcnnKLv007jMSPFEdOXNLiwzU=\", false, function () {\n  return [useDispatch, useIntl, useDetectClickOutside, useEvent];\n});\n_c = BlocksForm;\nexport default BlocksForm;\nvar _c;\n$RefreshReg$(_c, \"BlocksForm\");","map":{"version":3,"names":["React","useIntl","EditBlock","DragDropList","getBlocks","getBlocksFieldname","applyBlockDefaults","addBlock","insertBlock","changeBlock","deleteBlock","moveBlock","mutateBlock","nextBlockId","previousBlockId","EditBlockWrapper","setSidebarTab","useDispatch","useDetectClickOutside","useEvent","config","BlocksForm","props","pathname","onChangeField","properties","onChangeFormData","selectedBlock","multiSelected","onSelectBlock","allowedBlocks","showRestricted","title","description","metadata","manage","children","isMainForm","blocksConfig","blocks","editable","blockList","dispatch","intl","ClickOutsideListener","ref","onTriggered","triggerKeys","disableClick","disableKeys","handleKeyDown","e","index","block","node","disableEnter","disableArrowUp","disableArrowDown","isMultipleSelection","shiftKey","key","onFocusPreviousBlock","preventDefault","onFocusNextBlock","onAddBlock","settings","defaultBlockType","currentBlock","blockNode","prev","blur","next","onMutateBlock","id","value","newFormData","onInsertBlock","current","newId","experimental","addBlockButton","enabled","blocksFieldname","blockData","data","type","onChangeBlock","onDeleteBlock","selectPrev","previous","onMoveBlock","dragIndex","hoverIndex","defaultBlockWrapper","editBlock","blockProps","draginfo","editBlockWrapper","n","v","length","result","source","destination","dragProps","child","childId","formTitle","formDescription","selected","includes","showBlockChooser"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/Blocks/Block/BlocksForm.jsx"],"sourcesContent":["import React from 'react';\nimport { useIntl } from 'react-intl';\nimport EditBlock from './Edit';\nimport { DragDropList } from '@plone/volto/components';\nimport {\n  getBlocks,\n  getBlocksFieldname,\n  applyBlockDefaults,\n} from '@plone/volto/helpers';\nimport {\n  addBlock,\n  insertBlock,\n  changeBlock,\n  deleteBlock,\n  moveBlock,\n  mutateBlock,\n  nextBlockId,\n  previousBlockId,\n} from '@plone/volto/helpers';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport { useDispatch } from 'react-redux';\nimport { useDetectClickOutside, useEvent } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst BlocksForm = (props) => {\n  const {\n    pathname,\n    onChangeField,\n    properties,\n    onChangeFormData,\n    selectedBlock,\n    multiSelected,\n    onSelectBlock,\n    allowedBlocks,\n    showRestricted,\n    title,\n    description,\n    metadata,\n    manage,\n    children,\n    isMainForm = true,\n    blocksConfig = config.blocks.blocksConfig,\n    editable = true,\n  } = props;\n\n  const blockList = getBlocks(properties);\n\n  const dispatch = useDispatch();\n  const intl = useIntl();\n\n  const ClickOutsideListener = () => {\n    onSelectBlock(null);\n    dispatch(setSidebarTab(0));\n  };\n\n  const ref = useDetectClickOutside({\n    onTriggered: ClickOutsideListener,\n    triggerKeys: ['Escape'],\n    // Disabled feature for now https://github.com/plone/volto/pull/2389#issuecomment-830027413\n    disableClick: true,\n    disableKeys: !isMainForm,\n  });\n\n  const handleKeyDown = (\n    e,\n    index,\n    block,\n    node,\n    {\n      disableEnter = false,\n      disableArrowUp = false,\n      disableArrowDown = false,\n    } = {},\n  ) => {\n    const isMultipleSelection = e.shiftKey;\n    if (e.key === 'ArrowUp' && !disableArrowUp) {\n      onFocusPreviousBlock(block, node, isMultipleSelection);\n      e.preventDefault();\n    }\n    if (e.key === 'ArrowDown' && !disableArrowDown) {\n      onFocusNextBlock(block, node, isMultipleSelection);\n      e.preventDefault();\n    }\n    if (e.key === 'Enter' && !disableEnter) {\n      onSelectBlock(onAddBlock(config.settings.defaultBlockType, index + 1));\n      e.preventDefault();\n    }\n  };\n\n  const onFocusPreviousBlock = (\n    currentBlock,\n    blockNode,\n    isMultipleSelection,\n  ) => {\n    const prev = previousBlockId(properties, currentBlock);\n    if (prev === null) return;\n\n    blockNode.blur();\n\n    onSelectBlock(prev, isMultipleSelection);\n  };\n\n  const onFocusNextBlock = (currentBlock, blockNode, isMultipleSelection) => {\n    const next = nextBlockId(properties, currentBlock);\n    if (next === null) return;\n\n    blockNode.blur();\n\n    onSelectBlock(next, isMultipleSelection);\n  };\n\n  const onMutateBlock = (id, value) => {\n    const newFormData = mutateBlock(properties, id, value);\n    onChangeFormData(newFormData);\n  };\n\n  const onInsertBlock = (id, value, current) => {\n    const [newId, newFormData] = insertBlock(\n      properties,\n      id,\n      value,\n      current,\n      config.experimental.addBlockButton.enabled ? 1 : 0,\n    );\n\n    const blocksFieldname = getBlocksFieldname(newFormData);\n    const blockData = newFormData[blocksFieldname][newId];\n    newFormData[blocksFieldname][newId] = applyBlockDefaults({\n      data: blockData,\n      intl,\n      metadata,\n      properties,\n    });\n\n    onChangeFormData(newFormData);\n    return newId;\n  };\n\n  const onAddBlock = (type, index) => {\n    if (editable) {\n      const [id, newFormData] = addBlock(properties, type, index);\n      const blocksFieldname = getBlocksFieldname(newFormData);\n      const blockData = newFormData[blocksFieldname][id];\n      newFormData[blocksFieldname][id] = applyBlockDefaults({\n        data: blockData,\n        intl,\n        metadata,\n        properties,\n      });\n      onChangeFormData(newFormData);\n      return id;\n    }\n  };\n\n  const onChangeBlock = (id, value) => {\n    const newFormData = changeBlock(properties, id, value);\n    onChangeFormData(newFormData);\n  };\n\n  const onDeleteBlock = (id, selectPrev) => {\n    const previous = previousBlockId(properties, id);\n\n    const newFormData = deleteBlock(properties, id);\n    onChangeFormData(newFormData);\n\n    onSelectBlock(selectPrev ? previous : null);\n  };\n\n  const onMoveBlock = (dragIndex, hoverIndex) => {\n    const newFormData = moveBlock(properties, dragIndex, hoverIndex);\n    onChangeFormData(newFormData);\n  };\n\n  const defaultBlockWrapper = ({ draginfo }, editBlock, blockProps) => (\n    <EditBlockWrapper draginfo={draginfo} blockProps={blockProps}>\n      {editBlock}\n    </EditBlockWrapper>\n  );\n\n  const editBlockWrapper = children || defaultBlockWrapper;\n\n  // Remove invalid blocks on saving\n  // Note they are alreaady filtered by DragDropList, but we also want them\n  // to be removed when the user saves the page next. Otherwise the invalid\n  // blocks would linger for ever.\n  for (const [n, v] of blockList) {\n    if (!v) {\n      const newFormData = deleteBlock(properties, n);\n      onChangeFormData(newFormData);\n    }\n  }\n\n  useEvent('voltoClickBelowContent', () => {\n    if (!config.experimental.addBlockButton.enabled || !isMainForm) return;\n    onSelectBlock(\n      onAddBlock(config.settings.defaultBlockType, blockList.length),\n    );\n  });\n\n  return (\n    <div className=\"blocks-form\" ref={ref}>\n      <fieldset className=\"invisible\" disabled={!editable}>\n        <DragDropList\n          childList={blockList}\n          onMoveItem={(result) => {\n            const { source, destination } = result;\n            if (!destination) {\n              return;\n            }\n            const newFormData = moveBlock(\n              properties,\n              source.index,\n              destination.index,\n            );\n            onChangeFormData(newFormData);\n            return true;\n          }}\n        >\n          {(dragProps) => {\n            const { child, childId, index } = dragProps;\n            const blockProps = {\n              allowedBlocks,\n              showRestricted,\n              block: childId,\n              data: child,\n              handleKeyDown,\n              id: childId,\n              formTitle: title,\n              formDescription: description,\n              index,\n              manage,\n              onAddBlock,\n              onInsertBlock,\n              onChangeBlock,\n              onChangeField,\n              onChangeFormData,\n              onDeleteBlock,\n              onFocusNextBlock,\n              onFocusPreviousBlock,\n              onMoveBlock,\n              onMutateBlock,\n              onSelectBlock,\n              pathname,\n              metadata,\n              properties,\n              blocksConfig,\n              selected: selectedBlock === childId,\n              multiSelected: multiSelected?.includes(childId),\n              type: child['@type'],\n              editable,\n              showBlockChooser: selectedBlock === childId,\n            };\n            return editBlockWrapper(\n              dragProps,\n              <EditBlock key={childId} {...blockProps} />,\n              blockProps,\n            );\n          }}\n        </DragDropList>\n      </fieldset>\n    </div>\n  );\n};\n\nexport default BlocksForm;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}