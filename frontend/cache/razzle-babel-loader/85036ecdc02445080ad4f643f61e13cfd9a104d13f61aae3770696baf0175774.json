{"ast":null,"code":"import _objectSpread from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@eeacms/volto-resize-helper/src/ScreenSize/ScreenSize.jsx\";\nvar __jsx = React.createElement;\n/* eslint-disable no-extend-native */\nimport React from 'react';\nimport { compose } from 'redux';\nimport cs from 'classnames';\nimport config from '@plone/volto/registry';\nimport { BodyClass } from '@plone/volto/helpers';\nimport { updateScreen } from '../actions';\nimport { getOSName, detectTouchScreen, getBrowserToolbarWidth } from '../utils';\nimport { withScreenSize } from '../hocs';\nlet timer;\nif (!Number.prototype.toPixel) {\n  Number.prototype.toPixel = function toPixel() {\n    return `${this}px`;\n  };\n}\nconst debounce = func => {\n  return event => {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(func, config.settings.resizeDebounce, event);\n  };\n};\nclass ScreenSize extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onUpdateScreen = this.onUpdateScreen.bind(this);\n    this.updateScreen = this.updateScreen.bind(this);\n    this.updateCSSVars = this.updateCSSVars.bind(this);\n    this.init = this.init.bind(this);\n  }\n  updateCSSVars() {\n    const documentElement = document.documentElement;\n    const page = {\n      height: documentElement.clientHeight,\n      width: documentElement.clientWidth,\n      scrollbarWidth: window.innerWidth - documentElement.clientWidth\n    };\n    window.requestAnimationFrame(() => {\n      documentElement.style.setProperty('--scrollbar-width', page.scrollbarWidth.toPixel());\n      documentElement.style.setProperty('--vw', `${page.width * 0.01}px`);\n      documentElement.style.setProperty('--vh', `${page.height * 0.01}px`);\n    });\n  }\n  updateScreen() {\n    var _window$screen$orient, _window$screen$orient2;\n    let initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport\n    // This containse the visual viewport sizes\n    // Note: the visual viewport is changing when zoomed in / out\n    const visualViewport = {\n      height: window.visualViewport.height,\n      width: window.visualViewport.width,\n      scale: window.visualViewport.scale,\n      offsetLeft: window.visualViewport.offsetLeft,\n      offsetTop: window.visualViewport.offsetTop,\n      pageLeft: window.visualViewport.pageLeft,\n      pageTop: window.visualViewport.pageTop\n    };\n    // https://developer.mozilla.org/en-US/docs/Glossary/layout_viewport\n    // This contains the layout viewport sizes\n    const layoutViewport = {\n      height: window.innerHeight,\n      width: window.innerWidth\n    };\n    // https://developer.mozilla.org/en-US/docs/Web/API/Screen\n    // Use this to determine screen size (or device size)\n    const screen = {\n      availHeight: window.screen.availHeight,\n      availWidth: window.screen.availWidth,\n      height: window.screen.height,\n      width: window.screen.width,\n      colorDepth: window.screen.colorDepth,\n      orientation: {\n        angle: (_window$screen$orient = window.screen.orientation) === null || _window$screen$orient === void 0 ? void 0 : _window$screen$orient.angle,\n        type: (_window$screen$orient2 = window.screen.orientation) === null || _window$screen$orient2 === void 0 ? void 0 : _window$screen$orient2.type\n      },\n      pixelDepth: window.screen.pixelDepth\n    };\n    const browserToolbarHeight = getBrowserToolbarWidth();\n    if (browserToolbarHeight <= this.props.screen.initialBrowserToolbarHeight) {\n      screen.browserToolbarHeight = browserToolbarHeight;\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement\n    // documentElement offset(Width/Height) includes padding & border. Note: this can be greater then viewport size\n    // documentElement client(Width/Height) includes padding but excludes border / margins / scrollbar. Note: this is not greater then viewport size\n    const documentElement = document.documentElement;\n    const contentElement = document.querySelector('div.content-area');\n    const page = {\n      height: documentElement.clientHeight,\n      width: documentElement.clientWidth,\n      scrollbarWidth: layoutViewport.width - documentElement.clientWidth\n    };\n    const content = {\n      width: contentElement === null || contentElement === void 0 ? void 0 : contentElement.offsetWidth,\n      offsetTop: contentElement === null || contentElement === void 0 ? void 0 : contentElement.offsetTop,\n      offsetLeft: contentElement === null || contentElement === void 0 ? void 0 : contentElement.offsetLeft\n    };\n    const newScreen = _objectSpread(_objectSpread(_objectSpread({}, initialState), screen), {}, {\n      layoutViewport,\n      page,\n      content,\n      visualViewport\n    });\n    this.props.dispatch(updateScreen(newScreen));\n  }\n  onUpdateScreen(event) {\n    this.updateCSSVars();\n    debounce(this.updateScreen)(event);\n  }\n  init() {\n    const browserToolbarHeight = getBrowserToolbarWidth();\n    this.updateCSSVars();\n    this.updateScreen({\n      os: getOSName(),\n      hasTouchScreen: detectTouchScreen(),\n      initialBrowserToolbarHeight: browserToolbarHeight,\n      browserToolbarHeight\n    });\n  }\n  componentDidMount() {\n    if (__SERVER__) return;\n    setTimeout(() => {\n      this.init();\n    }, 0);\n    window.addEventListener('resize', this.onUpdateScreen);\n  }\n  componentWillUnmount() {\n    if (__SERVER__) return;\n    window.removeEventListener('resize', this.onUpdateScreen);\n  }\n  componentDidUpdate(prevProps) {\n    var _this$props$content, _prevProps$content;\n    if (__SERVER__) return;\n    if (((_this$props$content = this.props.content) === null || _this$props$content === void 0 ? void 0 : _this$props$content['@id']) !== ((_prevProps$content = prevProps.content) === null || _prevProps$content === void 0 ? void 0 : _prevProps$content['@id'])) {\n      this.onUpdateScreen();\n    }\n  }\n  render() {\n    var _this$props$screen, _this$props$screen$pa;\n    return __jsx(BodyClass, {\n      className: cs({\n        'with-scrollbar': ((_this$props$screen = this.props.screen) === null || _this$props$screen === void 0 ? void 0 : (_this$props$screen$pa = _this$props$screen.page) === null || _this$props$screen$pa === void 0 ? void 0 : _this$props$screen$pa.scrollbarWidth) > 0\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 7\n      }\n    });\n  }\n}\nexport default compose(withScreenSize)(ScreenSize);","map":{"version":3,"names":["React","compose","cs","config","BodyClass","updateScreen","getOSName","detectTouchScreen","getBrowserToolbarWidth","withScreenSize","timer","Number","prototype","toPixel","debounce","func","event","clearTimeout","setTimeout","settings","resizeDebounce","ScreenSize","Component","constructor","props","onUpdateScreen","bind","updateCSSVars","init","documentElement","document","page","height","clientHeight","width","clientWidth","scrollbarWidth","window","innerWidth","requestAnimationFrame","style","setProperty","initialState","visualViewport","scale","offsetLeft","offsetTop","pageLeft","pageTop","layoutViewport","innerHeight","screen","availHeight","availWidth","colorDepth","orientation","angle","type","pixelDepth","browserToolbarHeight","initialBrowserToolbarHeight","contentElement","querySelector","content","offsetWidth","newScreen","dispatch","os","hasTouchScreen","componentDidMount","__SERVER__","addEventListener","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","render"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@eeacms/volto-resize-helper/src/ScreenSize/ScreenSize.jsx"],"sourcesContent":["/* eslint-disable no-extend-native */\nimport React from 'react';\nimport { compose } from 'redux';\nimport cs from 'classnames';\nimport config from '@plone/volto/registry';\nimport { BodyClass } from '@plone/volto/helpers';\nimport { updateScreen } from '../actions';\nimport { getOSName, detectTouchScreen, getBrowserToolbarWidth } from '../utils';\nimport { withScreenSize } from '../hocs';\n\nlet timer;\n\nif (!Number.prototype.toPixel) {\n  Number.prototype.toPixel = function toPixel() {\n    return `${this}px`;\n  };\n}\n\nconst debounce = (func) => {\n  return (event) => {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(func, config.settings.resizeDebounce, event);\n  };\n};\n\nclass ScreenSize extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onUpdateScreen = this.onUpdateScreen.bind(this);\n    this.updateScreen = this.updateScreen.bind(this);\n    this.updateCSSVars = this.updateCSSVars.bind(this);\n    this.init = this.init.bind(this);\n  }\n\n  updateCSSVars() {\n    const documentElement = document.documentElement;\n    const page = {\n      height: documentElement.clientHeight,\n      width: documentElement.clientWidth,\n      scrollbarWidth: window.innerWidth - documentElement.clientWidth,\n    };\n\n    window.requestAnimationFrame(() => {\n      documentElement.style.setProperty(\n        '--scrollbar-width',\n        page.scrollbarWidth.toPixel(),\n      );\n      documentElement.style.setProperty('--vw', `${page.width * 0.01}px`);\n      documentElement.style.setProperty('--vh', `${page.height * 0.01}px`);\n    });\n  }\n\n  updateScreen(initialState = {}) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport\n    // This containse the visual viewport sizes\n    // Note: the visual viewport is changing when zoomed in / out\n    const visualViewport = {\n      height: window.visualViewport.height,\n      width: window.visualViewport.width,\n      scale: window.visualViewport.scale,\n      offsetLeft: window.visualViewport.offsetLeft,\n      offsetTop: window.visualViewport.offsetTop,\n      pageLeft: window.visualViewport.pageLeft,\n      pageTop: window.visualViewport.pageTop,\n    };\n    // https://developer.mozilla.org/en-US/docs/Glossary/layout_viewport\n    // This contains the layout viewport sizes\n    const layoutViewport = {\n      height: window.innerHeight,\n      width: window.innerWidth,\n    };\n    // https://developer.mozilla.org/en-US/docs/Web/API/Screen\n    // Use this to determine screen size (or device size)\n    const screen = {\n      availHeight: window.screen.availHeight,\n      availWidth: window.screen.availWidth,\n      height: window.screen.height,\n      width: window.screen.width,\n      colorDepth: window.screen.colorDepth,\n      orientation: {\n        angle: window.screen.orientation?.angle,\n        type: window.screen.orientation?.type,\n      },\n      pixelDepth: window.screen.pixelDepth,\n    };\n    const browserToolbarHeight = getBrowserToolbarWidth();\n    if (browserToolbarHeight <= this.props.screen.initialBrowserToolbarHeight) {\n      screen.browserToolbarHeight = browserToolbarHeight;\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement\n    // documentElement offset(Width/Height) includes padding & border. Note: this can be greater then viewport size\n    // documentElement client(Width/Height) includes padding but excludes border / margins / scrollbar. Note: this is not greater then viewport size\n    const documentElement = document.documentElement;\n    const contentElement = document.querySelector('div.content-area');\n\n    const page = {\n      height: documentElement.clientHeight,\n      width: documentElement.clientWidth,\n      scrollbarWidth: layoutViewport.width - documentElement.clientWidth,\n    };\n\n    const content = {\n      width: contentElement?.offsetWidth,\n      offsetTop: contentElement?.offsetTop,\n      offsetLeft: contentElement?.offsetLeft,\n    };\n\n    const newScreen = {\n      ...initialState,\n      ...screen,\n      layoutViewport,\n      page,\n      content,\n      visualViewport,\n    };\n\n    this.props.dispatch(updateScreen(newScreen));\n  }\n\n  onUpdateScreen(event) {\n    this.updateCSSVars();\n    debounce(this.updateScreen)(event);\n  }\n\n  init() {\n    const browserToolbarHeight = getBrowserToolbarWidth();\n    this.updateCSSVars();\n    this.updateScreen({\n      os: getOSName(),\n      hasTouchScreen: detectTouchScreen(),\n      initialBrowserToolbarHeight: browserToolbarHeight,\n      browserToolbarHeight,\n    });\n  }\n\n  componentDidMount() {\n    if (__SERVER__) return;\n    setTimeout(() => {\n      this.init();\n    }, 0);\n    window.addEventListener('resize', this.onUpdateScreen);\n  }\n\n  componentWillUnmount() {\n    if (__SERVER__) return;\n    window.removeEventListener('resize', this.onUpdateScreen);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (__SERVER__) return;\n    if (this.props.content?.['@id'] !== prevProps.content?.['@id']) {\n      this.onUpdateScreen();\n    }\n  }\n\n  render() {\n    return (\n      <BodyClass\n        className={cs({\n          'with-scrollbar': this.props.screen?.page?.scrollbarWidth > 0,\n        })}\n      />\n    );\n  }\n}\n\nexport default compose(withScreenSize)(ScreenSize);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}