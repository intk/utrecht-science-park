{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/UpgradeControlPanel.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * Upgrade controlpanel container.\n * @module components/manage/Controlpanels/Upgrade\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Button, Container, Form, Message, Segment, Table } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { getSystemInformation, getUpgradeInformation, runUpgrade } from '@plone/volto/actions';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Icon, Toast, Toolbar, VersionOverview } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { toast } from 'react-toastify';\nconst messages = defineMessages({\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  upgradeInformation: {\n    \"id\": \"Upgrade Plone Site\",\n    \"defaultMessage\": \"Upgrade Plone Site\"\n  },\n  upgrade: {\n    \"id\": \"Upgrade Plone Site\",\n    \"defaultMessage\": \"Upgrade Plone Site\"\n  },\n  upgradeSuccess: {\n    \"id\": \"Your site is up to date.\",\n    \"defaultMessage\": \"Your site is up to date.\"\n  },\n  dryRunSuccess: {\n    \"id\": \"Dry run selected, transaction aborted.\",\n    \"defaultMessage\": \"Dry run selected, transaction aborted.\"\n  },\n  upgradeError: {\n    \"id\": \"There was an error with the upgrade.\",\n    \"defaultMessage\": \"There was an error with the upgrade.\"\n  }\n});\nconst UpgradeStep = ({\n  title,\n  steps\n}) => {\n  const stepTitles = steps.map(step => {\n    return step.title;\n  });\n  return __jsx(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, __jsx(Message.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, title), __jsx(Message.List, {\n    items: stepTitles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }));\n};\n\n/**\n * UpgradeControlPanel class.\n * @class UpgradeControlPanel\n * @extends Component\n */\nclass UpgradeControlPanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs DiffComponent\n   */\n  constructor(props) {\n    super(props);\n    this.runUpgrade = this.runUpgrade.bind(this);\n    this.state = {\n      isClient: false,\n      dryRun: false\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getUpgradeInformation();\n    this.props.getSystemInformation();\n    this.setState({\n      isClient: true,\n      dryRun: false\n    });\n  }\n\n  /**\n   * Run Upgrade handler\n   * @method runUpgrade\n   * @param {boolean} dryRun Id of package to install.\n   * @returns {undefined}\n   */\n  runUpgrade(dryRun) {\n    this.props.runUpgrade(dryRun).then(() => {\n      if (!dryRun) {\n        // Upgrade completed\n        this.props.getUpgradeInformation();\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: this.props.intl.formatMessage(messages.upgrade),\n          content: this.props.intl.formatMessage(messages.upgradeSuccess),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }\n        }));\n      } else {\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: this.props.intl.formatMessage(messages.upgrade),\n          content: this.props.intl.formatMessage(messages.dryRunSuccess),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }\n        }));\n      }\n    }).catch(() => {\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: this.props.intl.formatMessage(messages.upgrade),\n        content: this.props.intl.formatMessage(messages.upgradeError),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }\n      }));\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const upgradeInformation = this.props.upgradeInformation;\n    const upgradeSteps = upgradeInformation ? Object.entries(upgradeInformation.upgrade_steps) : null;\n    return upgradeInformation ? __jsx(Container, {\n      id: \"upgrade-page\",\n      className: \"controlpanel-upgrade\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.upgradeInformation),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Upgrade Plone Site\",\n      defaultMessage: \"Upgrade Plone Site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      className: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"More information about the upgrade procedure can be found in the documentation section of plone.org in the Upgrade Guide.\",\n      defaultMessage: \"More information about the upgrade procedure can be found in the documentation section of plone.org in the Upgrade Guide.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    })), __jsx(Message, {\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }\n    }, __jsx(Message.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Configuration Versions\",\n      defaultMessage: \"Configuration Versions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }\n    }))), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }\n    }, upgradeInformation.versions.fs === upgradeInformation.versions.instance ? __jsx(Message, {\n      attached: true,\n      success: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Your site is up to date.\",\n      defaultMessage: \"Your site is up to date.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    })) : __jsx(Message, {\n      attached: true,\n      warning: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"The site configuration is outdated and needs to be upgraded.\",\n      defaultMessage: \"The site configuration is outdated and needs to be upgraded.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }\n    })), __jsx(Table, {\n      celled: true,\n      padded: true,\n      columns: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }, __jsx(Table.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 15\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Current active configuration\",\n      defaultMessage: \"Current active configuration\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 21\n      }\n    })), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 19\n      }\n    }, upgradeInformation.versions.instance)), __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Latest available configuration\",\n      defaultMessage: \"Latest available configuration\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }\n    })), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 19\n      }\n    }, upgradeInformation.versions.fs))))), upgradeSteps.length > 0 && __jsx(React.Fragment, null, __jsx(Message, {\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 15\n      }\n    }, __jsx(Message.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Upgrade Steps\",\n      defaultMessage: \"Upgrade Steps\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 19\n      }\n    })), __jsx(Message.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"The following list shows which upgrade steps are going to be run. Upgrading sometimes performs a catalog/security update, which may take a long time on large sites. Be patient.\",\n      defaultMessage: \"The following list shows which upgrade steps are going to be run. Upgrading sometimes performs a catalog/security update, which may take a long time on large sites. Be patient.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 19\n      }\n    }))), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 15\n      }\n    }, __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }\n    }, _map(upgradeSteps, upgradeGroup => [__jsx(UpgradeStep, {\n      title: upgradeGroup[0],\n      steps: upgradeGroup[1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }\n    })])), __jsx(Message, {\n      negative: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Please ensure you have a backup of your site before performing the upgrade.\",\n      defaultMessage: \"Please ensure you have a backup of your site before performing the upgrade.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 19\n      }\n    })), __jsx(Form.Checkbox, {\n      onChange: (e, data) => this.setState({\n        dryRun: data.checked\n      }),\n      checked: this.state.dryRun,\n      label: \"Dry run mode\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }\n    }), __jsx(Button, {\n      \"aria-label\": this.props.intl.formatMessage({\n        id: 'Upgrade',\n        defaultMessage: 'Upgrade'\n      }),\n      onClick: () => this.runUpgrade(this.state.dryRun),\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Upgrade\",\n      defaultMessage: \"Upgrade\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 19\n      }\n    })))), this.props.upgradeReport ? __jsx(React.Fragment, null, __jsx(Message, {\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 15\n      }\n    }, __jsx(Message.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Upgrade Report\",\n      defaultMessage: \"Upgrade Report\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 19\n      }\n    }))), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 15\n      }\n    }, __jsx(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }\n    }, this.props.upgradeReport.report))) : null, __jsx(Message, {\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }\n    }, __jsx(Message.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Version Overview\",\n      defaultMessage: \"Version Overview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 15\n      }\n    }))), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }\n    }, this.props.systemInformation ? __jsx(VersionOverview, _extends({}, this.props.systemInformation, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 15\n      }\n    })) : null)), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(React.Fragment, null, __jsx(Link, {\n        to: \"/controlpanel\",\n        className: \"item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: backSVG,\n        \"aria-label\": this.props.intl.formatMessage(messages.back),\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 21\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 13\n      }\n    }))) : null;\n  }\n}\n_defineProperty(UpgradeControlPanel, \"propTypes\", {\n  getUpgradeInformation: PropTypes.func.isRequired,\n  getSystemInformation: PropTypes.func.isRequired,\n  runUpgrade: PropTypes.func.isRequired\n});\nexport default compose(injectIntl, connect((state, props) => ({\n  upgradeInformation: state.upgrade.upgradeinformation,\n  pathname: props.location.pathname,\n  systemInformation: state.controlpanels.systeminformation,\n  upgradeReport: state.upgrade.upgradereport\n}), {\n  getUpgradeInformation,\n  getSystemInformation,\n  runUpgrade\n}))(UpgradeControlPanel);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","Portal","Button","Container","Form","Message","Segment","Table","FormattedMessage","defineMessages","injectIntl","getSystemInformation","getUpgradeInformation","runUpgrade","Helmet","Icon","Toast","Toolbar","VersionOverview","backSVG","toast","messages","back","upgradeInformation","upgrade","upgradeSuccess","dryRunSuccess","upgradeError","UpgradeStep","title","steps","stepTitles","map","step","UpgradeControlPanel","constructor","props","bind","state","isClient","dryRun","componentDidMount","setState","then","success","intl","formatMessage","catch","error","render","upgradeSteps","Object","entries","upgrade_steps","versions","fs","instance","length","upgradeGroup","e","data","checked","id","defaultMessage","upgradeReport","report","systemInformation","document","getElementById","pathname","func","isRequired","upgradeinformation","location","controlpanels","systeminformation","upgradereport"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/UpgradeControlPanel.jsx"],"sourcesContent":["/**\n * Upgrade controlpanel container.\n * @module components/manage/Controlpanels/Upgrade\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport {\n  Button,\n  Container,\n  Form,\n  Message,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { map } from 'lodash';\n\nimport {\n  getSystemInformation,\n  getUpgradeInformation,\n  runUpgrade,\n} from '@plone/volto/actions';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Icon, Toast, Toolbar, VersionOverview } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { toast } from 'react-toastify';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  upgradeInformation: {\n    id: 'Upgrade Plone Site',\n    defaultMessage: 'Upgrade Plone Site',\n  },\n  upgrade: {\n    id: 'Upgrade Plone Site',\n    defaultMessage: 'Upgrade Plone Site',\n  },\n  upgradeSuccess: {\n    id: 'Your site is up to date.',\n    defaultMessage: 'Your site is up to date.',\n  },\n  dryRunSuccess: {\n    id: 'Dry run selected, transaction aborted.',\n    defaultMessage: 'Dry run selected, transaction aborted.',\n  },\n  upgradeError: {\n    id: 'There was an error with the upgrade.',\n    defaultMessage: 'There was an error with the upgrade.',\n  },\n});\n\nconst UpgradeStep = ({ title, steps }) => {\n  const stepTitles = steps.map((step) => {\n    return step.title;\n  });\n  return (\n    <Message>\n      <Message.Header>{title}</Message.Header>\n      <Message.List items={stepTitles} />\n    </Message>\n  );\n};\n\n/**\n * UpgradeControlPanel class.\n * @class UpgradeControlPanel\n * @extends Component\n */\nclass UpgradeControlPanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getUpgradeInformation: PropTypes.func.isRequired,\n    getSystemInformation: PropTypes.func.isRequired,\n    runUpgrade: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs DiffComponent\n   */\n  constructor(props) {\n    super(props);\n    this.runUpgrade = this.runUpgrade.bind(this);\n    this.state = {\n      isClient: false,\n      dryRun: false,\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getUpgradeInformation();\n    this.props.getSystemInformation();\n    this.setState({ isClient: true, dryRun: false });\n  }\n\n  /**\n   * Run Upgrade handler\n   * @method runUpgrade\n   * @param {boolean} dryRun Id of package to install.\n   * @returns {undefined}\n   */\n  runUpgrade(dryRun) {\n    this.props\n      .runUpgrade(dryRun)\n      .then(() => {\n        if (!dryRun) {\n          // Upgrade completed\n          this.props.getUpgradeInformation();\n          toast.success(\n            <Toast\n              success\n              title={this.props.intl.formatMessage(messages.upgrade)}\n              content={this.props.intl.formatMessage(messages.upgradeSuccess)}\n            />,\n          );\n        } else {\n          toast.success(\n            <Toast\n              success\n              title={this.props.intl.formatMessage(messages.upgrade)}\n              content={this.props.intl.formatMessage(messages.dryRunSuccess)}\n            />,\n          );\n        }\n      })\n      .catch(() => {\n        toast.error(\n          <Toast\n            error\n            title={this.props.intl.formatMessage(messages.upgrade)}\n            content={this.props.intl.formatMessage(messages.upgradeError)}\n          />,\n        );\n      });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const upgradeInformation = this.props.upgradeInformation;\n    const upgradeSteps = upgradeInformation\n      ? Object.entries(upgradeInformation.upgrade_steps)\n      : null;\n    return upgradeInformation ? (\n      <Container id=\"upgrade-page\" className=\"controlpanel-upgrade\">\n        <Helmet\n          title={this.props.intl.formatMessage(messages.upgradeInformation)}\n        />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"Upgrade Plone Site\"\n              defaultMessage=\"Upgrade Plone Site\"\n            />\n          </Segment>\n          <Segment className=\"secondary\">\n            <FormattedMessage\n              id=\"More information about the upgrade procedure can be found in the documentation section of plone.org in the Upgrade Guide.\"\n              defaultMessage=\"More information about the upgrade procedure can be found in the documentation section of plone.org in the Upgrade Guide.\"\n            />\n          </Segment>\n          <Message attached>\n            <Message.Header>\n              <FormattedMessage\n                id=\"Configuration Versions\"\n                defaultMessage=\"Configuration Versions\"\n              />\n            </Message.Header>\n          </Message>\n          <Segment>\n            {upgradeInformation.versions.fs ===\n            upgradeInformation.versions.instance ? (\n              <Message attached success>\n                <FormattedMessage\n                  id=\"Your site is up to date.\"\n                  defaultMessage=\"Your site is up to date.\"\n                />\n              </Message>\n            ) : (\n              <Message attached warning>\n                <FormattedMessage\n                  id=\"The site configuration is outdated and needs to be upgraded.\"\n                  defaultMessage=\"The site configuration is outdated and needs to be upgraded.\"\n                />\n              </Message>\n            )}\n            <Table celled padded columns=\"2\">\n              <Table.Body>\n                <Table.Row>\n                  <Table.Cell>\n                    <FormattedMessage\n                      id=\"Current active configuration\"\n                      defaultMessage=\"Current active configuration\"\n                    />\n                  </Table.Cell>\n                  <Table.Cell>\n                    {upgradeInformation.versions.instance}\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell>\n                    <FormattedMessage\n                      id=\"Latest available configuration\"\n                      defaultMessage=\"Latest available configuration\"\n                    />\n                  </Table.Cell>\n                  <Table.Cell>{upgradeInformation.versions.fs}</Table.Cell>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Segment>\n          {upgradeSteps.length > 0 && (\n            <>\n              <Message attached>\n                <Message.Header>\n                  <FormattedMessage\n                    id=\"Upgrade Steps\"\n                    defaultMessage=\"Upgrade Steps\"\n                  />\n                </Message.Header>\n                <Message.Content>\n                  <FormattedMessage\n                    id=\"The following list shows which upgrade steps are going to be run. Upgrading sometimes performs a catalog/security update, which may take a long time on large sites. Be patient.\"\n                    defaultMessage=\"The following list shows which upgrade steps are going to be run. Upgrading sometimes performs a catalog/security update, which may take a long time on large sites. Be patient.\"\n                  />\n                </Message.Content>\n              </Message>\n              <Segment>\n                <Container>\n                  {map(upgradeSteps, (upgradeGroup) => [\n                    <UpgradeStep\n                      title={upgradeGroup[0]}\n                      steps={upgradeGroup[1]}\n                    />,\n                  ])}\n                </Container>\n                <Message negative>\n                  <FormattedMessage\n                    id=\"Please ensure you have a backup of your site before performing the upgrade.\"\n                    defaultMessage=\"Please ensure you have a backup of your site before performing the upgrade.\"\n                  />\n                </Message>\n                <Form.Checkbox\n                  onChange={(e, data) =>\n                    this.setState({ dryRun: data.checked })\n                  }\n                  checked={this.state.dryRun}\n                  label=\"Dry run mode\"\n                />\n                <br />\n                <Button\n                  aria-label={this.props.intl.formatMessage({\n                    id: 'Upgrade',\n                    defaultMessage: 'Upgrade',\n                  })}\n                  onClick={() => this.runUpgrade(this.state.dryRun)}\n                  primary\n                >\n                  <FormattedMessage id=\"Upgrade\" defaultMessage=\"Upgrade\" />\n                </Button>\n              </Segment>\n            </>\n          )}\n          {this.props.upgradeReport ? (\n            <>\n              <Message attached>\n                <Message.Header>\n                  <FormattedMessage\n                    id=\"Upgrade Report\"\n                    defaultMessage=\"Upgrade Report\"\n                  />\n                </Message.Header>\n              </Message>\n              <Segment>\n                <pre>{this.props.upgradeReport.report}</pre>\n              </Segment>\n            </>\n          ) : null}\n          <Message attached>\n            <Message.Header>\n              <FormattedMessage\n                id=\"Version Overview\"\n                defaultMessage=\"Version Overview\"\n              />\n            </Message.Header>\n          </Message>\n          <Segment>\n            {this.props.systemInformation ? (\n              <VersionOverview {...this.props.systemInformation} />\n            ) : null}\n          </Segment>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link to=\"/controlpanel\" className=\"item\">\n                    <Icon\n                      name={backSVG}\n                      aria-label={this.props.intl.formatMessage(messages.back)}\n                      className=\"contents circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    ) : null;\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      upgradeInformation: state.upgrade.upgradeinformation,\n      pathname: props.location.pathname,\n      systemInformation: state.controlpanels.systeminformation,\n      upgradeReport: state.upgrade.upgradereport,\n    }),\n    { getUpgradeInformation, getSystemInformation, runUpgrade },\n  ),\n)(UpgradeControlPanel);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Back","defaultMessage":"Back"},{"id":"Upgrade Plone Site","defaultMessage":"Upgrade Plone Site"},{"id":"Your site is up to date.","defaultMessage":"Your site is up to date."},{"id":"Dry run selected, transaction aborted.","defaultMessage":"Dry run selected, transaction aborted."},{"id":"There was an error with the upgrade.","defaultMessage":"There was an error with the upgrade."},{"id":"More information about the upgrade procedure can be found in the documentation section of plone.org in the Upgrade Guide.","defaultMessage":"More information about the upgrade procedure can be found in the documentation section of plone.org in the Upgrade Guide."},{"id":"Configuration Versions","defaultMessage":"Configuration Versions"},{"id":"The site configuration is outdated and needs to be upgraded.","defaultMessage":"The site configuration is outdated and needs to be upgraded."},{"id":"Current active configuration","defaultMessage":"Current active configuration"},{"id":"Latest available configuration","defaultMessage":"Latest available configuration"},{"id":"Upgrade Steps","defaultMessage":"Upgrade Steps"},{"id":"The following list shows which upgrade steps are going to be run. Upgrading sometimes performs a catalog/security update, which may take a long time on large sites. Be patient.","defaultMessage":"The following list shows which upgrade steps are going to be run. Upgrading sometimes performs a catalog/security update, which may take a long time on large sites. Be patient."},{"id":"Please ensure you have a backup of your site before performing the upgrade.","defaultMessage":"Please ensure you have a backup of your site before performing the upgrade."},{"id":"Upgrade","defaultMessage":"Upgrade"},{"id":"Upgrade Report","defaultMessage":"Upgrade Report"},{"id":"Version Overview","defaultMessage":"Version Overview"}]}},"sourceType":"module","externalDependencies":[]}