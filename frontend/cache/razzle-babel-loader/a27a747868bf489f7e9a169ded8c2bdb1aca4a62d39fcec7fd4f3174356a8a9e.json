{"ast":null,"code":"import _extends from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/extends.js\";\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/Widgets/FileWidget.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\n/**\n * FileWidget component.\n * @module components/manage/Widgets/FileWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Image, Dimmer } from 'semantic-ui-react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { injectIntl } from 'react-intl';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport loadable from '@loadable/component';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { defineMessages, useIntl } from 'react-intl';\nconst imageMimetypes = ['image/png', 'image/jpeg', 'image/webp', 'image/jpg', 'image/gif', 'image/svg+xml'];\nconst Dropzone = loadable({\n  resolved: {},\n  chunkName() {\n    return \"react-dropzone\";\n  },\n  isReady(props) {\n    const key = this.resolve(props);\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n    return false;\n  },\n  importAsync: () => import( /* webpackChunkName: \"react-dropzone\" */'react-dropzone'),\n  requireAsync(props) {\n    const key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(resolved => {\n      this.resolved[key] = true;\n      return resolved;\n    });\n  },\n  requireSync(props) {\n    const id = this.resolve(props);\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n    return eval('module.require')(id);\n  },\n  resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"react-dropzone\");\n    }\n    return eval('require.resolve')(\"react-dropzone\");\n  }\n});\n_c = Dropzone;\nconst messages = defineMessages({\n  releaseDrag: {\n    \"id\": \"Drop files here ...\",\n    \"defaultMessage\": \"Drop files here ...\"\n  },\n  editFile: {\n    \"id\": \"Drop file here to replace the existing file\",\n    \"defaultMessage\": \"Drop file here to replace the existing file\"\n  },\n  fileDrag: {\n    \"id\": \"Drop file here to upload a new file\",\n    \"defaultMessage\": \"Drop file here to upload a new file\"\n  },\n  replaceFile: {\n    \"id\": \"Replace existing file\",\n    \"defaultMessage\": \"Replace existing file\"\n  },\n  addNewFile: {\n    \"id\": \"Choose a file\",\n    \"defaultMessage\": \"Choose a file\"\n  }\n});\n\n/**\n * FileWidget component class.\n * @function FileWidget\n * @returns {string} Markup of the component.\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  widget: 'file',\n * }\n * ```\n * or:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  type: 'object',\n * }\n * ```\n *\n */\nconst FileWidget = props => {\n  _s();\n  const {\n    id,\n    value,\n    onChange,\n    isDisabled\n  } = props;\n  const [fileType, setFileType] = React.useState(false);\n  const intl = useIntl();\n  React.useEffect(() => {\n    if (value && imageMimetypes.includes(value['content-type'])) {\n      setFileType(true);\n    }\n  }, [value]);\n  const imgsrc = value !== null && value !== void 0 && value.download ? `${flattenToAppURL(value === null || value === void 0 ? void 0 : value.download)}?id=${Date.now()}` : null || value !== null && value !== void 0 && value.data ? `data:${value['content-type']};${value.encoding},${value.data}` : null;\n\n  /**\n   * Drop handler\n   * @method onDrop\n   * @param {array} files File objects\n   * @returns {undefined}\n   */\n  const onDrop = files => {\n    const file = files[0];\n    readAsDataURL(file).then(data => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      onChange(id, {\n        data: fields[3],\n        encoding: fields[2],\n        'content-type': fields[1],\n        filename: file.name\n      });\n    });\n    let reader = new FileReader();\n    reader.onload = function () {\n      const fields = reader.result.match(/^data:(.*);(.*),(.*)$/);\n      if (imageMimetypes.includes(fields[1])) {\n        setFileType(true);\n        let imagePreview = document.getElementById(`field-${id}-image`);\n        imagePreview.src = reader.result;\n      } else {\n        setFileType(false);\n      }\n    };\n    reader.readAsDataURL(files[0]);\n  };\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }), __jsx(Dropzone, {\n    onDrop: onDrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, _ref => {\n    let {\n      getRootProps,\n      getInputProps,\n      isDragActive\n    } = _ref;\n    return __jsx(\"div\", _extends({\n      className: \"file-widget-dropzone\"\n    }, getRootProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }), isDragActive && __jsx(Dimmer, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 30\n      }\n    }), fileType ? __jsx(Image, {\n      className: \"image-preview\",\n      id: `field-${id}-image`,\n      size: \"small\",\n      src: imgsrc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 15\n      }\n    }) : __jsx(\"div\", {\n      className: \"dropzone-placeholder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    }, isDragActive ? __jsx(\"p\", {\n      className: \"dropzone-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 19\n      }\n    }, intl.formatMessage(messages.releaseDrag)) : value ? __jsx(\"p\", {\n      className: \"dropzone-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 19\n      }\n    }, intl.formatMessage(messages.editFile)) : __jsx(\"p\", {\n      className: \"dropzone-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 19\n      }\n    }, intl.formatMessage(messages.fileDrag))), __jsx(\"label\", {\n      className: \"label-file-widget-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, value ? intl.formatMessage(messages.replaceFile) : intl.formatMessage(messages.addNewFile)), __jsx(\"input\", _extends({}, getInputProps({\n      type: 'file',\n      style: {\n        display: 'none'\n      }\n    }), {\n      id: `field-${id}`,\n      name: id,\n      type: \"file\",\n      disabled: isDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    })));\n  }), __jsx(\"div\", {\n    className: \"field-file-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, value && value.filename, value && __jsx(Button, {\n    icon: true,\n    basic: true,\n    className: \"delete-button\",\n    \"aria-label\": \"delete file\",\n    disabled: isDisabled,\n    onClick: () => {\n      onChange(id, null);\n      setFileType(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: deleteSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }))));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_s(FileWidget, \"aNj9YhSwy7mKt6m5uGk8lc9VMKY=\", false, function () {\n  return [useIntl];\n});\n_c2 = FileWidget;\nFileWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.shape({\n    '@type': PropTypes.string,\n    title: PropTypes.string\n  }),\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nFileWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null\n};\nexport default _c3 = injectIntl(FileWidget);\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Dropzone\");\n$RefreshReg$(_c2, \"FileWidget\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["React","PropTypes","Button","Image","Dimmer","readAsDataURL","injectIntl","deleteSVG","Icon","FormFieldWrapper","loadable","flattenToAppURL","defineMessages","useIntl","imageMimetypes","Dropzone","messages","releaseDrag","editFile","fileDrag","replaceFile","addNewFile","FileWidget","props","id","value","onChange","isDisabled","fileType","setFileType","useState","intl","useEffect","includes","imgsrc","download","Date","now","data","encoding","onDrop","files","file","then","fields","match","filename","name","reader","FileReader","onload","result","imagePreview","document","getElementById","src","getRootProps","getInputProps","isDragActive","formatMessage","type","style","display","propTypes","string","isRequired","title","description","required","bool","error","arrayOf","shape","func","wrapped","defaultProps"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/Widgets/FileWidget.jsx"],"sourcesContent":["/**\n * FileWidget component.\n * @module components/manage/Widgets/FileWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Image, Dimmer } from 'semantic-ui-react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { injectIntl } from 'react-intl';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport loadable from '@loadable/component';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { defineMessages, useIntl } from 'react-intl';\n\nconst imageMimetypes = [\n  'image/png',\n  'image/jpeg',\n  'image/webp',\n  'image/jpg',\n  'image/gif',\n  'image/svg+xml',\n];\nconst Dropzone = loadable(() => import('react-dropzone'));\n\nconst messages = defineMessages({\n  releaseDrag: {\n    id: 'Drop files here ...',\n    defaultMessage: 'Drop files here ...',\n  },\n  editFile: {\n    id: 'Drop file here to replace the existing file',\n    defaultMessage: 'Drop file here to replace the existing file',\n  },\n  fileDrag: {\n    id: 'Drop file here to upload a new file',\n    defaultMessage: 'Drop file here to upload a new file',\n  },\n  replaceFile: {\n    id: 'Replace existing file',\n    defaultMessage: 'Replace existing file',\n  },\n  addNewFile: {\n    id: 'Choose a file',\n    defaultMessage: 'Choose a file',\n  },\n});\n\n/**\n * FileWidget component class.\n * @function FileWidget\n * @returns {string} Markup of the component.\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  widget: 'file',\n * }\n * ```\n * or:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  type: 'object',\n * }\n * ```\n *\n */\nconst FileWidget = (props) => {\n  const { id, value, onChange, isDisabled } = props;\n  const [fileType, setFileType] = React.useState(false);\n  const intl = useIntl();\n\n  React.useEffect(() => {\n    if (value && imageMimetypes.includes(value['content-type'])) {\n      setFileType(true);\n    }\n  }, [value]);\n\n  const imgsrc = value?.download\n    ? `${flattenToAppURL(value?.download)}?id=${Date.now()}`\n    : null || value?.data\n    ? `data:${value['content-type']};${value.encoding},${value.data}`\n    : null;\n\n  /**\n   * Drop handler\n   * @method onDrop\n   * @param {array} files File objects\n   * @returns {undefined}\n   */\n  const onDrop = (files) => {\n    const file = files[0];\n    readAsDataURL(file).then((data) => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      onChange(id, {\n        data: fields[3],\n        encoding: fields[2],\n        'content-type': fields[1],\n        filename: file.name,\n      });\n    });\n\n    let reader = new FileReader();\n    reader.onload = function () {\n      const fields = reader.result.match(/^data:(.*);(.*),(.*)$/);\n      if (imageMimetypes.includes(fields[1])) {\n        setFileType(true);\n        let imagePreview = document.getElementById(`field-${id}-image`);\n        imagePreview.src = reader.result;\n      } else {\n        setFileType(false);\n      }\n    };\n    reader.readAsDataURL(files[0]);\n  };\n\n  return (\n    <FormFieldWrapper {...props}>\n      <Dropzone onDrop={onDrop}>\n        {({ getRootProps, getInputProps, isDragActive }) => (\n          <div className=\"file-widget-dropzone\" {...getRootProps()}>\n            {isDragActive && <Dimmer active></Dimmer>}\n            {fileType ? (\n              <Image\n                className=\"image-preview\"\n                id={`field-${id}-image`}\n                size=\"small\"\n                src={imgsrc}\n              />\n            ) : (\n              <div className=\"dropzone-placeholder\">\n                {isDragActive ? (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.releaseDrag)}\n                  </p>\n                ) : value ? (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.editFile)}\n                  </p>\n                ) : (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.fileDrag)}\n                  </p>\n                )}\n              </div>\n            )}\n\n            <label className=\"label-file-widget-input\">\n              {value\n                ? intl.formatMessage(messages.replaceFile)\n                : intl.formatMessage(messages.addNewFile)}\n            </label>\n            <input\n              {...getInputProps({\n                type: 'file',\n                style: { display: 'none' },\n              })}\n              id={`field-${id}`}\n              name={id}\n              type=\"file\"\n              disabled={isDisabled}\n            />\n          </div>\n        )}\n      </Dropzone>\n      <div className=\"field-file-name\">\n        {value && value.filename}\n        {value && (\n          <Button\n            icon\n            basic\n            className=\"delete-button\"\n            aria-label=\"delete file\"\n            disabled={isDisabled}\n            onClick={() => {\n              onChange(id, null);\n              setFileType(false);\n            }}\n          >\n            <Icon name={deleteSVG} size=\"20px\" />\n          </Button>\n        )}\n      </div>\n    </FormFieldWrapper>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nFileWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.shape({\n    '@type': PropTypes.string,\n    title: PropTypes.string,\n  }),\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nFileWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n};\n\nexport default injectIntl(FileWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Drop files here ...","defaultMessage":"Drop files here ..."},{"id":"Drop file here to replace the existing file","defaultMessage":"Drop file here to replace the existing file"},{"id":"Drop file here to upload a new file","defaultMessage":"Drop file here to upload a new file"},{"id":"Replace existing file","defaultMessage":"Replace existing file"},{"id":"Choose a file","defaultMessage":"Choose a file"}]}},"sourceType":"module","externalDependencies":[]}