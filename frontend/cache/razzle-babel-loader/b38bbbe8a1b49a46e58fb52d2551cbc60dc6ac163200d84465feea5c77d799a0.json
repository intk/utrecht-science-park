{"ast":null,"code":"var _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/volto-form-block/src/components/Widget/HoneypotCaptchaWidget.jsx\";\nvar __jsx = React.createElement;\n/**\n * HoneypotCaptchaWidget component.\n * @module components/manage/Widgets/HoneypotCaptchaWidget\n */\n\nimport React, { useState, useEffect } from 'react';\nimport TextWidget from '@plone/volto/components/manage/Widgets/TextWidget';\n\n/* Style */\nimport 'volto-form-block/components/Widget/HoneypotCaptchaWidget.css';\n\n/**\n * HoneypotCaptchaWidget component class.\n * @function HoneypotCaptchaWidget\n * @returns {string} Markup of the component.\n */\n\n/* By default, captcha token is setted, and becames empty if user/bot fills the field. */\nconst HoneypotCaptchaWidget = ({\n  id,\n  title,\n  captchaToken,\n  onChangeFormData\n}) => {\n  const createToken = (id, value) => {\n    const token = {\n      id: id,\n      value: value\n    };\n    return JSON.stringify(token);\n  };\n  useEffect(() => {\n    captchaToken.current = createToken(id, new Date().toString());\n  }, [captchaToken, id]);\n  useEffect(() => {\n    onChangeFormData(id, id, '', {\n      label: id\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const {\n    0: value,\n    1: setValue\n  } = useState();\n  return __jsx(\"div\", {\n    className: \"honey-wrapper\",\n    key: 'honeypot-captcha',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, __jsx(TextWidget, {\n    id: id,\n    name: id,\n    label: title,\n    title: title,\n    onChange: (field, value) => {\n      //captchaToken.current = createToken(id, value);\n      captchaToken.current = undefined;\n      setValue(value);\n      onChangeFormData(id, field, value, {});\n    },\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }));\n};\nexport default HoneypotCaptchaWidget;","map":{"version":3,"names":["React","useState","useEffect","TextWidget","HoneypotCaptchaWidget","id","title","captchaToken","onChangeFormData","createToken","value","token","JSON","stringify","current","Date","toString","label","setValue","field","undefined"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/volto-form-block/src/components/Widget/HoneypotCaptchaWidget.jsx"],"sourcesContent":["/**\n * HoneypotCaptchaWidget component.\n * @module components/manage/Widgets/HoneypotCaptchaWidget\n */\n\nimport React, { useState, useEffect } from 'react';\nimport TextWidget from '@plone/volto/components/manage/Widgets/TextWidget';\n\n/* Style */\nimport 'volto-form-block/components/Widget/HoneypotCaptchaWidget.css';\n\n/**\n * HoneypotCaptchaWidget component class.\n * @function HoneypotCaptchaWidget\n * @returns {string} Markup of the component.\n */\n\n/* By default, captcha token is setted, and becames empty if user/bot fills the field. */\nconst HoneypotCaptchaWidget = ({\n  id,\n  title,\n  captchaToken,\n  onChangeFormData,\n}) => {\n  const createToken = (id, value) => {\n    const token = {\n      id: id,\n      value: value,\n    };\n    return JSON.stringify(token);\n  };\n\n  useEffect(() => {\n    captchaToken.current = createToken(id, new Date().toString());\n  }, [captchaToken, id]);\n\n  useEffect(() => {\n    onChangeFormData(id, id, '', { label: id });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const [value, setValue] = useState();\n  return (\n    <div className=\"honey-wrapper\" key={'honeypot-captcha'}>\n      <TextWidget\n        id={id}\n        name={id}\n        label={title}\n        title={title}\n        onChange={(field, value) => {\n          //captchaToken.current = createToken(id, value);\n          captchaToken.current = undefined;\n          setValue(value);\n          onChangeFormData(id, field, value, {});\n        }}\n        value={value}\n      />\n    </div>\n  );\n};\n\nexport default HoneypotCaptchaWidget;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,mDAAmD;;AAE1E;AACA,OAAO,8DAA8D;;AAErE;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMC,qBAAqB,GAAG,CAAC;EAC7BC,EAAE;EACFC,KAAK;EACLC,YAAY;EACZC;AACF,CAAC,KAAK;EACJ,MAAMC,WAAW,GAAG,CAACJ,EAAE,EAAEK,KAAK,KAAK;IACjC,MAAMC,KAAK,GAAG;MACZN,EAAE,EAAEA,EAAE;MACNK,KAAK,EAAEA;IACT,CAAC;IACD,OAAOE,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC;EAC9B,CAAC;EAEDT,SAAS,CAAC,MAAM;IACdK,YAAY,CAACO,OAAO,GAAGL,WAAW,CAACJ,EAAE,EAAE,IAAIU,IAAI,EAAE,CAACC,QAAQ,EAAE,CAAC;EAC/D,CAAC,EAAE,CAACT,YAAY,EAAEF,EAAE,CAAC,CAAC;EAEtBH,SAAS,CAAC,MAAM;IACdM,gBAAgB,CAACH,EAAE,EAAEA,EAAE,EAAE,EAAE,EAAE;MAAEY,KAAK,EAAEZ;IAAG,CAAC,CAAC;IAC3C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM;IAAA,GAACK,KAAK;IAAA,GAAEQ;EAAQ,IAAIjB,QAAQ,EAAE;EACpC,OACE;IAAK,SAAS,EAAC,eAAe;IAAC,GAAG,EAAE,kBAAmB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACrD,MAAC,UAAU;IACT,EAAE,EAAEI,EAAG;IACP,IAAI,EAAEA,EAAG;IACT,KAAK,EAAEC,KAAM;IACb,KAAK,EAAEA,KAAM;IACb,QAAQ,EAAE,CAACa,KAAK,EAAET,KAAK,KAAK;MAC1B;MACAH,YAAY,CAACO,OAAO,GAAGM,SAAS;MAChCF,QAAQ,CAACR,KAAK,CAAC;MACfF,gBAAgB,CAACH,EAAE,EAAEc,KAAK,EAAET,KAAK,EAAE,CAAC,CAAC,CAAC;IACxC,CAAE;IACF,KAAK,EAAEA,KAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACb,CACE;AAEV,CAAC;AAED,eAAeN,qBAAqB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}