{"ast":null,"code":"var _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/volto-form-block/src/components/View.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport React, { useState, useEffect, useReducer, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useIntl, defineMessages } from 'react-intl';\nimport { submitForm } from 'volto-form-block/actions';\nimport { getFieldName } from 'volto-form-block/components/utils';\nimport FormView from 'volto-form-block/components/FormView';\nimport { formatDate } from '@plone/volto/helpers/Utils/Date';\nimport config from '@plone/volto/registry';\nimport { Captcha } from 'volto-form-block/components/Widget';\nconst messages = defineMessages({\n  formSubmitted: {\n    \"id\": \"formSubmitted\",\n    \"defaultMessage\": \"Form successfully submitted\"\n  }\n});\nconst initialState = {\n  loading: false,\n  error: null,\n  result: null\n};\nconst FORM_STATES = {\n  normal: 'normal',\n  loading: 'loading',\n  error: 'error',\n  success: 'success'\n};\nconst formStateReducer = (state, action) => {\n  switch (action.type) {\n    case FORM_STATES.normal:\n      return initialState;\n    case FORM_STATES.loading:\n      return {\n        loading: true,\n        error: null,\n        result: null\n      };\n    case FORM_STATES.error:\n      return {\n        loading: false,\n        error: action.error,\n        result: null\n      };\n    case FORM_STATES.success:\n      return {\n        loading: false,\n        error: null,\n        result: action.result\n      };\n    default:\n      return initialState;\n  }\n};\nconst getInitialData = data => _objectSpread({}, data.reduce((acc, field) => _objectSpread(_objectSpread({}, acc), {}, {\n  [getFieldName(field.label, field.id)]: field\n}), {}));\n\n/**\n * Form view\n * @class View\n */\nconst View = ({\n  data,\n  id,\n  path\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const {\n    static_fields = []\n  } = data;\n  const {\n    0: formData,\n    1: setFormData\n  } = useReducer((state, action) => {\n    if (action.reset) {\n      return getInitialData(static_fields);\n    }\n    return _objectSpread(_objectSpread({}, state), {}, {\n      [action.field]: action.value\n    });\n  }, getInitialData(static_fields));\n  const {\n    0: formState,\n    1: setFormState\n  } = useReducer(formStateReducer, initialState);\n  const {\n    0: formErrors,\n    1: setFormErrors\n  } = useState([]);\n  const submitResults = useSelector(state => state.submitForm);\n  const captchaToken = useRef();\n  const onChangeFormData = (field_id, field, value, extras) => {\n    setFormData({\n      field,\n      value: _objectSpread({\n        field_id,\n        value\n      }, extras)\n    });\n  };\n  useEffect(() => {\n    if (formErrors.length > 0) {\n      isValidForm();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [formData]);\n  const isValidForm = () => {\n    const v = [];\n    data.subblocks.forEach((subblock, index) => {\n      var _config$blocks$blocks, _config$blocks$blocks2, _config$blocks$blocks3, _formData$name, _formData$name2, _formData$name2$value, _formData$name$value, _formData$name3;\n      const name = getFieldName(subblock.label, subblock.id);\n      const fieldType = subblock.field_type;\n      const additionalField = (_config$blocks$blocks = (_config$blocks$blocks2 = config.blocks.blocksConfig.form.additionalFields) === null || _config$blocks$blocks2 === void 0 ? void 0 : (_config$blocks$blocks3 = _config$blocks$blocks2.filter(f => f.id === fieldType && f.isValid !== undefined)) === null || _config$blocks$blocks3 === void 0 ? void 0 : _config$blocks$blocks3[0]) !== null && _config$blocks$blocks !== void 0 ? _config$blocks$blocks : null;\n      if (subblock.required && additionalField && !(additionalField !== null && additionalField !== void 0 && additionalField.isValid(formData, name))) {\n        v.push(name);\n      } else if (subblock.required && fieldType === 'checkbox' && !((_formData$name = formData[name]) !== null && _formData$name !== void 0 && _formData$name.value)) {\n        v.push(name);\n      } else if (subblock.required && (!formData[name] || ((_formData$name2 = formData[name]) === null || _formData$name2 === void 0 ? void 0 : (_formData$name2$value = _formData$name2.value) === null || _formData$name2$value === void 0 ? void 0 : _formData$name2$value.length) === 0 || JSON.stringify((_formData$name$value = (_formData$name3 = formData[name]) === null || _formData$name3 === void 0 ? void 0 : _formData$name3.value) !== null && _formData$name$value !== void 0 ? _formData$name$value : {}) === '{}')) {\n        v.push(name);\n      }\n    });\n    if (data.captcha && !captchaToken.current) {\n      v.push('captcha');\n    }\n    setFormErrors(v);\n    return v.length === 0;\n  };\n  const submit = e => {\n    e.preventDefault();\n    captcha.verify().then(() => {\n      if (isValidForm()) {\n        let attachments = {};\n        let captcha = {\n          provider: data.captcha,\n          token: captchaToken.current\n        };\n        if (data.captcha === 'honeypot') {\n          var _formData$data$captch, _formData$data$captch2;\n          captcha.value = (_formData$data$captch = (_formData$data$captch2 = formData[data.captcha_props.id]) === null || _formData$data$captch2 === void 0 ? void 0 : _formData$data$captch2.value) !== null && _formData$data$captch !== void 0 ? _formData$data$captch : '';\n        }\n        let formattedFormData = _objectSpread({}, formData);\n        data.subblocks.forEach(subblock => {\n          var _formattedFormData$na;\n          let name = getFieldName(subblock.label, subblock.id);\n          if ((_formattedFormData$na = formattedFormData[name]) !== null && _formattedFormData$na !== void 0 && _formattedFormData$na.value) {\n            formattedFormData[name].field_id = subblock.field_id;\n            const isAttachment = subblock.field_type === 'attachment';\n            const isDate = subblock.field_type === 'date';\n            if (isAttachment) {\n              attachments[name] = formattedFormData[name].value;\n              delete formattedFormData[name];\n            }\n            if (isDate) {\n              formattedFormData[name].value = formatDate({\n                date: formattedFormData[name].value,\n                format: 'DD-MM-YYYY',\n                locale: intl.locale\n              });\n            }\n          }\n        });\n        dispatch(submitForm(path, id, Object.keys(formattedFormData).map(name => _objectSpread({}, formattedFormData[name])), attachments, captcha));\n        setFormState({\n          type: FORM_STATES.loading\n        });\n      } else {\n        setFormState({\n          type: FORM_STATES.error\n        });\n      }\n    }).catch(() => {\n      setFormState({\n        type: FORM_STATES.error\n      });\n    });\n  };\n  const resetFormState = () => {\n    setFormData({\n      reset: true\n    });\n    setFormState({\n      type: FORM_STATES.normal\n    });\n  };\n  const resetFormOnError = () => {\n    setFormState({\n      type: FORM_STATES.normal\n    });\n  };\n  const captcha = new Captcha({\n    captchaToken,\n    captcha: data.captcha,\n    captcha_props: data.captcha_props,\n    onChangeFormData\n  });\n  const formid = `form-${id}`;\n  useEffect(() => {\n    if (submitResults !== null && submitResults !== void 0 && submitResults.loaded) {\n      setFormState({\n        type: FORM_STATES.success,\n        result: intl.formatMessage(messages.formSubmitted)\n      });\n      captcha.reset();\n      const formItem = document.getElementById(formid);\n      if (formItem !== null) {\n        const formItemPosition = formItem.getBoundingClientRect();\n        formItemPosition !== null && window.scrollTo({\n          top: formItemPosition.x,\n          left: formItemPosition.y,\n          behavior: 'smooth'\n        });\n      }\n    } else if (submitResults !== null && submitResults !== void 0 && submitResults.error) {\n      var _JSON$parse, _submitResults$error$, _submitResults$error$2;\n      let errorDescription = `${(_JSON$parse = JSON.parse((_submitResults$error$ = (_submitResults$error$2 = submitResults.error.response) === null || _submitResults$error$2 === void 0 ? void 0 : _submitResults$error$2.text) !== null && _submitResults$error$ !== void 0 ? _submitResults$error$ : '{}')) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.message}`;\n      setFormState({\n        type: FORM_STATES.error,\n        error: errorDescription\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [submitResults]);\n  useEffect(() => {\n    resetFormState();\n  }, []);\n  return __jsx(FormView, {\n    id: formid,\n    formState: formState,\n    formErrors: formErrors,\n    formData: formData,\n    captcha: captcha,\n    onChangeFormData: onChangeFormData,\n    data: data,\n    onSubmit: submit,\n    resetFormState: resetFormState,\n    resetFormOnError: resetFormOnError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 5\n    }\n  });\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default View;","map":{"version":3,"names":["React","useState","useEffect","useReducer","useRef","useSelector","useDispatch","PropTypes","useIntl","defineMessages","submitForm","getFieldName","FormView","formatDate","config","Captcha","messages","formSubmitted","initialState","loading","error","result","FORM_STATES","normal","success","formStateReducer","state","action","type","getInitialData","data","reduce","acc","field","label","id","View","path","intl","dispatch","static_fields","formData","setFormData","reset","value","formState","setFormState","formErrors","setFormErrors","submitResults","captchaToken","onChangeFormData","field_id","extras","length","isValidForm","v","subblocks","forEach","subblock","index","name","fieldType","field_type","additionalField","blocks","blocksConfig","form","additionalFields","filter","f","isValid","undefined","required","push","JSON","stringify","captcha","current","submit","e","preventDefault","verify","then","attachments","provider","token","captcha_props","formattedFormData","isAttachment","isDate","date","format","locale","Object","keys","map","catch","resetFormState","resetFormOnError","formid","loaded","formatMessage","formItem","document","getElementById","formItemPosition","getBoundingClientRect","window","scrollTo","top","x","left","y","behavior","errorDescription","parse","response","text","message","propTypes","objectOf","any","isRequired"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/volto-form-block/src/components/View.jsx"],"sourcesContent":["import React, { useState, useEffect, useReducer, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useIntl, defineMessages } from 'react-intl';\nimport { submitForm } from 'volto-form-block/actions';\nimport { getFieldName } from 'volto-form-block/components/utils';\nimport FormView from 'volto-form-block/components/FormView';\nimport { formatDate } from '@plone/volto/helpers/Utils/Date';\nimport config from '@plone/volto/registry';\nimport { Captcha } from 'volto-form-block/components/Widget';\n\nconst messages = defineMessages({\n  formSubmitted: {\n    id: 'formSubmitted',\n    defaultMessage: 'Form successfully submitted',\n  },\n});\n\nconst initialState = {\n  loading: false,\n  error: null,\n  result: null,\n};\n\nconst FORM_STATES = {\n  normal: 'normal',\n  loading: 'loading',\n  error: 'error',\n  success: 'success',\n};\n\nconst formStateReducer = (state, action) => {\n  switch (action.type) {\n    case FORM_STATES.normal:\n      return initialState;\n\n    case FORM_STATES.loading:\n      return { loading: true, error: null, result: null };\n\n    case FORM_STATES.error:\n      return { loading: false, error: action.error, result: null };\n\n    case FORM_STATES.success:\n      return { loading: false, error: null, result: action.result };\n\n    default:\n      return initialState;\n  }\n};\n\nconst getInitialData = (data) => ({\n  ...data.reduce(\n    (acc, field) => ({ ...acc, [getFieldName(field.label, field.id)]: field }),\n    {},\n  ),\n});\n\n/**\n * Form view\n * @class View\n */\nconst View = ({ data, id, path }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const { static_fields = [] } = data;\n\n  const [formData, setFormData] = useReducer((state, action) => {\n    if (action.reset) {\n      return getInitialData(static_fields);\n    }\n\n    return {\n      ...state,\n      [action.field]: action.value,\n    };\n  }, getInitialData(static_fields));\n\n  const [formState, setFormState] = useReducer(formStateReducer, initialState);\n  const [formErrors, setFormErrors] = useState([]);\n  const submitResults = useSelector((state) => state.submitForm);\n  const captchaToken = useRef();\n\n  const onChangeFormData = (field_id, field, value, extras) => {\n    setFormData({ field, value: { field_id, value, ...extras } });\n  };\n\n  useEffect(() => {\n    if (formErrors.length > 0) {\n      isValidForm();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [formData]);\n\n  const isValidForm = () => {\n    const v = [];\n    data.subblocks.forEach((subblock, index) => {\n      const name = getFieldName(subblock.label, subblock.id);\n      const fieldType = subblock.field_type;\n      const additionalField =\n        config.blocks.blocksConfig.form.additionalFields?.filter(\n          (f) => f.id === fieldType && f.isValid !== undefined,\n        )?.[0] ?? null;\n      if (\n        subblock.required &&\n        additionalField &&\n        !additionalField?.isValid(formData, name)\n      ) {\n        v.push(name);\n      } else if (\n        subblock.required &&\n        fieldType === 'checkbox' &&\n        !formData[name]?.value\n      ) {\n        v.push(name);\n      } else if (\n        subblock.required &&\n        (!formData[name] ||\n          formData[name]?.value?.length === 0 ||\n          JSON.stringify(formData[name]?.value ?? {}) === '{}')\n      ) {\n        v.push(name);\n      }\n    });\n\n    if (data.captcha && !captchaToken.current) {\n      v.push('captcha');\n    }\n\n    setFormErrors(v);\n    return v.length === 0;\n  };\n\n  const submit = (e) => {\n    e.preventDefault();\n    captcha\n      .verify()\n      .then(() => {\n        if (isValidForm()) {\n          let attachments = {};\n          let captcha = {\n            provider: data.captcha,\n            token: captchaToken.current,\n          };\n          if (data.captcha === 'honeypot') {\n            captcha.value = formData[data.captcha_props.id]?.value ?? '';\n          }\n\n          let formattedFormData = { ...formData };\n          data.subblocks.forEach((subblock) => {\n            let name = getFieldName(subblock.label, subblock.id);\n            if (formattedFormData[name]?.value) {\n              formattedFormData[name].field_id = subblock.field_id;\n              const isAttachment = subblock.field_type === 'attachment';\n              const isDate = subblock.field_type === 'date';\n\n              if (isAttachment) {\n                attachments[name] = formattedFormData[name].value;\n                delete formattedFormData[name];\n              }\n\n              if (isDate) {\n                formattedFormData[name].value = formatDate({\n                  date: formattedFormData[name].value,\n                  format: 'DD-MM-YYYY',\n                  locale: intl.locale,\n                });\n              }\n            }\n          });\n          dispatch(\n            submitForm(\n              path,\n              id,\n              Object.keys(formattedFormData).map((name) => ({\n                ...formattedFormData[name],\n              })),\n              attachments,\n              captcha,\n            ),\n          );\n          setFormState({ type: FORM_STATES.loading });\n        } else {\n          setFormState({ type: FORM_STATES.error });\n        }\n      })\n      .catch(() => {\n        setFormState({ type: FORM_STATES.error });\n      });\n  };\n\n  const resetFormState = () => {\n    setFormData({ reset: true });\n    setFormState({ type: FORM_STATES.normal });\n  };\n\n  const resetFormOnError = () => {\n    setFormState({ type: FORM_STATES.normal });\n  };\n\n  const captcha = new Captcha({\n    captchaToken,\n    captcha: data.captcha,\n    captcha_props: data.captcha_props,\n    onChangeFormData,\n  });\n\n  const formid = `form-${id}`;\n\n  useEffect(() => {\n    if (submitResults?.loaded) {\n      setFormState({\n        type: FORM_STATES.success,\n        result: intl.formatMessage(messages.formSubmitted),\n      });\n      captcha.reset();\n      const formItem = document.getElementById(formid);\n      if (formItem !== null) {\n        const formItemPosition = formItem.getBoundingClientRect();\n        formItemPosition !== null &&\n          window.scrollTo({\n            top: formItemPosition.x,\n            left: formItemPosition.y,\n            behavior: 'smooth',\n          });\n      }\n    } else if (submitResults?.error) {\n      let errorDescription = `${\n        JSON.parse(submitResults.error.response?.text ?? '{}')?.message\n      }`;\n\n      setFormState({ type: FORM_STATES.error, error: errorDescription });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [submitResults]);\n\n  useEffect(() => {\n    resetFormState();\n  }, []);\n\n  return (\n    <FormView\n      id={formid}\n      formState={formState}\n      formErrors={formErrors}\n      formData={formData}\n      captcha={captcha}\n      onChangeFormData={onChangeFormData}\n      data={data}\n      onSubmit={submit}\n      resetFormState={resetFormState}\n      resetFormOnError={resetFormOnError}\n    />\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"formSubmitted","defaultMessage":"Form successfully submitted"}]}},"sourceType":"module","externalDependencies":[]}