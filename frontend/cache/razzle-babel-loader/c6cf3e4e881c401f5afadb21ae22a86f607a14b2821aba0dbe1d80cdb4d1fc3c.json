{"ast":null,"code":"import _objectSpread from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _extends from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectDestructuringEmpty from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js\";\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/helpers/Extensions/withBlockSchemaEnhancer.js\",\n  _this = this;\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\nimport { useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { cloneDeepSchema } from '@plone/volto/helpers/Utils/Utils';\nconst messages = defineMessages({\n  variation: {\n    \"id\": \"Variation\",\n    \"defaultMessage\": \"Variation\"\n  },\n  styling: {\n    \"id\": \"Styling\",\n    \"defaultMessage\": \"Styling\"\n  }\n});\n\n/**\n * Sets the field name as first field in schema\n */\nfunction _addField(schema, name) {\n  if (schema.fieldsets[0].fields.indexOf(name) === -1) {\n    schema.fieldsets[0].fields.unshift(name);\n  }\n}\n\n/**\n * Gets the blocksConfig from the props or from the global config object\n */\nfunction getBlocksConfig(props) {\n  const {\n    blocks\n  } = config;\n  if (props.blocksConfig) {\n    return props.blocksConfig;\n  }\n  return blocks === null || blocks === void 0 ? void 0 : blocks.blocksConfig;\n}\n\n/**\n * Utility function that adds the Select dropdown field to a schema\n */\nexport const addExtensionFieldToSchema = _ref => {\n  let {\n    schema,\n    name,\n    items,\n    intl,\n    title,\n    description,\n    insertFieldToOrder = _addField\n  } = _ref;\n  const _ = intl.formatMessage;\n  insertFieldToOrder(schema, name);\n  const hasDefaultExtension = (items === null || items === void 0 ? void 0 : items.findIndex(_ref2 => {\n    let {\n      isDefault\n    } = _ref2;\n    return isDefault;\n  })) > -1;\n  if (!hasDefaultExtension) {\n    // eslint-disable-next-line\n    console.warn('You should provide a default extension in extension:', name);\n  }\n  schema.properties[name] = {\n    title: _(title),\n    choices: items === null || items === void 0 ? void 0 : items.map(_ref3 => {\n      let {\n        id,\n        title\n      } = _ref3;\n      return [id, _({\n        id: title,\n        defaultMessage: title\n      })];\n    }),\n    noValueOption: false,\n    default: hasDefaultExtension ? items === null || items === void 0 ? void 0 : items.find(item => item.isDefault).id : null\n  };\n  return schema;\n};\n\n/**\n * A generic HOC that provides \"schema enhancer functionality\" for any custom\n * block extension.\n *\n * This enables blocks to have additional \"variations\", beyond the usual\n * `variations` field. This function is not directly used by Volto.\n *\n * To be used with a block configuration like:\n *\n * ```\n *  {\n *    id: 'someBlockId',\n *    extensions: {\n *      '<someExtensionName>': {\n *        items: [\n *          {\n *            id: 'selectFacet',\n *            title: 'Select',\n *            view: SelectFacet,\n *            isDefault: true,\n *          },\n *          {\n *            id: 'checkboxFacet',\n *            title: 'Checkbox',\n *            view: CheckboxFacet,\n *            isDefault: false,\n *          },\n *        ]\n *      }\n *     }\n *  }\n * ```\n */\nexport const withBlockSchemaEnhancer = function (FormComponent) {\n  var _s = $RefreshSig$();\n  let extensionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'vendor';\n  let insertFieldToOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _addField;\n  return _s(_ref4 => {\n    var _blocksConfig$blockTy, _blocksConfig$blockTy2, _extensionConfig$item, _extensionConfig$item2, _activeItem, _blocksConfig$blockTy3, _extensionConfig$item3;\n    _s();\n    let props = Object.assign({}, (_objectDestructuringEmpty(_ref4), _ref4));\n    const {\n      formData,\n      schema: originalSchema\n    } = props;\n    const intl = useIntl();\n    const blocksConfig = getBlocksConfig(props);\n    const blockType = formData['@type'];\n    const extensionConfig = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy = blocksConfig[blockType]) === null || _blocksConfig$blockTy === void 0 ? void 0 : (_blocksConfig$blockTy2 = _blocksConfig$blockTy.extensions) === null || _blocksConfig$blockTy2 === void 0 ? void 0 : _blocksConfig$blockTy2[extensionName];\n    if (!extensionConfig) return __jsx(FormComponent, _extends({}, props, {\n      schema: originalSchema,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 12\n      }\n    }));\n    const activeItemName = formData === null || formData === void 0 ? void 0 : formData[extensionName];\n    let activeItem = (_extensionConfig$item = extensionConfig.items) === null || _extensionConfig$item === void 0 ? void 0 : _extensionConfig$item.find(item => item.id === activeItemName);\n    if (!activeItem) activeItem = (_extensionConfig$item2 = extensionConfig.items) === null || _extensionConfig$item2 === void 0 ? void 0 : _extensionConfig$item2.find(item => item.isDefault);\n    const schemaEnhancer =\n    // For the main \"variation\" of blocks, allow simply passing a\n    // schemaEnhancer in the block configuration\n    ((_activeItem = activeItem) === null || _activeItem === void 0 ? void 0 : _activeItem['schemaEnhancer']) || extensionName === 'variation' && (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy3 = blocksConfig[blockType]) === null || _blocksConfig$blockTy3 === void 0 ? void 0 : _blocksConfig$blockTy3.schemaEnhancer);\n    let schema = schemaEnhancer ? schemaEnhancer({\n      schema: cloneDeepSchema(originalSchema),\n      formData,\n      intl\n    }) : cloneDeepSchema(originalSchema);\n    const {\n      title = messages.variation,\n      description\n    } = extensionConfig;\n    if (((_extensionConfig$item3 = extensionConfig.items) === null || _extensionConfig$item3 === void 0 ? void 0 : _extensionConfig$item3.length) > 1) {\n      addExtensionFieldToSchema({\n        schema,\n        name: extensionName,\n        items: extensionConfig.items || [],\n        intl,\n        title,\n        description,\n        insertFieldToOrder\n      });\n    }\n    return __jsx(FormComponent, _extends({}, props, {\n      schema: schema,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 10\n      }\n    }));\n  }, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n    return [useIntl];\n  });\n};\n\n/**\n * Apply block variation schema enhancers to the provided schema, using block\n * information from the provided block data (as `formData`).\n *\n * Blocks can be enhanced with variations declared like:\n *\n * ```\n *  {\n *    id: 'searchBlock',\n *    schemaEnhancer: ({schema, formData, intl}) => schema,\n *    variations: [\n *      {\n *        id: 'facetsRightSide',\n *        title: 'Facets on right side',\n *        view: RightColumnFacets,\n *        isDefault: true,\n *      },\n *      {\n *        id: 'facetsLeftSide',\n *        title: 'Facets on left side',\n *        view: LeftColumnFacets,\n *        isDefault: false,\n *        schemaEnhancer: ({schema, formData, intl}) => schema,\n *      },\n *    ],\n *\n * ```\n * Notice that each variation can declare an option schema enhancer, and each\n * block supports an optional `schemaEnhancer` function.\n */\nexport const applySchemaEnhancer = _ref5 => {\n  var _blocksConfig$blockTy4, _activeItem2, _blocksConfig$blockTy6;\n  let {\n    schema: originalSchema,\n    formData,\n    intl,\n    blocksConfig = config.blocks.blocksConfig\n  } = _ref5;\n  let schema, schemaEnhancer;\n  const blockType = formData['@type'];\n  const variations = (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy4 = blocksConfig[blockType]) === null || _blocksConfig$blockTy4 === void 0 ? void 0 : _blocksConfig$blockTy4.variations) || [];\n  if (variations.length === 0) {\n    var _blocksConfig$blockTy5;\n    // No variations present but we finalize the schema with a schemaEnhancer\n    // in the block config (if present)\n    schemaEnhancer = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy5 = blocksConfig[blockType]) === null || _blocksConfig$blockTy5 === void 0 ? void 0 : _blocksConfig$blockTy5.schemaEnhancer;\n    if (schemaEnhancer) schema = schemaEnhancer({\n      schema: cloneDeepSchema(originalSchema),\n      formData,\n      intl\n    });\n    return schema || originalSchema;\n  }\n  const activeItemName = formData === null || formData === void 0 ? void 0 : formData.variation;\n  let activeItem = variations.find(item => item.id === activeItemName);\n  if (!activeItem) activeItem = variations.find(item => item.isDefault);\n  schemaEnhancer = (_activeItem2 = activeItem) === null || _activeItem2 === void 0 ? void 0 : _activeItem2['schemaEnhancer'];\n  schema = schemaEnhancer ? schemaEnhancer({\n    schema: cloneDeepSchema(originalSchema),\n    formData,\n    intl\n  }) : cloneDeepSchema(originalSchema);\n\n  // Finalize the schema with a schemaEnhancer in the block config;\n  schemaEnhancer = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy6 = blocksConfig[blockType]) === null || _blocksConfig$blockTy6 === void 0 ? void 0 : _blocksConfig$blockTy6.schemaEnhancer;\n  if (schemaEnhancer) schema = schemaEnhancer({\n    schema,\n    formData,\n    intl\n  });\n  return schema || originalSchema;\n};\n\n/**\n * A HOC that enhances the incoming schema prop with block variations support\n * by:\n *\n * - applies the selected variation's schema enhancer\n * - adds the variation selection input (as a choice widget)\n */\nexport const withVariationSchemaEnhancer = FormComponent => {\n  var _s2 = $RefreshSig$();\n  return _s2(props => {\n    var _blocksConfig$blockTy7;\n    _s2();\n    const {\n      formData,\n      schema: originalSchema\n    } = props;\n    const intl = useIntl();\n    const blocksConfig = getBlocksConfig(props);\n    const blockType = formData['@type'];\n    const variations = ((_blocksConfig$blockTy7 = blocksConfig[blockType]) === null || _blocksConfig$blockTy7 === void 0 ? void 0 : _blocksConfig$blockTy7.variations) || [];\n    let schema = applySchemaEnhancer({\n      schema: originalSchema,\n      formData,\n      intl,\n      blocksConfig\n    });\n    if (variations.length > 1) {\n      addExtensionFieldToSchema({\n        schema,\n        name: 'variation',\n        items: variations,\n        intl,\n        title: messages.variation,\n        insertFieldToOrder: _addField\n      });\n    }\n    return __jsx(FormComponent, _extends({}, props, {\n      schema: schema,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 10\n      }\n    }));\n  }, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n    return [useIntl];\n  });\n};\nexport const EMPTY_STYLES_SCHEMA = {\n  fieldsets: [{\n    id: 'default',\n    title: 'Default',\n    fields: []\n  }],\n  properties: {},\n  required: []\n};\n\n/**\n * Creates the `styles` field and fieldset in a schema\n */\nexport const addStyling = _ref6 => {\n  let {\n    schema,\n    formData,\n    intl\n  } = _ref6;\n  schema.fieldsets.push({\n    id: 'styling',\n    title: intl.formatMessage(messages.styling),\n    fields: ['styles']\n  });\n  schema.properties.styles = {\n    widget: 'object',\n    title: intl.formatMessage(messages.styling),\n    schema: EMPTY_STYLES_SCHEMA\n  };\n  return schema;\n};\n\n/**\n * Allows compose-like declaration of schema enhancers\n *\n * Example usage:\n * const schemaEnhancer = composeSchema(schemaEnhancerA, schemaEnhancerB)\n *\n * where each enhancer is a function with signature\n * ({schema, formData, ...rest}) => schema\n *\n */\nexport function composeSchema() {\n  const enhancers = Array.from(arguments);\n  const composer = args => {\n    const props = enhancers.reduce((acc, enhancer) => enhancer ? _objectSpread(_objectSpread({}, acc), {}, {\n      schema: enhancer(acc)\n    }) : acc, _objectSpread({}, args));\n    return props.schema;\n  };\n  return composer;\n}","map":{"version":3,"names":["React","defineMessages","useIntl","config","cloneDeepSchema","messages","variation","styling","_addField","schema","name","fieldsets","fields","indexOf","unshift","getBlocksConfig","props","blocks","blocksConfig","addExtensionFieldToSchema","items","intl","title","description","insertFieldToOrder","_","formatMessage","hasDefaultExtension","findIndex","isDefault","console","warn","properties","choices","map","id","defaultMessage","noValueOption","default","find","item","withBlockSchemaEnhancer","FormComponent","extensionName","formData","originalSchema","blockType","extensionConfig","extensions","activeItemName","activeItem","schemaEnhancer","length","applySchemaEnhancer","variations","withVariationSchemaEnhancer","EMPTY_STYLES_SCHEMA","required","addStyling","push","styles","widget","composeSchema","enhancers","Array","from","arguments","composer","args","reduce","acc","enhancer"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/helpers/Extensions/withBlockSchemaEnhancer.js"],"sourcesContent":["import React from 'react';\nimport { defineMessages } from 'react-intl';\nimport { useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { cloneDeepSchema } from '@plone/volto/helpers/Utils/Utils';\n\nconst messages = defineMessages({\n  variation: {\n    id: 'Variation',\n    defaultMessage: 'Variation',\n  },\n  styling: {\n    id: 'Styling',\n    defaultMessage: 'Styling',\n  },\n});\n\n/**\n * Sets the field name as first field in schema\n */\nfunction _addField(schema, name) {\n  if (schema.fieldsets[0].fields.indexOf(name) === -1) {\n    schema.fieldsets[0].fields.unshift(name);\n  }\n}\n\n/**\n * Gets the blocksConfig from the props or from the global config object\n */\nfunction getBlocksConfig(props) {\n  const { blocks } = config;\n\n  if (props.blocksConfig) {\n    return props.blocksConfig;\n  }\n\n  return blocks?.blocksConfig;\n}\n\n/**\n * Utility function that adds the Select dropdown field to a schema\n */\nexport const addExtensionFieldToSchema = ({\n  schema,\n  name,\n  items,\n  intl,\n  title,\n  description,\n  insertFieldToOrder = _addField,\n}) => {\n  const _ = intl.formatMessage;\n\n  insertFieldToOrder(schema, name);\n\n  const hasDefaultExtension =\n    items?.findIndex(({ isDefault }) => isDefault) > -1;\n\n  if (!hasDefaultExtension) {\n    // eslint-disable-next-line\n    console.warn('You should provide a default extension in extension:', name);\n  }\n\n  schema.properties[name] = {\n    title: _(title),\n    choices: items?.map(({ id, title }) => [\n      id,\n      _({ id: title, defaultMessage: title }),\n    ]),\n    noValueOption: false,\n    default: hasDefaultExtension\n      ? items?.find((item) => item.isDefault).id\n      : null,\n  };\n\n  return schema;\n};\n\n/**\n * A generic HOC that provides \"schema enhancer functionality\" for any custom\n * block extension.\n *\n * This enables blocks to have additional \"variations\", beyond the usual\n * `variations` field. This function is not directly used by Volto.\n *\n * To be used with a block configuration like:\n *\n * ```\n *  {\n *    id: 'someBlockId',\n *    extensions: {\n *      '<someExtensionName>': {\n *        items: [\n *          {\n *            id: 'selectFacet',\n *            title: 'Select',\n *            view: SelectFacet,\n *            isDefault: true,\n *          },\n *          {\n *            id: 'checkboxFacet',\n *            title: 'Checkbox',\n *            view: CheckboxFacet,\n *            isDefault: false,\n *          },\n *        ]\n *      }\n *     }\n *  }\n * ```\n */\nexport const withBlockSchemaEnhancer = (\n  FormComponent,\n  extensionName = 'vendor',\n  insertFieldToOrder = _addField,\n) => ({ ...props }) => {\n  const { formData, schema: originalSchema } = props;\n  const intl = useIntl();\n\n  const blocksConfig = getBlocksConfig(props);\n\n  const blockType = formData['@type'];\n  const extensionConfig =\n    blocksConfig?.[blockType]?.extensions?.[extensionName];\n\n  if (!extensionConfig)\n    return <FormComponent {...props} schema={originalSchema} />;\n\n  const activeItemName = formData?.[extensionName];\n  let activeItem = extensionConfig.items?.find(\n    (item) => item.id === activeItemName,\n  );\n  if (!activeItem)\n    activeItem = extensionConfig.items?.find((item) => item.isDefault);\n\n  const schemaEnhancer =\n    // For the main \"variation\" of blocks, allow simply passing a\n    // schemaEnhancer in the block configuration\n    activeItem?.['schemaEnhancer'] ||\n    (extensionName === 'variation' &&\n      blocksConfig?.[blockType]?.schemaEnhancer);\n\n  let schema = schemaEnhancer\n    ? schemaEnhancer({\n        schema: cloneDeepSchema(originalSchema),\n        formData,\n        intl,\n      })\n    : cloneDeepSchema(originalSchema);\n\n  const { title = messages.variation, description } = extensionConfig;\n\n  if (extensionConfig.items?.length > 1) {\n    addExtensionFieldToSchema({\n      schema,\n      name: extensionName,\n      items: extensionConfig.items || [],\n      intl,\n      title,\n      description,\n      insertFieldToOrder,\n    });\n  }\n\n  return <FormComponent {...props} schema={schema} />;\n};\n\n/**\n * Apply block variation schema enhancers to the provided schema, using block\n * information from the provided block data (as `formData`).\n *\n * Blocks can be enhanced with variations declared like:\n *\n * ```\n *  {\n *    id: 'searchBlock',\n *    schemaEnhancer: ({schema, formData, intl}) => schema,\n *    variations: [\n *      {\n *        id: 'facetsRightSide',\n *        title: 'Facets on right side',\n *        view: RightColumnFacets,\n *        isDefault: true,\n *      },\n *      {\n *        id: 'facetsLeftSide',\n *        title: 'Facets on left side',\n *        view: LeftColumnFacets,\n *        isDefault: false,\n *        schemaEnhancer: ({schema, formData, intl}) => schema,\n *      },\n *    ],\n *\n * ```\n * Notice that each variation can declare an option schema enhancer, and each\n * block supports an optional `schemaEnhancer` function.\n */\nexport const applySchemaEnhancer = ({\n  schema: originalSchema,\n  formData,\n  intl,\n  blocksConfig = config.blocks.blocksConfig,\n}) => {\n  let schema, schemaEnhancer;\n\n  const blockType = formData['@type'];\n  const variations = blocksConfig?.[blockType]?.variations || [];\n\n  if (variations.length === 0) {\n    // No variations present but we finalize the schema with a schemaEnhancer\n    // in the block config (if present)\n    schemaEnhancer = blocksConfig?.[blockType]?.schemaEnhancer;\n\n    if (schemaEnhancer)\n      schema = schemaEnhancer({\n        schema: cloneDeepSchema(originalSchema),\n        formData,\n        intl,\n      });\n    return schema || originalSchema;\n  }\n\n  const activeItemName = formData?.variation;\n  let activeItem = variations.find((item) => item.id === activeItemName);\n  if (!activeItem) activeItem = variations.find((item) => item.isDefault);\n\n  schemaEnhancer = activeItem?.['schemaEnhancer'];\n\n  schema = schemaEnhancer\n    ? schemaEnhancer({\n        schema: cloneDeepSchema(originalSchema),\n        formData,\n        intl,\n      })\n    : cloneDeepSchema(originalSchema);\n\n  // Finalize the schema with a schemaEnhancer in the block config;\n  schemaEnhancer = blocksConfig?.[blockType]?.schemaEnhancer;\n  if (schemaEnhancer) schema = schemaEnhancer({ schema, formData, intl });\n\n  return schema || originalSchema;\n};\n\n/**\n * A HOC that enhances the incoming schema prop with block variations support\n * by:\n *\n * - applies the selected variation's schema enhancer\n * - adds the variation selection input (as a choice widget)\n */\nexport const withVariationSchemaEnhancer = (FormComponent) => (props) => {\n  const { formData, schema: originalSchema } = props;\n  const intl = useIntl();\n\n  const blocksConfig = getBlocksConfig(props);\n\n  const blockType = formData['@type'];\n  const variations = blocksConfig[blockType]?.variations || [];\n\n  let schema = applySchemaEnhancer({\n    schema: originalSchema,\n    formData,\n    intl,\n    blocksConfig,\n  });\n\n  if (variations.length > 1) {\n    addExtensionFieldToSchema({\n      schema,\n      name: 'variation',\n      items: variations,\n      intl,\n      title: messages.variation,\n      insertFieldToOrder: _addField,\n    });\n  }\n\n  return <FormComponent {...props} schema={schema} />;\n};\n\nexport const EMPTY_STYLES_SCHEMA = {\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'Default',\n      fields: [],\n    },\n  ],\n  properties: {},\n  required: [],\n};\n\n/**\n * Creates the `styles` field and fieldset in a schema\n */\nexport const addStyling = ({ schema, formData, intl }) => {\n  schema.fieldsets.push({\n    id: 'styling',\n    title: intl.formatMessage(messages.styling),\n    fields: ['styles'],\n  });\n\n  schema.properties.styles = {\n    widget: 'object',\n    title: intl.formatMessage(messages.styling),\n    schema: EMPTY_STYLES_SCHEMA,\n  };\n  return schema;\n};\n\n/**\n * Allows compose-like declaration of schema enhancers\n *\n * Example usage:\n * const schemaEnhancer = composeSchema(schemaEnhancerA, schemaEnhancerB)\n *\n * where each enhancer is a function with signature\n * ({schema, formData, ...rest}) => schema\n *\n */\nexport function composeSchema() {\n  const enhancers = Array.from(arguments);\n  const composer = (args) => {\n    const props = enhancers.reduce(\n      (acc, enhancer) => (enhancer ? { ...acc, schema: enhancer(acc) } : acc),\n      { ...args },\n    );\n    return props.schema;\n  };\n  return composer;\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Variation","defaultMessage":"Variation"},{"id":"Styling","defaultMessage":"Styling"}]}},"sourceType":"module","externalDependencies":[]}