{"ast":null,"code":"import _extends from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _map from \"lodash/map\";\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/Multilingual/TranslationObject.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\n/**\n * Add container.\n * @module components/manage/Add/Add\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Form as UiForm, Menu, Segment } from 'semantic-ui-react';\nimport { Provider } from 'react-intl-redux';\nimport { Form, Field } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\nimport configureStore from '@plone/volto/store';\nimport { Api, flattenToAppURL, langmap, normalizeLanguageName } from '@plone/volto/helpers';\nimport { createBrowserHistory } from 'history';\nconst messages = defineMessages({\n  document: {\n    \"id\": \"Document\",\n    \"defaultMessage\": \"Document\"\n  }\n});\n\n/**\n * TranslationObject class.\n * @class TranslationObject\n * @extends Component\n */\nconst TranslationObject = _ref => {\n  _s();\n  let {\n    translationObject,\n    schema,\n    pathname,\n    visual,\n    isFormSelected,\n    onSelectForm\n  } = _ref;\n  const intl = useIntl();\n  const {\n    0: locales,\n    1: setLocales\n  } = useState({});\n  const {\n    0: loadingLocale,\n    1: setLoadingLocale\n  } = useState(false);\n  const {\n    0: activeMenu,\n    1: setActiveMenu\n  } = useState('language');\n  const handleMenuClick = (e, _ref2) => {\n    let {\n      name\n    } = _ref2;\n    setActiveMenu(name);\n  };\n  useEffect(() => {\n    if (!loadingLocale && Object.keys(locales).length < config.settings.supportedLanguages.length) {\n      setLoadingLocale(true);\n      let lang = config.settings.supportedLanguages[Object.keys(locales).length];\n      const langFileName = normalizeLanguageName(lang);\n      import('@root/../locales/' + langFileName + '.json').then(locale => {\n        setLocales(_objectSpread(_objectSpread({}, locales), {}, {\n          [lang]: locale.default\n        }));\n        setLoadingLocale(false);\n      });\n    }\n  }, [loadingLocale, locales]);\n  const api = new Api();\n  const history = createBrowserHistory();\n  const store = configureStore(_objectSpread(_objectSpread({}, window.__data), {}, {\n    intl: {\n      defaultLocale: config.settings.defaultLanguage,\n      locale: translationObject.language.token,\n      messages: locales[translationObject.language.token]\n    }\n  }), history, api);\n  const lang = translationObject.language.token;\n  return translationObject && Object.keys(locales).length > 0 ? __jsx(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, __jsx(React.Fragment, null, __jsx(Menu, {\n    pointing: true,\n    secondary: true,\n    attached: true,\n    tabular: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, __jsx(Menu.Item, {\n    name: \"language\",\n    active: activeMenu === 'language',\n    onClick: handleMenuClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, langmap[lang].nativeName), visual && __jsx(Menu.Item, {\n    name: \"properties\",\n    active: activeMenu === 'properties',\n    onClick: handleMenuClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, intl.formatMessage(messages.document))), activeMenu === 'language' && __jsx(Form, {\n    key: \"translation-object-form\",\n    schema: schema,\n    formData: translationObject,\n    type: translationObject['@type'],\n    onSubmit: () => {\n      /*do nothing*/\n    },\n    hideActions: true,\n    pathname: flattenToAppURL(translationObject['@id']),\n    visual: visual,\n    title: langmap[lang].nativeName,\n    loading: false,\n    isFormSelected: isFormSelected,\n    onSelectForm: onSelectForm,\n    editable: false,\n    onChange: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }), activeMenu === 'properties' && __jsx(UiForm, {\n    method: \"post\",\n    onSubmit: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, __jsx(\"fieldset\", {\n    className: \"invisible\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, schema && _map(schema.fieldsets, item => [__jsx(Segment, {\n    secondary: true,\n    attached: true,\n    key: item.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 19\n    }\n  }, item.title), __jsx(Segment, {\n    attached: true,\n    key: `fieldset-contents-${item.title}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 19\n    }\n  }, _map(item.fields, (field, index) => __jsx(Field, _extends({}, schema.properties[field], {\n    isDisabled: true,\n    id: field,\n    formData: translationObject,\n    focus: false,\n    value: translationObject[field],\n    required: schema.required.indexOf(field) !== -1,\n    key: field,\n    onChange: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 23\n    }\n  }))))]))))) : null;\n};\n_s(TranslationObject, \"CwZm/BTilhg5sYN5p/xfu9waNCg=\", false, function () {\n  return [useIntl];\n});\n_c = TranslationObject;\nexport default TranslationObject;\nvar _c;\n$RefreshReg$(_c, \"TranslationObject\");","map":{"version":3,"names":["React","useEffect","useState","defineMessages","useIntl","Form","UiForm","Menu","Segment","Provider","Field","config","configureStore","Api","flattenToAppURL","langmap","normalizeLanguageName","createBrowserHistory","messages","document","TranslationObject","translationObject","schema","pathname","visual","isFormSelected","onSelectForm","intl","locales","setLocales","loadingLocale","setLoadingLocale","activeMenu","setActiveMenu","handleMenuClick","e","name","Object","keys","length","settings","supportedLanguages","lang","langFileName","then","locale","default","api","history","store","window","__data","defaultLocale","defaultLanguage","language","token","nativeName","formatMessage","fieldsets","item","title","fields","field","index","properties","required","indexOf"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/Multilingual/TranslationObject.jsx"],"sourcesContent":["/**\n * Add container.\n * @module components/manage/Add/Add\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { map } from 'lodash';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Form as UiForm, Menu, Segment } from 'semantic-ui-react';\nimport { Provider } from 'react-intl-redux';\nimport { Form, Field } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\nimport configureStore from '@plone/volto/store';\nimport {\n  Api,\n  flattenToAppURL,\n  langmap,\n  normalizeLanguageName,\n} from '@plone/volto/helpers';\nimport { createBrowserHistory } from 'history';\nconst messages = defineMessages({\n  document: {\n    id: 'Document',\n    defaultMessage: 'Document',\n  },\n});\n\n/**\n * TranslationObject class.\n * @class TranslationObject\n * @extends Component\n */\nconst TranslationObject = ({\n  translationObject,\n  schema,\n  pathname,\n  visual,\n  isFormSelected,\n  onSelectForm,\n}) => {\n  const intl = useIntl();\n\n  const [locales, setLocales] = useState({});\n  const [loadingLocale, setLoadingLocale] = useState(false);\n  const [activeMenu, setActiveMenu] = useState('language');\n  const handleMenuClick = (e, { name }) => {\n    setActiveMenu(name);\n  };\n\n  useEffect(() => {\n    if (\n      !loadingLocale &&\n      Object.keys(locales).length < config.settings.supportedLanguages.length\n    ) {\n      setLoadingLocale(true);\n      let lang =\n        config.settings.supportedLanguages[Object.keys(locales).length];\n      const langFileName = normalizeLanguageName(lang);\n      import('@root/../locales/' + langFileName + '.json').then((locale) => {\n        setLocales({ ...locales, [lang]: locale.default });\n        setLoadingLocale(false);\n      });\n    }\n  }, [loadingLocale, locales]);\n\n  const api = new Api();\n  const history = createBrowserHistory();\n  const store = configureStore(\n    {\n      ...window.__data,\n      intl: {\n        defaultLocale: config.settings.defaultLanguage,\n        locale: translationObject.language.token,\n        messages: locales[translationObject.language.token],\n      },\n    },\n    history,\n    api,\n  );\n\n  const lang = translationObject.language.token;\n\n  return translationObject && Object.keys(locales).length > 0 ? (\n    <Provider store={store}>\n      <>\n        <Menu pointing secondary attached tabular>\n          <Menu.Item\n            name=\"language\"\n            active={activeMenu === 'language'}\n            onClick={handleMenuClick}\n          >\n            {langmap[lang].nativeName}\n          </Menu.Item>\n          {visual && (\n            <Menu.Item\n              name=\"properties\"\n              active={activeMenu === 'properties'}\n              onClick={handleMenuClick}\n            >\n              {intl.formatMessage(messages.document)}\n            </Menu.Item>\n          )}\n        </Menu>\n        {activeMenu === 'language' && (\n          <Form\n            key=\"translation-object-form\"\n            schema={schema}\n            formData={translationObject}\n            type={translationObject['@type']}\n            onSubmit={() => {\n              /*do nothing*/\n            }}\n            hideActions\n            pathname={flattenToAppURL(translationObject['@id'])}\n            visual={visual}\n            title={langmap[lang].nativeName}\n            loading={false}\n            isFormSelected={isFormSelected}\n            onSelectForm={onSelectForm}\n            editable={false}\n            onChange={() => {}}\n          />\n        )}\n        {activeMenu === 'properties' && (\n          <UiForm method=\"post\" onSubmit={() => {}}>\n            <fieldset className=\"invisible\">\n              {schema &&\n                map(schema.fieldsets, (item) => [\n                  <Segment secondary attached key={item.title}>\n                    {item.title}\n                  </Segment>,\n                  <Segment attached key={`fieldset-contents-${item.title}`}>\n                    {map(item.fields, (field, index) => (\n                      <Field\n                        {...schema.properties[field]}\n                        isDisabled={true}\n                        id={field}\n                        formData={translationObject}\n                        focus={false}\n                        value={translationObject[field]}\n                        required={schema.required.indexOf(field) !== -1}\n                        key={field}\n                        onChange={() => {}}\n                      />\n                    ))}\n                  </Segment>,\n                ])}\n            </fieldset>\n          </UiForm>\n        )}\n      </>\n    </Provider>\n  ) : null;\n};\n\nexport default TranslationObject;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Document","defaultMessage":"Document"}]}},"sourceType":"module","externalDependencies":[]}