{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/Blocks/Table/View.jsx\";\nvar __jsx = React.createElement;\n/**\n * View table block.\n * @module components/manage/Blocks/Table/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport redraft from 'redraft';\nimport config from '@plone/volto/registry';\n\n/**\n * View table block class.\n * @class View\n * @extends Component\n */\nconst View = _ref => {\n  let {\n    data\n  } = _ref;\n  return data && data.table && __jsx(Table, {\n    fixed: data.table.fixed,\n    compact: data.table.compact,\n    basic: data.table.basic ? 'very' : false,\n    celled: data.table.celled,\n    inverted: data.table.inverted,\n    striped: data.table.striped,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, __jsx(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, _map(data.table.rows, row => __jsx(Table.Row, {\n    key: row.key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, _map(row.cells, cell => __jsx(Table.Cell, {\n    key: cell.key,\n    as: cell.type === 'header' ? 'th' : 'td',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 15\n    }\n  }, cell.value && cell.value.blocks && cell.value.blocks[0].text ? redraft(cell.value, config.settings.richtextViewSettings.ToHTMLRenderers, config.settings.richtextViewSettings.ToHTMLOptions) : '\\u00A0'))))));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_c = View;\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default View;\nvar _c;\n$RefreshReg$(_c, \"View\");","map":{"version":3,"names":["React","PropTypes","Table","redraft","config","View","data","table","fixed","compact","basic","celled","inverted","striped","rows","row","key","cells","cell","type","value","blocks","text","settings","richtextViewSettings","ToHTMLRenderers","ToHTMLOptions","propTypes","objectOf","any","isRequired"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/manage/Blocks/Table/View.jsx"],"sourcesContent":["/**\n * View table block.\n * @module components/manage/Blocks/Table/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport redraft from 'redraft';\nimport config from '@plone/volto/registry';\n\n/**\n * View table block class.\n * @class View\n * @extends Component\n */\nconst View = ({ data }) =>\n  data &&\n  data.table && (\n    <Table\n      fixed={data.table.fixed}\n      compact={data.table.compact}\n      basic={data.table.basic ? 'very' : false}\n      celled={data.table.celled}\n      inverted={data.table.inverted}\n      striped={data.table.striped}\n    >\n      <Table.Body>\n        {map(data.table.rows, (row) => (\n          <Table.Row key={row.key}>\n            {map(row.cells, (cell) => (\n              <Table.Cell\n                key={cell.key}\n                as={cell.type === 'header' ? 'th' : 'td'}\n              >\n                {cell.value && cell.value.blocks && cell.value.blocks[0].text\n                  ? redraft(\n                      cell.value,\n                      config.settings.richtextViewSettings.ToHTMLRenderers,\n                      config.settings.richtextViewSettings.ToHTMLOptions,\n                    )\n                  : '\\u00A0'}\n              </Table.Cell>\n            ))}\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n"],"mappings":";;;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,KAAK,QAAQ,mBAAmB;AAEzC,OAAOC,OAAO,MAAM,SAAS;AAC7B,OAAOC,MAAM,MAAM,uBAAuB;;AAE1C;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG;EAAA,IAAC;IAAEC;EAAK,CAAC;EAAA,OACpBA,IAAI,IACJA,IAAI,CAACC,KAAK,IACR,MAAC,KAAK;IACJ,KAAK,EAAED,IAAI,CAACC,KAAK,CAACC,KAAM;IACxB,OAAO,EAAEF,IAAI,CAACC,KAAK,CAACE,OAAQ;IAC5B,KAAK,EAAEH,IAAI,CAACC,KAAK,CAACG,KAAK,GAAG,MAAM,GAAG,KAAM;IACzC,MAAM,EAAEJ,IAAI,CAACC,KAAK,CAACI,MAAO;IAC1B,QAAQ,EAAEL,IAAI,CAACC,KAAK,CAACK,QAAS;IAC9B,OAAO,EAAEN,IAAI,CAACC,KAAK,CAACM,OAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAE5B,MAAC,KAAK,CAAC,IAAI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACR,KAAIP,IAAI,CAACC,KAAK,CAACO,IAAI,EAAGC,GAAG,IACxB,MAAC,KAAK,CAAC,GAAG;IAAC,GAAG,EAAEA,GAAG,CAACC,GAAI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACrB,KAAID,GAAG,CAACE,KAAK,EAAGC,IAAI,IACnB,MAAC,KAAK,CAAC,IAAI;IACT,GAAG,EAAEA,IAAI,CAACF,GAAI;IACd,EAAE,EAAEE,IAAI,CAACC,IAAI,KAAK,QAAQ,GAAG,IAAI,GAAG,IAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAExCD,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACE,KAAK,CAACC,MAAM,IAAIH,IAAI,CAACE,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,GACzDnB,OAAO,CACLe,IAAI,CAACE,KAAK,EACVhB,MAAM,CAACmB,QAAQ,CAACC,oBAAoB,CAACC,eAAe,EACpDrB,MAAM,CAACmB,QAAQ,CAACC,oBAAoB,CAACE,aAAa,CACnD,GACD,QAAQ,CAEf,CAAC,CAEL,CAAC,CACS,CAEhB;AAAA;;AAEH;AACA;AACA;AACA;AACA;AAJA,KAlCMrB,IAAI;AAuCVA,IAAI,CAACsB,SAAS,GAAG;EACfrB,IAAI,EAAEL,SAAS,CAAC2B,QAAQ,CAAC3B,SAAS,CAAC4B,GAAG,CAAC,CAACC;AAC1C,CAAC;AAED,eAAezB,IAAI;AAAC;AAAA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}