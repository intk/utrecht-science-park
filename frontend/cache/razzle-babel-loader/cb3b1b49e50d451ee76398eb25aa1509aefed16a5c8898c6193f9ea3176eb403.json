{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n// import { flattenToAppURL } from '@plone/volto/helpers';\n//\n// import clearSVG from '@plone/volto/icons/clear.svg';\n// import navTreeSVG from '@plone/volto/icons/nav.svg';\n\nconst ImageSchema = ({\n  schema,\n  formData,\n  intl\n}) => {\n  const showAlign = ['s', 'm'].includes(formData.size);\n\n  // remove the align field, we have a fixed policy of image behavior\n  schema.fieldsets[0].fields = [...schema.fieldsets[0].fields.filter(n => n !== 'align' ? true : showAlign), 'source', 'sourceHref', 'imageCaption'];\n  // schema.properties.align.description =\n  //   'Available only when the size is set to Small';\n\n  schema.properties = _objectSpread(_objectSpread({}, schema.properties), {}, {\n    source: {\n      title: 'Image source',\n      description: 'Write here the source/copyright of this image'\n    },\n    sourceHref: {\n      title: 'Source website',\n      widget: 'url'\n    },\n    imageCaption: {\n      type: 'richtext',\n      title: 'Image caption',\n      description: 'The image caption will be shown under the image'\n    }\n  });\n  return schema;\n\n  // return {\n  //   title: 'Image',\n  //   fieldsets: [\n  //     {\n  //       id: 'default',\n  //       title: 'Default',\n  //       fields: ['source', 'sourceHref', 'imageCaption'],\n  //     },\n  //   ],\n  //   properties: {\n  //     source: {\n  //       title: 'Image source',\n  //       description: 'Write here the source/copyright of this image',\n  //     },\n  //     // sourceHref: {\n  //     //   title: 'Source website',\n  //     //   icon: data.sourceHref ? clearSVG : navTreeSVG,\n  //     //   iconAction: data.sourceHref\n  //     //     ? () => {\n  //     //         onChangeBlock(block, {\n  //     //           ...data,\n  //     //           sourceHref: '',\n  //     //           title: '',\n  //     //           description: '',\n  //     //           preview_image: '',\n  //     //         });\n  //     //       }\n  //     //     : () => openObjectBrowser({ mode: 'link' }),\n  //     //   value: url && flattenToAppURL(url),\n  //     // },\n  //     imageCaption: {\n  //       type: 'richtext',\n  //       title: 'Image caption',\n  //       description: 'The image caption will be shown under the image',\n  //     },\n  //   },\n  //   required: [],\n  // };\n};\n\nexport default ImageSchema;","map":{"version":3,"names":["ImageSchema","schema","formData","intl","showAlign","includes","size","fieldsets","fields","filter","n","properties","source","title","description","sourceHref","widget","imageCaption","type"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/src/components/blocks/Image/schema.js"],"sourcesContent":["// import { flattenToAppURL } from '@plone/volto/helpers';\n//\n// import clearSVG from '@plone/volto/icons/clear.svg';\n// import navTreeSVG from '@plone/volto/icons/nav.svg';\n\nconst ImageSchema = ({ schema, formData, intl }) => {\n  const showAlign = ['s', 'm'].includes(formData.size);\n\n  // remove the align field, we have a fixed policy of image behavior\n  schema.fieldsets[0].fields = [\n    ...schema.fieldsets[0].fields.filter((n) =>\n      n !== 'align' ? true : showAlign,\n    ),\n    'source',\n    'sourceHref',\n    'imageCaption',\n  ];\n  // schema.properties.align.description =\n  //   'Available only when the size is set to Small';\n\n  schema.properties = {\n    ...schema.properties,\n    source: {\n      title: 'Image source',\n      description: 'Write here the source/copyright of this image',\n    },\n    sourceHref: {\n      title: 'Source website',\n      widget: 'url',\n    },\n    imageCaption: {\n      type: 'richtext',\n      title: 'Image caption',\n      description: 'The image caption will be shown under the image',\n    },\n  };\n\n  return schema;\n\n  // return {\n  //   title: 'Image',\n  //   fieldsets: [\n  //     {\n  //       id: 'default',\n  //       title: 'Default',\n  //       fields: ['source', 'sourceHref', 'imageCaption'],\n  //     },\n  //   ],\n  //   properties: {\n  //     source: {\n  //       title: 'Image source',\n  //       description: 'Write here the source/copyright of this image',\n  //     },\n  //     // sourceHref: {\n  //     //   title: 'Source website',\n  //     //   icon: data.sourceHref ? clearSVG : navTreeSVG,\n  //     //   iconAction: data.sourceHref\n  //     //     ? () => {\n  //     //         onChangeBlock(block, {\n  //     //           ...data,\n  //     //           sourceHref: '',\n  //     //           title: '',\n  //     //           description: '',\n  //     //           preview_image: '',\n  //     //         });\n  //     //       }\n  //     //     : () => openObjectBrowser({ mode: 'link' }),\n  //     //   value: url && flattenToAppURL(url),\n  //     // },\n  //     imageCaption: {\n  //       type: 'richtext',\n  //       title: 'Image caption',\n  //       description: 'The image caption will be shown under the image',\n  //     },\n  //   },\n  //   required: [],\n  // };\n};\n\nexport default ImageSchema;\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEA,MAAMA,WAAW,GAAG,CAAC;EAAEC,MAAM;EAAEC,QAAQ;EAAEC;AAAK,CAAC,KAAK;EAClD,MAAMC,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,QAAQ,CAACH,QAAQ,CAACI,IAAI,CAAC;;EAEpD;EACAL,MAAM,CAACM,SAAS,CAAC,CAAC,CAAC,CAACC,MAAM,GAAG,CAC3B,GAAGP,MAAM,CAACM,SAAS,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,MAAM,CAAEC,CAAC,IACrCA,CAAC,KAAK,OAAO,GAAG,IAAI,GAAGN,SAAS,CACjC,EACD,QAAQ,EACR,YAAY,EACZ,cAAc,CACf;EACD;EACA;;EAEAH,MAAM,CAACU,UAAU,mCACZV,MAAM,CAACU,UAAU;IACpBC,MAAM,EAAE;MACNC,KAAK,EAAE,cAAc;MACrBC,WAAW,EAAE;IACf,CAAC;IACDC,UAAU,EAAE;MACVF,KAAK,EAAE,gBAAgB;MACvBG,MAAM,EAAE;IACV,CAAC;IACDC,YAAY,EAAE;MACZC,IAAI,EAAE,UAAU;MAChBL,KAAK,EAAE,eAAe;MACtBC,WAAW,EAAE;IACf;EAAC,EACF;EAED,OAAOb,MAAM;;EAEb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;;AAED,eAAeD,WAAW"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}