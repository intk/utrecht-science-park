{"ast":null,"code":"import _objectSpread from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _map from \"lodash/map\";\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/packages/volto-slate/src/blocks/Table/TableBlockView.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\n/**\n * Slate Table block's View component.\n * @module volto-slate/blocks/Table/View\n */\n\nimport React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport { serializeNodes, serializeNodesToText } from '@plone/volto-slate/editor/render';\nimport { Node } from 'slate';\n\n// TODO: loading LESS files with `volto-slate/...` paths does not work currently\nimport '../../editor/plugins/Table/less/public.less';\n\n/**\n * Slate Table block's View class.\n * @class View\n * @extends Component\n * @param {object} data The table data to render as a table.\n */\nconst View = _ref => {\n  _s();\n  let {\n    data\n  } = _ref;\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    column: null,\n    direction: null\n  });\n  const headers = useMemo(() => {\n    var _data$table$rows, _data$table$rows$;\n    return (_data$table$rows = data.table.rows) === null || _data$table$rows === void 0 ? void 0 : (_data$table$rows$ = _data$table$rows[0]) === null || _data$table$rows$ === void 0 ? void 0 : _data$table$rows$.cells;\n  }, [data.table.rows]);\n  const rows = useMemo(() => {\n    const items = [];\n    if (!data.table.rows) return [];\n    data.table.rows.forEach((row, index) => {\n      if (index > 0) {\n        items[index] = [];\n        row.cells.forEach((cell, cellIndex) => {\n          items[index][cellIndex] = _objectSpread(_objectSpread({}, cell), {}, {\n            value: cell.value && Node.string({\n              children: cell.value\n            }).length > 0 ? serializeNodes(cell.value) : '\\u00A0',\n            valueText: cell.value && Node.string({\n              children: cell.value\n            }).length > 0 ? serializeNodesToText(cell.value) : '\\u00A0'\n          });\n        });\n      }\n    });\n    return items;\n  }, [data.table.rows]);\n  const sortedRows = useMemo(() => {\n    if (state.column === null) return Object.keys(rows);\n    return Object.keys(rows).sort((a, b) => {\n      const a_text = rows[a][state.column].valueText;\n      const b_text = rows[b][state.column].valueText;\n      if (state.direction === 'ascending' ? a_text < b_text : a_text > b_text) {\n        return -1;\n      }\n      if (state.direction === 'ascending' ? a_text > b_text : a_text < b_text) {\n        return 1;\n      }\n      return 0;\n    });\n  }, [state, rows]);\n  return __jsx(React.Fragment, null, data && data.table && __jsx(Table, {\n    fixed: data.table.fixed,\n    compact: data.table.compact,\n    basic: data.table.basic ? 'very' : false,\n    celled: data.table.celled,\n    inverted: data.table.inverted,\n    striped: data.table.striped,\n    sortable: data.table.sortable,\n    className: \"slate-table-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, !data.table.hideHeaders ? __jsx(Table.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, __jsx(Table.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, headers.map((cell, index) => __jsx(Table.HeaderCell, {\n    key: cell.key,\n    textAlign: \"left\",\n    verticalAlign: \"middle\",\n    sorted: state.column === index ? state.direction : null,\n    onClick: () => {\n      if (!data.table.sortable) return;\n      setState({\n        column: index,\n        direction: state.column !== index ? 'ascending' : state.direction === 'ascending' ? 'descending' : 'ascending'\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }\n  }, cell.value && Node.string({\n    children: cell.value\n  }).length > 0 ? serializeNodes(cell.value) : '\\u00A0')))) : '', __jsx(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, _map(sortedRows, row => __jsx(Table.Row, {\n    key: row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, _map(rows[row], cell => __jsx(Table.Cell, {\n    key: cell.key,\n    textAlign: \"left\",\n    verticalAlign: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 19\n    }\n  }, cell.value)))))));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_s(View, \"K1OWSQpW47Eg+p/8fmty680VNms=\");\n_c = View;\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default View;\nvar _c;\n$RefreshReg$(_c, \"View\");","map":{"version":3,"names":["React","useState","useMemo","PropTypes","Table","serializeNodes","serializeNodesToText","Node","View","data","state","setState","column","direction","headers","table","rows","cells","items","forEach","row","index","cell","cellIndex","value","string","children","length","valueText","sortedRows","Object","keys","sort","a","b","a_text","b_text","fixed","compact","basic","celled","inverted","striped","sortable","hideHeaders","map","key","propTypes","objectOf","any","isRequired"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/packages/volto-slate/src/blocks/Table/TableBlockView.jsx"],"sourcesContent":["/**\n * Slate Table block's View component.\n * @module volto-slate/blocks/Table/View\n */\n\nimport React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport {\n  serializeNodes,\n  serializeNodesToText,\n} from '@plone/volto-slate/editor/render';\nimport { Node } from 'slate';\n\n// TODO: loading LESS files with `volto-slate/...` paths does not work currently\nimport '../../editor/plugins/Table/less/public.less';\n\n/**\n * Slate Table block's View class.\n * @class View\n * @extends Component\n * @param {object} data The table data to render as a table.\n */\nconst View = ({ data }) => {\n  const [state, setState] = useState({\n    column: null,\n    direction: null,\n  });\n\n  const headers = useMemo(() => {\n    return data.table.rows?.[0]?.cells;\n  }, [data.table.rows]);\n\n  const rows = useMemo(() => {\n    const items = [];\n    if (!data.table.rows) return [];\n    data.table.rows.forEach((row, index) => {\n      if (index > 0) {\n        items[index] = [];\n        row.cells.forEach((cell, cellIndex) => {\n          items[index][cellIndex] = {\n            ...cell,\n            value:\n              cell.value && Node.string({ children: cell.value }).length > 0\n                ? serializeNodes(cell.value)\n                : '\\u00A0',\n            valueText:\n              cell.value && Node.string({ children: cell.value }).length > 0\n                ? serializeNodesToText(cell.value)\n                : '\\u00A0',\n          };\n        });\n      }\n    });\n    return items;\n  }, [data.table.rows]);\n\n  const sortedRows = useMemo(() => {\n    if (state.column === null) return Object.keys(rows);\n    return Object.keys(rows).sort((a, b) => {\n      const a_text = rows[a][state.column].valueText;\n      const b_text = rows[b][state.column].valueText;\n      if (state.direction === 'ascending' ? a_text < b_text : a_text > b_text) {\n        return -1;\n      }\n      if (state.direction === 'ascending' ? a_text > b_text : a_text < b_text) {\n        return 1;\n      }\n      return 0;\n    });\n  }, [state, rows]);\n\n  return (\n    <>\n      {data && data.table && (\n        <Table\n          fixed={data.table.fixed}\n          compact={data.table.compact}\n          basic={data.table.basic ? 'very' : false}\n          celled={data.table.celled}\n          inverted={data.table.inverted}\n          striped={data.table.striped}\n          sortable={data.table.sortable}\n          className=\"slate-table-block\"\n        >\n          {!data.table.hideHeaders ? (\n            <Table.Header>\n              <Table.Row>\n                {headers.map((cell, index) => (\n                  <Table.HeaderCell\n                    key={cell.key}\n                    textAlign=\"left\"\n                    verticalAlign=\"middle\"\n                    sorted={state.column === index ? state.direction : null}\n                    onClick={() => {\n                      if (!data.table.sortable) return;\n                      setState({\n                        column: index,\n                        direction:\n                          state.column !== index\n                            ? 'ascending'\n                            : state.direction === 'ascending'\n                            ? 'descending'\n                            : 'ascending',\n                      });\n                    }}\n                  >\n                    {cell.value &&\n                    Node.string({ children: cell.value }).length > 0\n                      ? serializeNodes(cell.value)\n                      : '\\u00A0'}\n                  </Table.HeaderCell>\n                ))}\n              </Table.Row>\n            </Table.Header>\n          ) : (\n            ''\n          )}\n          <Table.Body>\n            {map(sortedRows, (row) => (\n              <Table.Row key={row}>\n                {map(rows[row], (cell) => (\n                  <Table.Cell\n                    key={cell.key}\n                    textAlign=\"left\"\n                    verticalAlign=\"middle\"\n                  >\n                    {cell.value}\n                  </Table.Cell>\n                ))}\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      )}\n    </>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}