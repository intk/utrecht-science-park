{"ast":null,"code":"import _objectSpread from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * Types reducer.\n * @module reducers/types/types\n */\n\nimport { GET_CONTENT, GET_TYPES } from '@plone/volto/constants/ActionTypes';\nimport { flattenToAppURL, getBaseUrl, hasApiExpander } from '@plone/volto/helpers';\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n  types: []\n};\n\n/**\n * Types reducer.\n * @function types\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function types() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let hasExpander;\n  switch (action.type) {\n    case `${GET_TYPES}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loading: true,\n        loaded: false\n      });\n    case `${GET_CONTENT}_SUCCESS`:\n      hasExpander = hasApiExpander('types', getBaseUrl(flattenToAppURL(action.result['@id'])));\n      if (hasExpander) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          error: null,\n          loading: false,\n          loaded: true,\n          types: action.result['@components'].types\n        });\n      }\n      return state;\n    case `${GET_TYPES}_SUCCESS`:\n      hasExpander = hasApiExpander('types', getBaseUrl(flattenToAppURL(action.result['@id'])));\n      if (!hasExpander) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          error: null,\n          loading: false,\n          loaded: true,\n          types: action.result\n        });\n      }\n      return state;\n    case `${GET_TYPES}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error,\n        loading: false,\n        loaded: false,\n        types: []\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_CONTENT","GET_TYPES","flattenToAppURL","getBaseUrl","hasApiExpander","initialState","error","loaded","loading","types","state","action","hasExpander","type","result"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/reducers/types/types.js"],"sourcesContent":["/**\n * Types reducer.\n * @module reducers/types/types\n */\n\nimport { GET_CONTENT, GET_TYPES } from '@plone/volto/constants/ActionTypes';\nimport {\n  flattenToAppURL,\n  getBaseUrl,\n  hasApiExpander,\n} from '@plone/volto/helpers';\n\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n  types: [],\n};\n\n/**\n * Types reducer.\n * @function types\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function types(state = initialState, action = {}) {\n  let hasExpander;\n  switch (action.type) {\n    case `${GET_TYPES}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n        loaded: false,\n      };\n    case `${GET_CONTENT}_SUCCESS`:\n      hasExpander = hasApiExpander(\n        'types',\n        getBaseUrl(flattenToAppURL(action.result['@id'])),\n      );\n      if (hasExpander) {\n        return {\n          ...state,\n          error: null,\n          loading: false,\n          loaded: true,\n          types: action.result['@components'].types,\n        };\n      }\n      return state;\n    case `${GET_TYPES}_SUCCESS`:\n      hasExpander = hasApiExpander(\n        'types',\n        getBaseUrl(flattenToAppURL(action.result['@id'])),\n      );\n      if (!hasExpander) {\n        return {\n          ...state,\n          error: null,\n          loading: false,\n          loaded: true,\n          types: action.result,\n        };\n      }\n      return state;\n    case `${GET_TYPES}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        loading: false,\n        loaded: false,\n        types: [],\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA,SAASA,WAAW,EAAEC,SAAS,QAAQ,oCAAoC;AAC3E,SACEC,eAAe,EACfC,UAAU,EACVC,cAAc,QACT,sBAAsB;AAE7B,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,IAAI;EACXC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,KAAK,GAAoC;EAAA,IAAnCC,KAAK,uEAAGL,YAAY;EAAA,IAAEM,MAAM,uEAAG,CAAC,CAAC;EAC7D,IAAIC,WAAW;EACf,QAAQD,MAAM,CAACE,IAAI;IACjB,KAAM,GAAEZ,SAAU,UAAS;MACzB,uCACKS,KAAK;QACRJ,KAAK,EAAE,IAAI;QACXE,OAAO,EAAE,IAAI;QACbD,MAAM,EAAE;MAAK;IAEjB,KAAM,GAAEP,WAAY,UAAS;MAC3BY,WAAW,GAAGR,cAAc,CAC1B,OAAO,EACPD,UAAU,CAACD,eAAe,CAACS,MAAM,CAACG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAClD;MACD,IAAIF,WAAW,EAAE;QACf,uCACKF,KAAK;UACRJ,KAAK,EAAE,IAAI;UACXE,OAAO,EAAE,KAAK;UACdD,MAAM,EAAE,IAAI;UACZE,KAAK,EAAEE,MAAM,CAACG,MAAM,CAAC,aAAa,CAAC,CAACL;QAAK;MAE7C;MACA,OAAOC,KAAK;IACd,KAAM,GAAET,SAAU,UAAS;MACzBW,WAAW,GAAGR,cAAc,CAC1B,OAAO,EACPD,UAAU,CAACD,eAAe,CAACS,MAAM,CAACG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAClD;MACD,IAAI,CAACF,WAAW,EAAE;QAChB,uCACKF,KAAK;UACRJ,KAAK,EAAE,IAAI;UACXE,OAAO,EAAE,KAAK;UACdD,MAAM,EAAE,IAAI;UACZE,KAAK,EAAEE,MAAM,CAACG;QAAM;MAExB;MACA,OAAOJ,KAAK;IACd,KAAM,GAAET,SAAU,OAAM;MACtB,uCACKS,KAAK;QACRJ,KAAK,EAAEK,MAAM,CAACL,KAAK;QACnBE,OAAO,EAAE,KAAK;QACdD,MAAM,EAAE,KAAK;QACbE,KAAK,EAAE;MAAE;IAEb;MACE,OAAOC,KAAK;EAAC;AAEnB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}