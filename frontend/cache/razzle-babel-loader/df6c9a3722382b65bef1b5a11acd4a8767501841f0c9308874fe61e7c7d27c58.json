{"ast":null,"code":"var _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/theme/MultilingualRedirector/MultilingualRedirector.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { useCookies } from 'react-cookie';\nimport config from '@plone/volto/registry';\nimport { changeLanguage } from '@plone/volto/actions';\nimport { normalizeLanguageName } from '@plone/volto/helpers';\nconst MultilingualRedirector = props => {\n  _s();\n  const {\n    settings\n  } = config;\n  const {\n    pathname,\n    children\n  } = props;\n  const [cookies] = useCookies();\n  const currentLanguage = cookies['I18N_LANGUAGE'] || settings.defaultLanguage;\n  const redirectToLanguage = settings.supportedLanguages.includes(currentLanguage) ? currentLanguage : settings.defaultLanguage;\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    // ToDo: Add means to support language negotiation (with config)\n    // const detectedLang = (navigator.language || navigator.userLanguage).substring(0, 2);\n    let mounted = true;\n    if (settings.isMultilingual && pathname === '/') {\n      const langFileName = normalizeLanguageName(redirectToLanguage);\n      import('@root/../locales/' + langFileName + '.json').then(locale => {\n        if (mounted) {\n          dispatch(changeLanguage(redirectToLanguage, locale.default));\n        }\n      });\n    }\n    return () => {\n      mounted = false;\n    };\n  }, [pathname, dispatch, redirectToLanguage, settings.isMultilingual]);\n  return pathname === '/' && settings.isMultilingual ? __jsx(Redirect, {\n    to: `/${redirectToLanguage}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }) : __jsx(React.Fragment, null, children);\n};\n_s(MultilingualRedirector, \"oCQbLwRvRAra30mpeLmBzCHDXVw=\", false, function () {\n  return [useCookies, useDispatch];\n});\n_c = MultilingualRedirector;\nexport default MultilingualRedirector;\nvar _c;\n$RefreshReg$(_c, \"MultilingualRedirector\");","map":{"version":3,"names":["React","Redirect","useDispatch","useCookies","config","changeLanguage","normalizeLanguageName","MultilingualRedirector","props","settings","pathname","children","cookies","currentLanguage","defaultLanguage","redirectToLanguage","supportedLanguages","includes","dispatch","useEffect","mounted","isMultilingual","langFileName","then","locale","default"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/components/theme/MultilingualRedirector/MultilingualRedirector.jsx"],"sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { useCookies } from 'react-cookie';\nimport config from '@plone/volto/registry';\nimport { changeLanguage } from '@plone/volto/actions';\nimport { normalizeLanguageName } from '@plone/volto/helpers';\n\nconst MultilingualRedirector = (props) => {\n  const { settings } = config;\n  const { pathname, children } = props;\n  const [cookies] = useCookies();\n  const currentLanguage = cookies['I18N_LANGUAGE'] || settings.defaultLanguage;\n  const redirectToLanguage = settings.supportedLanguages.includes(\n    currentLanguage,\n  )\n    ? currentLanguage\n    : settings.defaultLanguage;\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    // ToDo: Add means to support language negotiation (with config)\n    // const detectedLang = (navigator.language || navigator.userLanguage).substring(0, 2);\n    let mounted = true;\n    if (settings.isMultilingual && pathname === '/') {\n      const langFileName = normalizeLanguageName(redirectToLanguage);\n      import('@root/../locales/' + langFileName + '.json').then((locale) => {\n        if (mounted) {\n          dispatch(changeLanguage(redirectToLanguage, locale.default));\n        }\n      });\n    }\n    return () => {\n      mounted = false;\n    };\n  }, [pathname, dispatch, redirectToLanguage, settings.isMultilingual]);\n\n  return pathname === '/' && settings.isMultilingual ? (\n    <Redirect to={`/${redirectToLanguage}`} />\n  ) : (\n    <>{children}</>\n  );\n};\n\nexport default MultilingualRedirector;\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,UAAU,QAAQ,cAAc;AACzC,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,qBAAqB,QAAQ,sBAAsB;AAE5D,MAAMC,sBAAsB,GAAIC,KAAK,IAAK;EAAA;EACxC,MAAM;IAAEC;EAAS,CAAC,GAAGL,MAAM;EAC3B,MAAM;IAAEM,QAAQ;IAAEC;EAAS,CAAC,GAAGH,KAAK;EACpC,MAAM,CAACI,OAAO,CAAC,GAAGT,UAAU,EAAE;EAC9B,MAAMU,eAAe,GAAGD,OAAO,CAAC,eAAe,CAAC,IAAIH,QAAQ,CAACK,eAAe;EAC5E,MAAMC,kBAAkB,GAAGN,QAAQ,CAACO,kBAAkB,CAACC,QAAQ,CAC7DJ,eAAe,CAChB,GACGA,eAAe,GACfJ,QAAQ,CAACK,eAAe;EAC5B,MAAMI,QAAQ,GAAGhB,WAAW,EAAE;EAE9BF,KAAK,CAACmB,SAAS,CAAC,MAAM;IACpB;IACA;IACA,IAAIC,OAAO,GAAG,IAAI;IAClB,IAAIX,QAAQ,CAACY,cAAc,IAAIX,QAAQ,KAAK,GAAG,EAAE;MAC/C,MAAMY,YAAY,GAAGhB,qBAAqB,CAACS,kBAAkB,CAAC;MAC9D,MAAM,CAAC,mBAAmB,GAAGO,YAAY,GAAG,OAAO,CAAC,CAACC,IAAI,CAAEC,MAAM,IAAK;QACpE,IAAIJ,OAAO,EAAE;UACXF,QAAQ,CAACb,cAAc,CAACU,kBAAkB,EAAES,MAAM,CAACC,OAAO,CAAC,CAAC;QAC9D;MACF,CAAC,CAAC;IACJ;IACA,OAAO,MAAM;MACXL,OAAO,GAAG,KAAK;IACjB,CAAC;EACH,CAAC,EAAE,CAACV,QAAQ,EAAEQ,QAAQ,EAAEH,kBAAkB,EAAEN,QAAQ,CAACY,cAAc,CAAC,CAAC;EAErE,OAAOX,QAAQ,KAAK,GAAG,IAAID,QAAQ,CAACY,cAAc,GAChD,MAAC,QAAQ;IAAC,EAAE,EAAG,IAAGN,kBAAmB,EAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,GAE1C,4BAAGJ,QAAQ,CACZ;AACH,CAAC;AAAC,GAlCIJ,sBAAsB;EAAA,QAGRJ,UAAU,EAOXD,WAAW;AAAA;AAAA,KAVxBK,sBAAsB;AAoC5B,eAAeA,sBAAsB;AAAC;AAAA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}