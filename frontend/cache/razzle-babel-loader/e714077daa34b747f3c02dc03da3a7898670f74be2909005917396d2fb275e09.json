{"ast":null,"code":"import _objectSpread from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { v4 as uuid } from 'uuid';\nimport { getBlocksFieldname, getBlocksLayoutFieldname, getBlocks } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nconst columnConfig = {\n  cloneData(blockData) {\n    // console.log('column', blockData);\n    return cloneFormData(blockData);\n  }\n};\nfunction cloneFormData(formData) {\n  const formBlocks = getBlocks(formData);\n  const cloneWithIds = formBlocks.filter(_ref => {\n    let [id, blockData] = _ref;\n    return blockData.blocks ? true : !!blockData['@type']; // support \"columns\"\n  }).map(_ref2 => {\n    let [id, blockData] = _ref2;\n    const blockConfig = config.blocks.blocksConfig[blockData['@type']] || columnConfig;\n    return blockConfig.cloneData ? blockConfig.cloneData(blockData) : [uuid(), blockData];\n  }).filter(info => !!info); // some blocks may refuse to be copied\n\n  const blocksFieldname = getBlocksFieldname(formData);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  const newBlockData = {\n    [blocksFieldname]: _objectSpread(_objectSpread({}, formData[blocksFieldname]), Object.assign({}, ...cloneWithIds.map(_ref3 => {\n      let [id, data] = _ref3;\n      return {\n        [id]: data\n      };\n    }))),\n    [blocksLayoutFieldname]: _objectSpread(_objectSpread({}, formData[blocksLayoutFieldname]), {}, {\n      items: [...cloneWithIds.map(_ref4 => {\n        let [id] = _ref4;\n        return id;\n      })]\n    })\n  };\n  return [uuid(), newBlockData];\n}\nexport function cloneColumnsBlockData(blockData) {\n  const columnsData = blockData.data;\n  const cloneWithIds = cloneFormData(columnsData);\n  const [id, newBlockData] = cloneWithIds;\n  return [id, _objectSpread(_objectSpread({}, blockData), {}, {\n    data: newBlockData\n  })];\n}","map":{"version":3,"names":["v4","uuid","getBlocksFieldname","getBlocksLayoutFieldname","getBlocks","config","columnConfig","cloneData","blockData","cloneFormData","formData","formBlocks","cloneWithIds","filter","id","blocks","map","blockConfig","blocksConfig","info","blocksFieldname","blocksLayoutFieldname","newBlockData","Object","assign","data","items","cloneColumnsBlockData","columnsData"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@eeacms/volto-columns-block/src/utils.js"],"sourcesContent":["import { v4 as uuid } from 'uuid';\nimport {\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  getBlocks,\n} from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst columnConfig = {\n  cloneData(blockData) {\n    // console.log('column', blockData);\n    return cloneFormData(blockData);\n  },\n};\n\nfunction cloneFormData(formData) {\n  const formBlocks = getBlocks(formData);\n\n  const cloneWithIds = formBlocks\n    .filter(([id, blockData]) => {\n      return blockData.blocks ? true : !!blockData['@type']; // support \"columns\"\n    })\n    .map(([id, blockData]) => {\n      const blockConfig =\n        config.blocks.blocksConfig[blockData['@type']] || columnConfig;\n      return blockConfig.cloneData\n        ? blockConfig.cloneData(blockData)\n        : [uuid(), blockData];\n    })\n    .filter((info) => !!info); // some blocks may refuse to be copied\n\n  const blocksFieldname = getBlocksFieldname(formData);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n  const newBlockData = {\n    [blocksFieldname]: {\n      ...formData[blocksFieldname],\n      ...Object.assign(\n        {},\n        ...cloneWithIds.map(([id, data]) => ({ [id]: data })),\n      ),\n    },\n    [blocksLayoutFieldname]: {\n      ...formData[blocksLayoutFieldname],\n      items: [...cloneWithIds.map(([id]) => id)],\n    },\n  };\n  return [uuid(), newBlockData];\n}\n\nexport function cloneColumnsBlockData(blockData) {\n  const columnsData = blockData.data;\n  const cloneWithIds = cloneFormData(columnsData);\n\n  const [id, newBlockData] = cloneWithIds;\n  return [\n    id,\n    {\n      ...blockData,\n      data: newBlockData,\n    },\n  ];\n}\n"],"mappings":";AAAA,SAASA,EAAE,IAAIC,IAAI,QAAQ,MAAM;AACjC,SACEC,kBAAkB,EAClBC,wBAAwB,EACxBC,SAAS,QACJ,sBAAsB;AAC7B,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,MAAMC,YAAY,GAAG;EACnBC,SAAS,CAACC,SAAS,EAAE;IACnB;IACA,OAAOC,aAAa,CAACD,SAAS,CAAC;EACjC;AACF,CAAC;AAED,SAASC,aAAa,CAACC,QAAQ,EAAE;EAC/B,MAAMC,UAAU,GAAGP,SAAS,CAACM,QAAQ,CAAC;EAEtC,MAAME,YAAY,GAAGD,UAAU,CAC5BE,MAAM,CAAC,QAAqB;IAAA,IAApB,CAACC,EAAE,EAAEN,SAAS,CAAC;IACtB,OAAOA,SAAS,CAACO,MAAM,GAAG,IAAI,GAAG,CAAC,CAACP,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;EACzD,CAAC,CAAC,CACDQ,GAAG,CAAC,SAAqB;IAAA,IAApB,CAACF,EAAE,EAAEN,SAAS,CAAC;IACnB,MAAMS,WAAW,GACfZ,MAAM,CAACU,MAAM,CAACG,YAAY,CAACV,SAAS,CAAC,OAAO,CAAC,CAAC,IAAIF,YAAY;IAChE,OAAOW,WAAW,CAACV,SAAS,GACxBU,WAAW,CAACV,SAAS,CAACC,SAAS,CAAC,GAChC,CAACP,IAAI,EAAE,EAAEO,SAAS,CAAC;EACzB,CAAC,CAAC,CACDK,MAAM,CAAEM,IAAI,IAAK,CAAC,CAACA,IAAI,CAAC,CAAC,CAAC;;EAE7B,MAAMC,eAAe,GAAGlB,kBAAkB,CAACQ,QAAQ,CAAC;EACpD,MAAMW,qBAAqB,GAAGlB,wBAAwB,CAACO,QAAQ,CAAC;EAEhE,MAAMY,YAAY,GAAG;IACnB,CAACF,eAAe,mCACXV,QAAQ,CAACU,eAAe,CAAC,GACzBG,MAAM,CAACC,MAAM,CACd,CAAC,CAAC,EACF,GAAGZ,YAAY,CAACI,GAAG,CAAC;MAAA,IAAC,CAACF,EAAE,EAAEW,IAAI,CAAC;MAAA,OAAM;QAAE,CAACX,EAAE,GAAGW;MAAK,CAAC;IAAA,CAAC,CAAC,CACtD,CACF;IACD,CAACJ,qBAAqB,mCACjBX,QAAQ,CAACW,qBAAqB,CAAC;MAClCK,KAAK,EAAE,CAAC,GAAGd,YAAY,CAACI,GAAG,CAAC;QAAA,IAAC,CAACF,EAAE,CAAC;QAAA,OAAKA,EAAE;MAAA,EAAC;IAAC;EAE9C,CAAC;EACD,OAAO,CAACb,IAAI,EAAE,EAAEqB,YAAY,CAAC;AAC/B;AAEA,OAAO,SAASK,qBAAqB,CAACnB,SAAS,EAAE;EAC/C,MAAMoB,WAAW,GAAGpB,SAAS,CAACiB,IAAI;EAClC,MAAMb,YAAY,GAAGH,aAAa,CAACmB,WAAW,CAAC;EAE/C,MAAM,CAACd,EAAE,EAAEQ,YAAY,CAAC,GAAGV,YAAY;EACvC,OAAO,CACLE,EAAE,kCAEGN,SAAS;IACZiB,IAAI,EAAEH;EAAY,GAErB;AACH"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}