{"ast":null,"code":"/**\n * Content actions.\n * @module actions/content/content\n */\n\nimport { CREATE_CONTENT, DELETE_CONTENT, UPDATE_CONTENT, GET_CONTENT, ORDER_CONTENT, RESET_CONTENT, UPDATECOLUMNS_CONTENT, LOCK_CONTENT, UNLOCK_CONTENT, LINK_INTEGRITY_CHECK } from '@plone/volto/constants/ActionTypes';\nimport { nestContent } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\n/**\n * Create content function.\n * @function createContent\n * @param {string} url Parent URL.\n * @param {Object|Array} content Content data.\n * @param {string} subrequest Optional. Key of the subrequest.\n * @returns {Object} Create content action.\n */\nexport function createContent(url, content, subrequest) {\n  return {\n    type: CREATE_CONTENT,\n    subrequest,\n    mode: 'serial',\n    request: Array.isArray(content) ? content.map(item => ({\n      op: 'post',\n      path: url,\n      data: item\n    })) : {\n      op: 'post',\n      path: url,\n      data: nestContent(content)\n    }\n  };\n}\n\n/**\n * Delete content function.\n * @function deleteContent\n * @param {string|Array} urls Content url(s).\n * @returns {Object} Delete content action.\n */\nexport function deleteContent(urls) {\n  return {\n    type: DELETE_CONTENT,\n    mode: 'serial',\n    request: typeof urls === 'string' ? {\n      op: 'del',\n      path: urls\n    } : urls.map(url => ({\n      op: 'del',\n      path: url\n    }))\n  };\n}\n\n/**\n * Update content function.\n * @function updateContent\n * @param {string|Array} urls Content url(s).\n * @param {Object|Array} content Content data.\n * @param {Object|Array} headers Custom headers.\n * @returns {Object} Update content action.\n */\nexport function updateContent(urls, content) {\n  let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return {\n    type: UPDATE_CONTENT,\n    request: typeof urls === 'string' ? {\n      op: 'patch',\n      path: urls,\n      data: nestContent(content),\n      headers: headers\n    } : urls.map((url, index) => ({\n      op: 'patch',\n      path: url,\n      data: nestContent(content[index]),\n      headers: headers\n    }))\n  };\n}\n\n/**\n * Order content function\n * @function orderContent\n * @param {string} parent Parent url\n * @param {string} url Content url\n * @param {string|number} delta Order delta\n * @param {Array} subset Subset ids\n * @returns {Object} Order content action\n */\nexport function orderContent(parent, url, delta, subset) {\n  return {\n    type: ORDER_CONTENT,\n    request: {\n      op: 'patch',\n      path: parent,\n      data: {\n        ordering: {\n          obj_id: url,\n          delta,\n          subset_ids: subset\n        }\n      }\n    }\n  };\n}\n\n/**\n * Sort content function\n * @function sortContent\n * @param {string} url Content url\n * @param {string} on Sort on index\n * @param {string} order Sort order\n * @returns {Object} Sort content action\n */\nexport function sortContent(url, on, order) {\n  return {\n    type: UPDATE_CONTENT,\n    sort: {\n      on,\n      order\n    },\n    request: {\n      op: 'patch',\n      path: url,\n      data: {\n        sort: {\n          on,\n          order\n        }\n      }\n    }\n  };\n}\n\n/**\n * Get content function\n * @function getContent\n * @param {string} url Content url\n * @param {string} version Version id\n * @param {string} subrequest Key of the subrequest.\n * @param {boolean} fullobjects If full object information should be retrieved\n * @returns {Object} Get content action\n */\nexport function getContent(url) {\n  let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let subrequest = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let page = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  let fullobjects = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  const {\n    settings\n  } = config;\n  const query = Object.assign({}, fullobjects || settings.bbb_getContentFetchesFullobjects ? {\n    fullobjects: true\n  } : {}, page ? {\n    b_start: settings.defaultPageSize * (page - 1),\n    b_size: settings.defaultPageSize\n  } : {}, settings.isMultilingual ? {\n    expand: 'translations'\n  } : {});\n  let qs = Object.keys(query).map(function (key) {\n    return key + '=' + query[key];\n  }).join('&');\n  return {\n    type: GET_CONTENT,\n    subrequest,\n    request: {\n      op: 'get',\n      path: `${url}${version ? `/@history/${version}` : ''}${qs ? `?${qs}` : ''}`\n    }\n  };\n}\n\n/**\n * Reset content function\n * @function resetContent\n * @param {string} subrequest Key of the subrequest.\n * @returns {Object} Get content action\n */\nexport function resetContent() {\n  let subrequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return {\n    type: RESET_CONTENT,\n    subrequest\n  };\n}\n\n/**\n * Add, remove or order indexes\n * @param {string} url Content url\n * @param {string} index indexes with order\n * @returns {Object} Index content action\n */\nexport function updateColumnsContent(url, index) {\n  return {\n    type: UPDATECOLUMNS_CONTENT,\n    indexcolumns: index\n  };\n}\n\n/**\n * Lock content function.\n * @function lockContent\n * @param {string} urls Content url(s)\n * @returns {Object} Lock content action.\n */\nexport function lockContent(urls) {\n  return {\n    type: LOCK_CONTENT,\n    mode: 'serial',\n    request: typeof urls === 'string' ? {\n      op: 'post',\n      path: `${urls}/@lock`\n    } : urls.map(url => ({\n      op: 'post',\n      path: `${url}/@lock`\n    }))\n  };\n}\n\n/**\n * Unlock content function.\n * @function unlockContent\n * @param {string|Array} urls Content url(s).\n * @returns {Object} Unlock content action.\n */\nexport function unlockContent(urls) {\n  let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return {\n    type: UNLOCK_CONTENT,\n    mode: 'serial',\n    request: typeof urls === 'string' ? {\n      op: 'del',\n      path: `${urls}/@lock`,\n      data: force ? {\n        force: true\n      } : {}\n    } : urls.map(url => ({\n      op: 'del',\n      path: `${url}/@lock`,\n      data: force ? {\n        force: true\n      } : {}\n    }))\n  };\n}\nexport function linkIntegrityCheck(selection) {\n  return {\n    type: LINK_INTEGRITY_CHECK,\n    mode: 'serial',\n    request: {\n      op: 'get',\n      path: '@linkintegrity?' + selection.map(uid => `uids=${uid}`).join('&')\n    }\n  };\n}","map":{"version":3,"names":["CREATE_CONTENT","DELETE_CONTENT","UPDATE_CONTENT","GET_CONTENT","ORDER_CONTENT","RESET_CONTENT","UPDATECOLUMNS_CONTENT","LOCK_CONTENT","UNLOCK_CONTENT","LINK_INTEGRITY_CHECK","nestContent","config","createContent","url","content","subrequest","type","mode","request","Array","isArray","map","item","op","path","data","deleteContent","urls","updateContent","headers","index","orderContent","parent","delta","subset","ordering","obj_id","subset_ids","sortContent","on","order","sort","getContent","version","page","fullobjects","settings","query","Object","assign","bbb_getContentFetchesFullobjects","b_start","defaultPageSize","b_size","isMultilingual","expand","qs","keys","key","join","resetContent","updateColumnsContent","indexcolumns","lockContent","unlockContent","force","linkIntegrityCheck","selection","uid"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/@plone/volto/src/actions/content/content.js"],"sourcesContent":["/**\n * Content actions.\n * @module actions/content/content\n */\n\nimport {\n  CREATE_CONTENT,\n  DELETE_CONTENT,\n  UPDATE_CONTENT,\n  GET_CONTENT,\n  ORDER_CONTENT,\n  RESET_CONTENT,\n  UPDATECOLUMNS_CONTENT,\n  LOCK_CONTENT,\n  UNLOCK_CONTENT,\n  LINK_INTEGRITY_CHECK,\n} from '@plone/volto/constants/ActionTypes';\nimport { nestContent } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\n/**\n * Create content function.\n * @function createContent\n * @param {string} url Parent URL.\n * @param {Object|Array} content Content data.\n * @param {string} subrequest Optional. Key of the subrequest.\n * @returns {Object} Create content action.\n */\nexport function createContent(url, content, subrequest) {\n  return {\n    type: CREATE_CONTENT,\n    subrequest,\n    mode: 'serial',\n    request: Array.isArray(content)\n      ? content.map((item) => ({ op: 'post', path: url, data: item }))\n      : { op: 'post', path: url, data: nestContent(content) },\n  };\n}\n\n/**\n * Delete content function.\n * @function deleteContent\n * @param {string|Array} urls Content url(s).\n * @returns {Object} Delete content action.\n */\nexport function deleteContent(urls) {\n  return {\n    type: DELETE_CONTENT,\n    mode: 'serial',\n    request:\n      typeof urls === 'string'\n        ? { op: 'del', path: urls }\n        : urls.map((url) => ({ op: 'del', path: url })),\n  };\n}\n\n/**\n * Update content function.\n * @function updateContent\n * @param {string|Array} urls Content url(s).\n * @param {Object|Array} content Content data.\n * @param {Object|Array} headers Custom headers.\n * @returns {Object} Update content action.\n */\nexport function updateContent(urls, content, headers = {}) {\n  return {\n    type: UPDATE_CONTENT,\n    request:\n      typeof urls === 'string'\n        ? {\n            op: 'patch',\n            path: urls,\n            data: nestContent(content),\n            headers: headers,\n          }\n        : urls.map((url, index) => ({\n            op: 'patch',\n            path: url,\n            data: nestContent(content[index]),\n            headers: headers,\n          })),\n  };\n}\n\n/**\n * Order content function\n * @function orderContent\n * @param {string} parent Parent url\n * @param {string} url Content url\n * @param {string|number} delta Order delta\n * @param {Array} subset Subset ids\n * @returns {Object} Order content action\n */\nexport function orderContent(parent, url, delta, subset) {\n  return {\n    type: ORDER_CONTENT,\n    request: {\n      op: 'patch',\n      path: parent,\n      data: { ordering: { obj_id: url, delta, subset_ids: subset } },\n    },\n  };\n}\n\n/**\n * Sort content function\n * @function sortContent\n * @param {string} url Content url\n * @param {string} on Sort on index\n * @param {string} order Sort order\n * @returns {Object} Sort content action\n */\nexport function sortContent(url, on, order) {\n  return {\n    type: UPDATE_CONTENT,\n    sort: { on, order },\n    request: {\n      op: 'patch',\n      path: url,\n      data: { sort: { on, order } },\n    },\n  };\n}\n\n/**\n * Get content function\n * @function getContent\n * @param {string} url Content url\n * @param {string} version Version id\n * @param {string} subrequest Key of the subrequest.\n * @param {boolean} fullobjects If full object information should be retrieved\n * @returns {Object} Get content action\n */\nexport function getContent(\n  url,\n  version = null,\n  subrequest = null,\n  page = null,\n  fullobjects = false,\n) {\n  const { settings } = config;\n  const query = Object.assign(\n    {},\n    fullobjects || settings.bbb_getContentFetchesFullobjects\n      ? { fullobjects: true }\n      : {},\n    page\n      ? {\n          b_start: settings.defaultPageSize * (page - 1),\n          b_size: settings.defaultPageSize,\n        }\n      : {},\n    settings.isMultilingual ? { expand: 'translations' } : {},\n  );\n\n  let qs = Object.keys(query)\n    .map(function (key) {\n      return key + '=' + query[key];\n    })\n    .join('&');\n\n  return {\n    type: GET_CONTENT,\n    subrequest,\n    request: {\n      op: 'get',\n      path: `${url}${version ? `/@history/${version}` : ''}${\n        qs ? `?${qs}` : ''\n      }`,\n    },\n  };\n}\n\n/**\n * Reset content function\n * @function resetContent\n * @param {string} subrequest Key of the subrequest.\n * @returns {Object} Get content action\n */\nexport function resetContent(subrequest = null) {\n  return {\n    type: RESET_CONTENT,\n    subrequest,\n  };\n}\n\n/**\n * Add, remove or order indexes\n * @param {string} url Content url\n * @param {string} index indexes with order\n * @returns {Object} Index content action\n */\nexport function updateColumnsContent(url, index) {\n  return {\n    type: UPDATECOLUMNS_CONTENT,\n    indexcolumns: index,\n  };\n}\n\n/**\n * Lock content function.\n * @function lockContent\n * @param {string} urls Content url(s)\n * @returns {Object} Lock content action.\n */\nexport function lockContent(urls) {\n  return {\n    type: LOCK_CONTENT,\n    mode: 'serial',\n    request:\n      typeof urls === 'string'\n        ? { op: 'post', path: `${urls}/@lock` }\n        : urls.map((url) => ({ op: 'post', path: `${url}/@lock` })),\n  };\n}\n\n/**\n * Unlock content function.\n * @function unlockContent\n * @param {string|Array} urls Content url(s).\n * @returns {Object} Unlock content action.\n */\nexport function unlockContent(urls, force = false) {\n  return {\n    type: UNLOCK_CONTENT,\n    mode: 'serial',\n    request:\n      typeof urls === 'string'\n        ? {\n            op: 'del',\n            path: `${urls}/@lock`,\n            data: force ? { force: true } : {},\n          }\n        : urls.map((url) => ({\n            op: 'del',\n            path: `${url}/@lock`,\n            data: force ? { force: true } : {},\n          })),\n  };\n}\n\nexport function linkIntegrityCheck(selection) {\n  return {\n    type: LINK_INTEGRITY_CHECK,\n    mode: 'serial',\n    request: {\n      op: 'get',\n      path: '@linkintegrity?' + selection.map((uid) => `uids=${uid}`).join('&'),\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}