{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/volto-form-block/src/components/Widget/SelectWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * SelectWidget component.\n * @module components/manage/Widgets/SelectWidget\n * added aria- attributes\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getVocabFromHint, getVocabFromField, getVocabFromItems } from '@plone/volto/helpers';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { getVocabulary, getVocabularyTokenTitle } from '@plone/volto/actions';\nimport { normalizeValue } from '@plone/volto/components/manage/Widgets/SelectUtils';\nimport { customSelectStyles, DropdownIndicator, ClearIndicator, Option, selectTheme, MenuList } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { getReactSelectAriaLiveMessages, getReactSelectScreenReaderStatus } from 'volto-form-block/helpers/react-select';\nconst messages = defineMessages({\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  idTitle: {\n    \"id\": \"Short Name\",\n    \"defaultMessage\": \"Short Name\"\n  },\n  idDescription: {\n    \"id\": \"Used for programmatic access to the fieldset.\",\n    \"defaultMessage\": \"Used for programmatic access to the fieldset.\"\n  },\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  description: {\n    \"id\": \"Description\",\n    \"defaultMessage\": \"Description\"\n  },\n  close: {\n    \"id\": \"Close\",\n    \"defaultMessage\": \"Close\"\n  },\n  choices: {\n    \"id\": \"Choices\",\n    \"defaultMessage\": \"Choices\"\n  },\n  required: {\n    \"id\": \"Required\",\n    \"defaultMessage\": \"Required\"\n  },\n  select: {\n    \"id\": \"Select\\u2026\",\n    \"defaultMessage\": \"Select\\u2026\"\n  },\n  no_value: {\n    \"id\": \"No value\",\n    \"defaultMessage\": \"No value\"\n  },\n  no_options: {\n    \"id\": \"No options\",\n    \"defaultMessage\": \"No options\"\n  }\n});\n\n/**\n * SelectWidget component class.\n * @function SelectWidget\n * @returns {string} Markup of the component.\n */\nclass SelectWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    var _this$props$choices;\n    if ((!this.props.choices || ((_this$props$choices = this.props.choices) === null || _this$props$choices === void 0 ? void 0 : _this$props$choices.length) === 0) && this.props.vocabBaseUrl) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.intl.locale\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$placehold;\n    const {\n      id,\n      choices,\n      value,\n      intl,\n      onChange,\n      required,\n      invalid,\n      title\n    } = this.props;\n    const normalizedValue = normalizeValue(choices, value, intl);\n    // Make sure that both disabled and isDisabled (from the DX layout feat work)\n    const disabled = this.props.disabled || this.props.isDisabled;\n    const Select = this.props.reactSelect.default;\n    let options = this.props.vocabBaseUrl ? this.props.choices : [..._map(choices, option => ({\n      value: option[0],\n      label:\n      // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n      option[1] !== 'None' && option[1] ? option[1] : option[0]\n    })),\n    // Only set \"no-value\" option if there's no default in the field\n    // TODO: also if this.props.defaultValue?\n    ...(this.props.noValueOption && !this.props.default ? [{\n      label: this.props.intl.formatMessage(messages.no_value),\n      value: 'no-value'\n    }] : [])];\n    const isMulti = this.props.isMulti ? this.props.isMulti : id === 'roles' || id === 'groups';\n    let attributes = {};\n    if (required) {\n      attributes.required = true;\n      attributes['aria-required'] = true;\n    }\n    const isInvalid = invalid === true || invalid === 'true';\n    if (isInvalid) {\n      attributes['aria-invalid'] = true;\n    }\n    return __jsx(FormFieldWrapper, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 7\n      }\n    }), __jsx(Select, _extends({\n      id: `field-${id}`,\n      key: choices,\n      name: id,\n      isDisabled: disabled,\n      isSearchable: true,\n      className: \"react-select-container\",\n      classNamePrefix: \"react-select\",\n      isMulti: isMulti,\n      options: options\n    }, attributes, {\n      styles: customSelectStyles,\n      theme: selectTheme,\n      components: _objectSpread(_objectSpread({}, (options === null || options === void 0 ? void 0 : options.length) > 25 && {\n        MenuList\n      }), {}, {\n        DropdownIndicator,\n        ClearIndicator,\n        Option: this.props.customOptionStyling || Option\n      }),\n      value: normalizedValue,\n      placeholder: (_this$props$placehold = this.props.placeholder) !== null && _this$props$placehold !== void 0 ? _this$props$placehold : this.props.intl.formatMessage(messages.select),\n      onChange: selectedOption => {\n        if (isMulti) {\n          return onChange(id, selectedOption.map(el => el.value));\n        }\n        return onChange(id, selectedOption && selectedOption.value !== 'no-value' ? selectedOption.value : undefined);\n      },\n      isClearable: true,\n      \"aria-label\": title,\n      ariaLiveMessages: getReactSelectAriaLiveMessages(intl),\n      screenReaderStatus: getReactSelectScreenReaderStatus(intl),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }\n    })));\n  }\n}\n_defineProperty(SelectWidget, \"propTypes\", {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  getVocabulary: PropTypes.func.isRequired,\n  getVocabularyTokenTitle: PropTypes.func.isRequired,\n  choices: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.array])),\n  items: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  widgetOptions: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.bool, PropTypes.func, PropTypes.array]),\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  wrapped: PropTypes.bool,\n  noValueOption: PropTypes.bool,\n  customOptionStyling: PropTypes.any,\n  isMulti: PropTypes.bool,\n  placeholder: PropTypes.string\n});\n_defineProperty(SelectWidget, \"defaultProps\", {\n  description: null,\n  required: false,\n  items: {\n    vocabulary: null\n  },\n  widgetOptions: {\n    vocabulary: null\n  },\n  error: [],\n  choices: [],\n  value: null,\n  onChange: () => {},\n  onBlur: () => {},\n  onClick: () => {},\n  onEdit: null,\n  onDelete: null,\n  noValueOption: true,\n  customOptionStyling: null\n});\nexport const SelectWidgetComponent = injectIntl(SelectWidget);\nexport default compose(injectLazyLibs(['reactSelect']), connect((state, props) => {\n  var _state$vocabularies, _state$vocabularies$v, _state$vocabularies$v2;\n  const vocabBaseUrl = !props.choices ? getVocabFromHint(props) || getVocabFromField(props) || getVocabFromItems(props) : '';\n  const vocabState = (_state$vocabularies = state.vocabularies) === null || _state$vocabularies === void 0 ? void 0 : (_state$vocabularies$v = _state$vocabularies[vocabBaseUrl]) === null || _state$vocabularies$v === void 0 ? void 0 : (_state$vocabularies$v2 = _state$vocabularies$v.subrequests) === null || _state$vocabularies$v2 === void 0 ? void 0 : _state$vocabularies$v2[props.intl.locale];\n\n  // If the schema already has the choices in it, then do not try to get the vocab,\n  // even if there is one\n  if (props.choices) {\n    return {\n      choices: props.choices\n    };\n  } else if (vocabState) {\n    var _vocabState$items;\n    return {\n      vocabBaseUrl,\n      choices: (_vocabState$items = vocabState === null || vocabState === void 0 ? void 0 : vocabState.items) !== null && _vocabState$items !== void 0 ? _vocabState$items : []\n    };\n    // There is a moment that vocabState is not there yet, so we need to pass the\n    // vocabBaseUrl to the component.\n  } else if (vocabBaseUrl) {\n    return {\n      vocabBaseUrl\n    };\n  }\n  return {};\n}, {\n  getVocabulary,\n  getVocabularyTokenTitle\n}))(SelectWidgetComponent);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","defineMessages","injectIntl","getVocabFromHint","getVocabFromField","getVocabFromItems","FormFieldWrapper","getVocabulary","getVocabularyTokenTitle","normalizeValue","customSelectStyles","DropdownIndicator","ClearIndicator","Option","selectTheme","MenuList","injectLazyLibs","getReactSelectAriaLiveMessages","getReactSelectScreenReaderStatus","messages","default","idTitle","idDescription","title","description","close","choices","required","select","no_value","no_options","SelectWidget","componentDidMount","props","length","vocabBaseUrl","vocabNameOrURL","size","subrequest","intl","locale","render","id","value","onChange","invalid","normalizedValue","disabled","isDisabled","Select","reactSelect","options","option","label","noValueOption","formatMessage","isMulti","attributes","isInvalid","customOptionStyling","placeholder","selectedOption","map","el","undefined","string","isRequired","bool","error","arrayOf","func","oneOfType","object","array","items","shape","vocabulary","widgetOptions","onBlur","onClick","onEdit","onDelete","wrapped","any","SelectWidgetComponent","state","vocabState","vocabularies","subrequests"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/volto-form-block/src/components/Widget/SelectWidget.jsx"],"sourcesContent":["/**\n * SelectWidget component.\n * @module components/manage/Widgets/SelectWidget\n * added aria- attributes\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { map } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport {\n  getVocabFromHint,\n  getVocabFromField,\n  getVocabFromItems,\n} from '@plone/volto/helpers';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { getVocabulary, getVocabularyTokenTitle } from '@plone/volto/actions';\nimport { normalizeValue } from '@plone/volto/components/manage/Widgets/SelectUtils';\n\nimport {\n  customSelectStyles,\n  DropdownIndicator,\n  ClearIndicator,\n  Option,\n  selectTheme,\n  MenuList,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport {\n  getReactSelectAriaLiveMessages,\n  getReactSelectScreenReaderStatus,\n} from 'volto-form-block/helpers/react-select';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  close: {\n    id: 'Close',\n    defaultMessage: 'Close',\n  },\n  choices: {\n    id: 'Choices',\n    defaultMessage: 'Choices',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  no_value: {\n    id: 'No value',\n    defaultMessage: 'No value',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n});\n\n/**\n * SelectWidget component class.\n * @function SelectWidget\n * @returns {string} Markup of the component.\n */\nclass SelectWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    getVocabulary: PropTypes.func.isRequired,\n    getVocabularyTokenTitle: PropTypes.func.isRequired,\n    choices: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    ),\n    items: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    widgetOptions: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    value: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.array,\n    ]),\n    onChange: PropTypes.func.isRequired,\n    onBlur: PropTypes.func,\n    onClick: PropTypes.func,\n    onEdit: PropTypes.func,\n    onDelete: PropTypes.func,\n    wrapped: PropTypes.bool,\n    noValueOption: PropTypes.bool,\n    customOptionStyling: PropTypes.any,\n    isMulti: PropTypes.bool,\n    placeholder: PropTypes.string,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      vocabulary: null,\n    },\n    widgetOptions: {\n      vocabulary: null,\n    },\n    error: [],\n    choices: [],\n    value: null,\n    onChange: () => {},\n    onBlur: () => {},\n    onClick: () => {},\n    onEdit: null,\n    onDelete: null,\n    noValueOption: true,\n    customOptionStyling: null,\n  };\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (\n      (!this.props.choices || this.props.choices?.length === 0) &&\n      this.props.vocabBaseUrl\n    ) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.intl.locale,\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      choices,\n      value,\n      intl,\n      onChange,\n      required,\n      invalid,\n      title,\n    } = this.props;\n    const normalizedValue = normalizeValue(choices, value, intl);\n    // Make sure that both disabled and isDisabled (from the DX layout feat work)\n    const disabled = this.props.disabled || this.props.isDisabled;\n    const Select = this.props.reactSelect.default;\n\n    let options = this.props.vocabBaseUrl\n      ? this.props.choices\n      : [\n          ...map(choices, (option) => ({\n            value: option[0],\n            label:\n              // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n              option[1] !== 'None' && option[1] ? option[1] : option[0],\n          })),\n          // Only set \"no-value\" option if there's no default in the field\n          // TODO: also if this.props.defaultValue?\n          ...(this.props.noValueOption && !this.props.default\n            ? [\n                {\n                  label: this.props.intl.formatMessage(messages.no_value),\n                  value: 'no-value',\n                },\n              ]\n            : []),\n        ];\n\n    const isMulti = this.props.isMulti\n      ? this.props.isMulti\n      : id === 'roles' || id === 'groups';\n\n    let attributes = {};\n    if (required) {\n      attributes.required = true;\n      attributes['aria-required'] = true;\n    }\n\n    const isInvalid = invalid === true || invalid === 'true';\n    if (isInvalid) {\n      attributes['aria-invalid'] = true;\n    }\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <Select\n          id={`field-${id}`}\n          key={choices}\n          name={id}\n          isDisabled={disabled}\n          isSearchable={true}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          isMulti={isMulti}\n          options={options}\n          {...attributes}\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{\n            ...(options?.length > 25 && {\n              MenuList,\n            }),\n            DropdownIndicator,\n            ClearIndicator,\n            Option: this.props.customOptionStyling || Option,\n          }}\n          value={normalizedValue}\n          placeholder={\n            this.props.placeholder ??\n            this.props.intl.formatMessage(messages.select)\n          }\n          onChange={(selectedOption) => {\n            if (isMulti) {\n              return onChange(\n                id,\n                selectedOption.map((el) => el.value),\n              );\n            }\n            return onChange(\n              id,\n              selectedOption && selectedOption.value !== 'no-value'\n                ? selectedOption.value\n                : undefined,\n            );\n          }}\n          isClearable\n          aria-label={title}\n          ariaLiveMessages={getReactSelectAriaLiveMessages(intl)}\n          screenReaderStatus={getReactSelectScreenReaderStatus(intl)}\n        />\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport const SelectWidgetComponent = injectIntl(SelectWidget);\n\nexport default compose(\n  injectLazyLibs(['reactSelect']),\n  connect(\n    (state, props) => {\n      const vocabBaseUrl = !props.choices\n        ? getVocabFromHint(props) ||\n          getVocabFromField(props) ||\n          getVocabFromItems(props)\n        : '';\n\n      const vocabState =\n        state.vocabularies?.[vocabBaseUrl]?.subrequests?.[props.intl.locale];\n\n      // If the schema already has the choices in it, then do not try to get the vocab,\n      // even if there is one\n      if (props.choices) {\n        return {\n          choices: props.choices,\n        };\n      } else if (vocabState) {\n        return {\n          vocabBaseUrl,\n          choices: vocabState?.items ?? [],\n        };\n        // There is a moment that vocabState is not there yet, so we need to pass the\n        // vocabBaseUrl to the component.\n      } else if (vocabBaseUrl) {\n        return {\n          vocabBaseUrl,\n        };\n      }\n      return {};\n    },\n    { getVocabulary, getVocabularyTokenTitle },\n  ),\n)(SelectWidgetComponent);\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,OAAO,QAAQ,OAAO;AAE/B,SAASC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AACvD,SACEC,gBAAgB,EAChBC,iBAAiB,EACjBC,iBAAiB,QACZ,sBAAsB;AAC7B,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,aAAa,EAAEC,uBAAuB,QAAQ,sBAAsB;AAC7E,SAASC,cAAc,QAAQ,oDAAoD;AAEnF,SACEC,kBAAkB,EAClBC,iBAAiB,EACjBC,cAAc,EACdC,MAAM,EACNC,WAAW,EACXC,QAAQ,QACH,sDAAsD;AAC7D,SAASC,cAAc,QAAQ,wCAAwC;AACvE,SACEC,8BAA8B,EAC9BC,gCAAgC,QAC3B,uCAAuC;AAE9C,MAAMC,QAAQ,GAAGlB,cAAc,CAAC;EAC9BmB,OAAO;IAAA;IAAA;EAAA,CAGN;EACDC,OAAO;IAAA;IAAA;EAAA,CAGN;EACDC,aAAa;IAAA;IAAA;EAAA,CAGZ;EACDC,KAAK;IAAA;IAAA;EAAA,CAGJ;EACDC,WAAW;IAAA;IAAA;EAAA,CAGV;EACDC,KAAK;IAAA;IAAA;EAAA,CAGJ;EACDC,OAAO;IAAA;IAAA;EAAA,CAGN;EACDC,QAAQ;IAAA;IAAA;EAAA,CAGP;EACDC,MAAM;IAAA;IAAA;EAAA,CAGL;EACDC,QAAQ;IAAA;IAAA;EAAA,CAGP;EACDC,UAAU;IAAA;IAAA;EAAA;AAIZ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASlC,SAAS,CAAC;EACnC;AACF;AACA;AACA;AACA;;EAqCE;AACF;AACA;AACA;AACA;;EAsBE;AACF;AACA;AACA;AACA;EACEmC,iBAAiB,GAAG;IAAA;IAClB,IACE,CAAC,CAAC,IAAI,CAACC,KAAK,CAACP,OAAO,IAAI,4BAAI,CAACO,KAAK,CAACP,OAAO,wDAAlB,oBAAoBQ,MAAM,MAAK,CAAC,KACxD,IAAI,CAACD,KAAK,CAACE,YAAY,EACvB;MACA,IAAI,CAACF,KAAK,CAAC1B,aAAa,CAAC;QACvB6B,cAAc,EAAE,IAAI,CAACH,KAAK,CAACE,YAAY;QACvCE,IAAI,EAAE,CAAC,CAAC;QACRC,UAAU,EAAE,IAAI,CAACL,KAAK,CAACM,IAAI,CAACC;MAC9B,CAAC,CAAC;IACJ;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEC,MAAM,GAAG;IAAA;IACP,MAAM;MACJC,EAAE;MACFhB,OAAO;MACPiB,KAAK;MACLJ,IAAI;MACJK,QAAQ;MACRjB,QAAQ;MACRkB,OAAO;MACPtB;IACF,CAAC,GAAG,IAAI,CAACU,KAAK;IACd,MAAMa,eAAe,GAAGrC,cAAc,CAACiB,OAAO,EAAEiB,KAAK,EAAEJ,IAAI,CAAC;IAC5D;IACA,MAAMQ,QAAQ,GAAG,IAAI,CAACd,KAAK,CAACc,QAAQ,IAAI,IAAI,CAACd,KAAK,CAACe,UAAU;IAC7D,MAAMC,MAAM,GAAG,IAAI,CAAChB,KAAK,CAACiB,WAAW,CAAC9B,OAAO;IAE7C,IAAI+B,OAAO,GAAG,IAAI,CAAClB,KAAK,CAACE,YAAY,GACjC,IAAI,CAACF,KAAK,CAACP,OAAO,GAClB,CACE,GAAG,KAAIA,OAAO,EAAG0B,MAAM,KAAM;MAC3BT,KAAK,EAAES,MAAM,CAAC,CAAC,CAAC;MAChBC,KAAK;MACH;MACAD,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,IAAIA,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IACH;IACA;IACA,IAAI,IAAI,CAACnB,KAAK,CAACqB,aAAa,IAAI,CAAC,IAAI,CAACrB,KAAK,CAACb,OAAO,GAC/C,CACE;MACEiC,KAAK,EAAE,IAAI,CAACpB,KAAK,CAACM,IAAI,CAACgB,aAAa,CAACpC,QAAQ,CAACU,QAAQ,CAAC;MACvDc,KAAK,EAAE;IACT,CAAC,CACF,GACD,EAAE,CAAC,CACR;IAEL,MAAMa,OAAO,GAAG,IAAI,CAACvB,KAAK,CAACuB,OAAO,GAC9B,IAAI,CAACvB,KAAK,CAACuB,OAAO,GAClBd,EAAE,KAAK,OAAO,IAAIA,EAAE,KAAK,QAAQ;IAErC,IAAIe,UAAU,GAAG,CAAC,CAAC;IACnB,IAAI9B,QAAQ,EAAE;MACZ8B,UAAU,CAAC9B,QAAQ,GAAG,IAAI;MAC1B8B,UAAU,CAAC,eAAe,CAAC,GAAG,IAAI;IACpC;IAEA,MAAMC,SAAS,GAAGb,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,MAAM;IACxD,IAAIa,SAAS,EAAE;MACbD,UAAU,CAAC,cAAc,CAAC,GAAG,IAAI;IACnC;IAEA,OACE,MAAC,gBAAgB,eAAK,IAAI,CAACxB,KAAK;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,IAC9B,MAAC,MAAM;MACL,EAAE,EAAG,SAAQS,EAAG,EAAE;MAClB,GAAG,EAAEhB,OAAQ;MACb,IAAI,EAAEgB,EAAG;MACT,UAAU,EAAEK,QAAS;MACrB,YAAY,EAAE,IAAK;MACnB,SAAS,EAAC,wBAAwB;MAClC,eAAe,EAAC,cAAc;MAC9B,OAAO,EAAES,OAAQ;MACjB,OAAO,EAAEL;IAAQ,GACbM,UAAU;MACd,MAAM,EAAE/C,kBAAmB;MAC3B,KAAK,EAAEI,WAAY;MACnB,UAAU,kCACJ,CAAAqC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEjB,MAAM,IAAG,EAAE,IAAI;QAC1BnB;MACF,CAAC;QACDJ,iBAAiB;QACjBC,cAAc;QACdC,MAAM,EAAE,IAAI,CAACoB,KAAK,CAAC0B,mBAAmB,IAAI9C;MAAM,EAChD;MACF,KAAK,EAAEiC,eAAgB;MACvB,WAAW,2BACT,IAAI,CAACb,KAAK,CAAC2B,WAAW,yEACtB,IAAI,CAAC3B,KAAK,CAACM,IAAI,CAACgB,aAAa,CAACpC,QAAQ,CAACS,MAAM,CAC9C;MACD,QAAQ,EAAGiC,cAAc,IAAK;QAC5B,IAAIL,OAAO,EAAE;UACX,OAAOZ,QAAQ,CACbF,EAAE,EACFmB,cAAc,CAACC,GAAG,CAAEC,EAAE,IAAKA,EAAE,CAACpB,KAAK,CAAC,CACrC;QACH;QACA,OAAOC,QAAQ,CACbF,EAAE,EACFmB,cAAc,IAAIA,cAAc,CAAClB,KAAK,KAAK,UAAU,GACjDkB,cAAc,CAAClB,KAAK,GACpBqB,SAAS,CACd;MACH,CAAE;MACF,WAAW;MACX,cAAYzC,KAAM;MAClB,gBAAgB,EAAEN,8BAA8B,CAACsB,IAAI,CAAE;MACvD,kBAAkB,EAAErB,gCAAgC,CAACqB,IAAI,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAC3D,CACe;EAEvB;AACF;AAAC,gBAjMKR,YAAY,eAMG;EACjBW,EAAE,EAAE5C,SAAS,CAACmE,MAAM,CAACC,UAAU;EAC/B3C,KAAK,EAAEzB,SAAS,CAACmE,MAAM,CAACC,UAAU;EAClC1C,WAAW,EAAE1B,SAAS,CAACmE,MAAM;EAC7BtC,QAAQ,EAAE7B,SAAS,CAACqE,IAAI;EACxBC,KAAK,EAAEtE,SAAS,CAACuE,OAAO,CAACvE,SAAS,CAACmE,MAAM,CAAC;EAC1C1D,aAAa,EAAET,SAAS,CAACwE,IAAI,CAACJ,UAAU;EACxC1D,uBAAuB,EAAEV,SAAS,CAACwE,IAAI,CAACJ,UAAU;EAClDxC,OAAO,EAAE5B,SAAS,CAACuE,OAAO,CACxBvE,SAAS,CAACyE,SAAS,CAAC,CAACzE,SAAS,CAAC0E,MAAM,EAAE1E,SAAS,CAAC2E,KAAK,CAAC,CAAC,CACzD;EACDC,KAAK,EAAE5E,SAAS,CAAC6E,KAAK,CAAC;IACrBC,UAAU,EAAE9E,SAAS,CAAC0E;EACxB,CAAC,CAAC;EACFK,aAAa,EAAE/E,SAAS,CAAC6E,KAAK,CAAC;IAC7BC,UAAU,EAAE9E,SAAS,CAAC0E;EACxB,CAAC,CAAC;EACF7B,KAAK,EAAE7C,SAAS,CAACyE,SAAS,CAAC,CACzBzE,SAAS,CAAC0E,MAAM,EAChB1E,SAAS,CAACmE,MAAM,EAChBnE,SAAS,CAACqE,IAAI,EACdrE,SAAS,CAACwE,IAAI,EACdxE,SAAS,CAAC2E,KAAK,CAChB,CAAC;EACF7B,QAAQ,EAAE9C,SAAS,CAACwE,IAAI,CAACJ,UAAU;EACnCY,MAAM,EAAEhF,SAAS,CAACwE,IAAI;EACtBS,OAAO,EAAEjF,SAAS,CAACwE,IAAI;EACvBU,MAAM,EAAElF,SAAS,CAACwE,IAAI;EACtBW,QAAQ,EAAEnF,SAAS,CAACwE,IAAI;EACxBY,OAAO,EAAEpF,SAAS,CAACqE,IAAI;EACvBb,aAAa,EAAExD,SAAS,CAACqE,IAAI;EAC7BR,mBAAmB,EAAE7D,SAAS,CAACqF,GAAG;EAClC3B,OAAO,EAAE1D,SAAS,CAACqE,IAAI;EACvBP,WAAW,EAAE9D,SAAS,CAACmE;AACzB,CAAC;AAAA,gBAxCGlC,YAAY,kBA+CM;EACpBP,WAAW,EAAE,IAAI;EACjBG,QAAQ,EAAE,KAAK;EACf+C,KAAK,EAAE;IACLE,UAAU,EAAE;EACd,CAAC;EACDC,aAAa,EAAE;IACbD,UAAU,EAAE;EACd,CAAC;EACDR,KAAK,EAAE,EAAE;EACT1C,OAAO,EAAE,EAAE;EACXiB,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAE,MAAM,CAAC,CAAC;EAClBkC,MAAM,EAAE,MAAM,CAAC,CAAC;EAChBC,OAAO,EAAE,MAAM,CAAC,CAAC;EACjBC,MAAM,EAAE,IAAI;EACZC,QAAQ,EAAE,IAAI;EACd3B,aAAa,EAAE,IAAI;EACnBK,mBAAmB,EAAE;AACvB,CAAC;AAiIH,OAAO,MAAMyB,qBAAqB,GAAGlF,UAAU,CAAC6B,YAAY,CAAC;AAE7D,eAAe/B,OAAO,CACpBgB,cAAc,CAAC,CAAC,aAAa,CAAC,CAAC,EAC/BjB,OAAO,CACL,CAACsF,KAAK,EAAEpD,KAAK,KAAK;EAAA;EAChB,MAAME,YAAY,GAAG,CAACF,KAAK,CAACP,OAAO,GAC/BvB,gBAAgB,CAAC8B,KAAK,CAAC,IACvB7B,iBAAiB,CAAC6B,KAAK,CAAC,IACxB5B,iBAAiB,CAAC4B,KAAK,CAAC,GACxB,EAAE;EAEN,MAAMqD,UAAU,0BACdD,KAAK,CAACE,YAAY,iFAAlB,oBAAqBpD,YAAY,CAAC,oFAAlC,sBAAoCqD,WAAW,2DAA/C,uBAAkDvD,KAAK,CAACM,IAAI,CAACC,MAAM,CAAC;;EAEtE;EACA;EACA,IAAIP,KAAK,CAACP,OAAO,EAAE;IACjB,OAAO;MACLA,OAAO,EAAEO,KAAK,CAACP;IACjB,CAAC;EACH,CAAC,MAAM,IAAI4D,UAAU,EAAE;IAAA;IACrB,OAAO;MACLnD,YAAY;MACZT,OAAO,uBAAE4D,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEZ,KAAK,iEAAI;IAChC,CAAC;IACD;IACA;EACF,CAAC,MAAM,IAAIvC,YAAY,EAAE;IACvB,OAAO;MACLA;IACF,CAAC;EACH;EACA,OAAO,CAAC,CAAC;AACX,CAAC,EACD;EAAE5B,aAAa;EAAEC;AAAwB,CAAC,CAC3C,CACF,CAAC4E,qBAAqB,CAAC"},"metadata":{"react-intl":{"messages":[{"id":"Default","defaultMessage":"Default"},{"id":"Short Name","defaultMessage":"Short Name"},{"id":"Used for programmatic access to the fieldset.","defaultMessage":"Used for programmatic access to the fieldset."},{"id":"Title","defaultMessage":"Title"},{"id":"Description","defaultMessage":"Description"},{"id":"Close","defaultMessage":"Close"},{"id":"Choices","defaultMessage":"Choices"},{"id":"Required","defaultMessage":"Required"},{"id":"Select…","defaultMessage":"Select…"},{"id":"No value","defaultMessage":"No value"},{"id":"No options","defaultMessage":"No options"}]}},"sourceType":"module","externalDependencies":[]}