{"ast":null,"code":"import _extends from \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/extends.js\";\nvar _jsxFileName = \"/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/volto-form-block/src/components/Widget/TextareaWidget.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\n/**\n * TextareaWidget component.\n * @module components/manage/Widgets/TextareaWidget\n *\n * added aria- attributes\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, TextArea } from 'semantic-ui-react';\nimport { injectIntl } from 'react-intl';\nimport { FormFieldWrapper } from '@plone/volto/components';\n\n/**\n * TextareaWidget, a widget for multiple lines text\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"Text\",\n *  widget: 'textarea',\n * }\n * ```\n */\nconst TextareaWidget = props => {\n  _s();\n  const {\n    id,\n    maxLength,\n    value,\n    onChange,\n    placeholder,\n    required,\n    invalid\n  } = props;\n  const {\n    0: lengthError,\n    1: setlengthError\n  } = useState('');\n  const onhandleChange = (id, value) => {\n    if (maxLength & (value === null || value === void 0 ? void 0 : value.length)) {\n      let remlength = maxLength - value.length;\n      if (remlength < 0) {\n        setlengthError(`You have exceed word limit by ${Math.abs(remlength)}`);\n      } else {\n        setlengthError('');\n      }\n    }\n    onChange(id, value);\n  };\n  let attributes = {};\n  if (required) {\n    attributes.required = true;\n    attributes['aria-required'] = true;\n  }\n  const isInvalid = invalid === true || invalid === 'true';\n  if ((lengthError === null || lengthError === void 0 ? void 0 : lengthError.length) > 0 || isInvalid) {\n    attributes['aria-invalid'] = true;\n  }\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    className: \"textarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }), __jsx(TextArea, _extends({\n    id: `field-${id}`,\n    name: id,\n    value: value || '',\n    disabled: props.isDisabled,\n    placeholder: placeholder,\n    onChange: _ref => {\n      let {\n        target\n      } = _ref;\n      return onhandleChange(id, target.value === '' ? undefined : target.value);\n    }\n  }, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  })), lengthError.length > 0 && __jsx(Label, {\n    key: lengthError,\n    basic: true,\n    color: \"red\",\n    pointing: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, lengthError));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_s(TextareaWidget, \"2ePEFSa5R5GlQVVjadFV9dsD4ek=\");\n_c = TextareaWidget;\nTextareaWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  maxLength: PropTypes.number,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  wrapped: PropTypes.bool,\n  placeholder: PropTypes.string\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nTextareaWidget.defaultProps = {\n  description: null,\n  maxLength: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: null,\n  onEdit: null,\n  onDelete: null\n};\nexport default _c2 = injectIntl(TextareaWidget);\nvar _c, _c2;\n$RefreshReg$(_c, \"TextareaWidget\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","PropTypes","Label","TextArea","injectIntl","FormFieldWrapper","TextareaWidget","props","id","maxLength","value","onChange","placeholder","required","invalid","lengthError","setlengthError","onhandleChange","length","remlength","Math","abs","attributes","isInvalid","isDisabled","target","undefined","propTypes","string","isRequired","title","description","number","bool","error","arrayOf","func","onEdit","onDelete","wrapped","defaultProps"],"sources":["/Users/cihanandac/Documents/code-files/utrechtsciencepark/utrecht-science-park/frontend/node_modules/volto-form-block/src/components/Widget/TextareaWidget.jsx"],"sourcesContent":["/**\n * TextareaWidget component.\n * @module components/manage/Widgets/TextareaWidget\n *\n * added aria- attributes\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, TextArea } from 'semantic-ui-react';\n\nimport { injectIntl } from 'react-intl';\nimport { FormFieldWrapper } from '@plone/volto/components';\n\n/**\n * TextareaWidget, a widget for multiple lines text\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"Text\",\n *  widget: 'textarea',\n * }\n * ```\n */\nconst TextareaWidget = (props) => {\n  const {\n    id,\n    maxLength,\n    value,\n    onChange,\n    placeholder,\n    required,\n    invalid,\n  } = props;\n  const [lengthError, setlengthError] = useState('');\n\n  const onhandleChange = (id, value) => {\n    if (maxLength & value?.length) {\n      let remlength = maxLength - value.length;\n      if (remlength < 0) {\n        setlengthError(`You have exceed word limit by ${Math.abs(remlength)}`);\n      } else {\n        setlengthError('');\n      }\n    }\n    onChange(id, value);\n  };\n\n  let attributes = {};\n  if (required) {\n    attributes.required = true;\n    attributes['aria-required'] = true;\n  }\n\n  const isInvalid = invalid === true || invalid === 'true';\n  if (lengthError?.length > 0 || isInvalid) {\n    attributes['aria-invalid'] = true;\n  }\n\n  return (\n    <FormFieldWrapper {...props} className=\"textarea\">\n      <TextArea\n        id={`field-${id}`}\n        name={id}\n        value={value || ''}\n        disabled={props.isDisabled}\n        placeholder={placeholder}\n        onChange={({ target }) =>\n          onhandleChange(id, target.value === '' ? undefined : target.value)\n        }\n        {...attributes}\n      />\n      {lengthError.length > 0 && (\n        <Label key={lengthError} basic color=\"red\" pointing>\n          {lengthError}\n        </Label>\n      )}\n    </FormFieldWrapper>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nTextareaWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  maxLength: PropTypes.number,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  wrapped: PropTypes.bool,\n  placeholder: PropTypes.string,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nTextareaWidget.defaultProps = {\n  description: null,\n  maxLength: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: null,\n  onEdit: null,\n  onDelete: null,\n};\n\nexport default injectIntl(TextareaWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}